
Roll_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  00002f22  00002fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000041f  008001c4  008001c4  0000307a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000307a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00003118  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a69  00000000  00000000  00003498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010a3  00000000  00000000  00007f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002241  00000000  00000000  00008fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be4  00000000  00000000  0000b1e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001333  00000000  00000000  0000bdcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003a19  00000000  00000000  0000d0ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  00010b18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__ctors_end>
       4:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
       8:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
       c:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      10:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      14:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      18:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      1c:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      20:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      24:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      28:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      2c:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      30:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      34:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      38:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__vector_14>
      3c:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      40:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      44:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      48:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__vector_18>
      4c:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      50:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      54:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      58:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      5c:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      60:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>
      64:	0c 94 87 09 	jmp	0x130e	; 0x130e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	fc 00       	.word	0x00fc	; ????
      6c:	00 fc       	sbrc	r0, 0
      6e:	80 07       	cpc	r24, r16
      70:	fc e0       	ldi	r31, 0x0C	; 12
      72:	1f fc       	.word	0xfc1f	; ????
      74:	f0 3f       	cpi	r31, 0xF0	; 240
      76:	fc f8       	.word	0xf8fc	; ????
      78:	7f fc       	.word	0xfc7f	; ????
      7a:	f8 7f       	andi	r31, 0xF8	; 248
      7c:	fc cc       	rjmp	.-1544   	; 0xfffffa76 <__eeprom_end+0xff7efa76>
      7e:	cf fc       	.word	0xfccf	; ????
      80:	8c c7       	rjmp	.+3864   	; 0xf9a <FONT_8>
      82:	fc 1c       	adc	r15, r12
      84:	e3 fc       	sbrc	r14, 3
      86:	3c f0       	brlt	.+14     	; 0x96 <__trampolines_end+0x2e>
      88:	fc 7c       	andi	r31, 0xCC	; 204
      8a:	f8 fc       	.word	0xfcf8	; ????
      8c:	7c f8       	.word	0xf87c	; ????
      8e:	fc 3c       	cpi	r31, 0xCC	; 204
      90:	f0 fc       	sbrc	r15, 0
      92:	1c e3       	ldi	r17, 0x3C	; 60
      94:	fc 8c       	ldd	r15, Y+28	; 0x1c
      96:	c7 fc       	sbrc	r12, 7
      98:	c6 8f       	std	Z+30, r28	; 0x1e
      9a:	fd e2       	ldi	r31, 0x2D	; 45
      9c:	1f fd       	.word	0xfd1f	; ????
      9e:	f3 3f       	cpi	r31, 0xF3	; 243
      a0:	ff ff       	.word	0xffff	; ????
      a2:	ff ff       	.word	0xffff	; ????
      a4:	ff ff       	.word	0xffff	; ????
      a6:	ff c0       	rjmp	.+510    	; 0x2a6 <ZERO_25+0xc>
      a8:	0f fc       	.word	0xfc0f	; ????
      aa:	80 07       	cpc	r24, r16
      ac:	fc 00       	.word	0x00fc	; ????
      ae:	00 fc       	sbrc	r0, 0

000000b0 <FONT_25_Y_OFFSET>:
	...

000000ba <FONT_25_WIDTHS>:
      ba:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c                       ..........

000000c4 <FONT_25>:
      c4:	9a 02 68 02 36 02 04 02 d2 01 a0 01 6e 01 3c 01     ..h.6.......n.<.
      d4:	0a 01 d8 00                                         ....

000000d8 <NINE_25>:
      d8:	fc f3 fe f7 ff ff 0f fe 07 fe 07 fe 07 fe 0f fe     ................
      e8:	ff ff fe ff fc ff 00 fe 00 fe 00 fe 00 fe 00 fe     ................
      f8:	00 fe 00 fe 00 fe 00 fe 00 fe 00 fe 00 fe 00 fe     ................
     108:	00 fe                                               ..

0000010a <EIGHT_25>:
     10a:	fc f3 fe f7 ff ff 0f ff 07 fe 07 fe 07 fe 07 fe     ................
     11a:	0f ff fe f7 fc f3 fe f7 0f ff 07 fe 07 fe 07 fe     ................
     12a:	07 fe 07 fe 07 fe 07 fe 07 fe 0f ff ff ff fe f7     ................
     13a:	fc f3                                               ..

0000013c <SEVEN_25>:
     13c:	ff ff ff ff ff ff 00 fe 00 fe 00 fe 00 ff 80 f7     ................
     14c:	c0 f3 e0 f1 f0 f0 70 f0 38 f0 1c f0 1c f0 1c f0     ......p.8.......
     15c:	1c f0 1c f0 1c f0 1c f0 1c f0 1c f0 1c f0 1c f0     ................
     16c:	1c f0                                               ..

0000016e <SIX_25>:
     16e:	fc f3 fe f7 ff ff 0f ff 07 fe 07 fe 07 f0 07 f0     ................
     17e:	07 f0 ff f3 ff f7 ff ff 07 fe 07 fe 07 fe 07 fe     ................
     18e:	07 fe 07 fe 07 fe 07 fe 07 fe 0f ff ff ff fe f7     ................
     19e:	fc f3                                               ..

000001a0 <FIVE_25>:
     1a0:	ff ff ff ff ff ff 07 f0 07 f0 07 f0 07 f0 07 f0     ................
     1b0:	07 f0 ff f3 ff f7 ff ff 00 fe 00 fe 00 fe 00 fe     ................
     1c0:	00 fe 00 fe 00 fe 07 fe 07 fe 0f ff ff ff fe f7     ................
     1d0:	fc f3                                               ..

000001d2 <FOUR_25>:
     1d2:	e0 f3 f0 f3 f8 f3 fc f3 9e f3 8f f3 87 f3 87 f3     ................
     1e2:	87 f3 87 f3 ff ff ff ff ff ff 80 f3 80 f3 80 f3     ................
     1f2:	80 f3 80 f3 80 f3 80 f3 80 f3 80 f3 80 f3 80 f3     ................
     202:	80 f3                                               ..

00000204 <THREE_25>:
     204:	fc f3 fe f7 ff ff 0f ff 07 fe 07 fe 00 fe 00 fe     ................
     214:	00 ff f0 f7 f0 f7 f0 f7 00 ff 00 fe 00 fe 00 fe     ................
     224:	00 fe 00 fe 00 fe 07 fe 07 fe 0f ff ff ff fe f7     ................
     234:	fc f3                                               ..

00000236 <TWO_25>:
     236:	fc f3 fe f7 ff ff 07 ff 07 fe 00 fe 00 fe 00 fe     ................
     246:	00 ff 80 f7 c0 f3 e0 f1 f0 f0 78 f0 3c f0 1e f0     ..........x.<...
     256:	0f f0 07 f0 07 f0 07 f0 07 f0 07 f0 ff ff ff ff     ................
     266:	ff ff                                               ..

00000268 <ONE_25>:
     268:	e0 f0 f0 f0 f8 f0 fc f0 ee f0 e6 f0 e0 f0 e0 f0     ................
     278:	e0 f0 e0 f0 e0 f0 e0 f0 e0 f0 e0 f0 e0 f0 e0 f0     ................
     288:	e0 f0 e0 f0 e0 f0 e0 f0 e0 f0 e0 f0 ff ff ff ff     ................
     298:	ff ff                                               ..

0000029a <ZERO_25>:
     29a:	fc f3 fe f7 ff ff 0f ff 07 fe 07 fe 07 ff 87 ff     ................
     2aa:	c7 ff e7 fe 77 fe 3f fe 1f fe 0f fe 07 fe 07 fe     ....w.?.........
     2ba:	07 fe 07 fe 07 fe 07 fe 07 fe 0f ff ff ff fe f7     ................
     2ca:	fc f3                                               ..

000002cc <FONT_20_Y_OFFSET>:
	...

000002d6 <FONT_20_WIDTHS>:
     2d6:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c                       ..........

000002e0 <FONT_20>:
     2e0:	5c 04 34 04 0c 04 e4 03 bc 03 94 03 6c 03 44 03     \.4.........l.D.
     2f0:	1c 03 f4 02                                         ....

000002f4 <NINE_20>:
     2f4:	fc f3 fe f7 07 fe 03 fc 03 fc 03 fc 07 fe fe ff     ................
     304:	fc ff 00 fc 00 fc 00 fc 00 fc 00 fc 00 fc 00 fc     ................
     314:	03 fc 07 fe fe f7 fc f3                             ........

0000031c <EIGHT_20>:
     31c:	fc f3 fe f7 07 fe 03 fc 03 fc 03 fc 07 fe fe f7     ................
     32c:	fe f7 07 fe 03 fc 03 fc 03 fc 03 fc 03 fc 03 fc     ................
     33c:	03 fc 07 fe fe f7 fc f3                             ........

00000344 <SEVEN_20>:
     344:	ff ff ff ff 00 fc 00 fc 00 fe 00 f7 80 f3 c0 f1     ................
     354:	e0 f0 70 f0 38 f0 18 f0 18 f0 18 f0 18 f0 18 f0     ..p.8...........
     364:	18 f0 18 f0 18 f0 18 f0                             ........

0000036c <SIX_20>:
     36c:	fc f3 fe f7 07 fe 03 fc 03 f0 03 f0 03 f0 ff f3     ................
     37c:	ff f7 07 fe 03 fc 03 fc 03 fc 03 fc 03 fc 03 fc     ................
     38c:	03 fc 07 fe fe f7 fc f3                             ........

00000394 <FIVE_20>:
     394:	ff ff ff ff 03 f0 03 f0 03 f0 03 f0 03 f0 ff f3     ................
     3a4:	ff f7 00 fe 00 fc 00 fc 00 fc 00 fc 03 fc 03 fc     ................
     3b4:	03 fc 07 fe fe f7 fc f3                             ........

000003bc <FOUR_20>:
     3bc:	80 f1 c0 f1 e0 f1 f0 f1 b8 f1 9c f1 8e f1 87 f1     ................
     3cc:	83 f1 83 f1 83 f1 ff ff ff ff 80 f1 80 f1 80 f1     ................
     3dc:	80 f1 80 f1 80 f1 80 f1                             ........

000003e4 <THREE_20>:
     3e4:	fc f3 fe f7 07 fe 03 fc 03 fc 00 fc 00 fc 00 fe     ................
     3f4:	f0 f7 f0 f7 00 fe 00 fc 00 fc 00 fc 00 fc 03 fc     ................
     404:	03 fc 07 fe fe f7 fc f3                             ........

0000040c <TWO_20>:
     40c:	fc f3 fe f7 07 fe 03 fc 03 fc 00 fc 00 fe 00 f7     ................
     41c:	80 f3 c0 f1 e0 f0 70 f0 38 f0 1c f0 0e f0 07 f0     ......p.8.......
     42c:	03 f0 03 f0 ff ff ff ff                             ........

00000434 <ONE_20>:
     434:	60 f0 70 f0 78 f0 7c f0 6e f0 66 f0 60 f0 60 f0     `.p.x.|.n.f.`.`.
     444:	60 f0 60 f0 60 f0 60 f0 60 f0 60 f0 60 f0 60 f0     `.`.`.`.`.`.`.`.
     454:	60 f0 60 f0 ff ff ff ff                             `.`.....

0000045c <ZERO_20>:
     45c:	fc f3 fe f7 07 fe 03 fe 03 ff 83 ff c3 fd e3 fc     ................
     46c:	73 fc 3b fc 1f fc 0f fc 07 fc 03 fc 03 fc 03 fc     s.;.............
     47c:	03 fc 07 fe fe f7 fc f3                             ........

00000484 <FONT_16_Y_OFFSET>:
	...
     4a4:	04 00 00 02 00 00 00 00 00 04 04 00 00 00 00 00     ................
     4b4:	00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000004d5 <FONT_16_WIDTHS>:
     4d5:	0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0e 0c 0a 0a     ................
     4e5:	0a 0a 0a 0a 0a 0a 0e 0a 0a 0a 0a 0a 0a 0a 0a 08     ................
     4f5:	0a 0a 02 06 0a 02 0e 0a 0a 0a 0a 08 0a 08 0a 0a     ................
     505:	0e 0a 0a 08 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 02 06     ................
     515:	0c 0a 0a 02 06 06 0a 02 0a 04 08 04 04 0a 0a 14     ................
     525:	14                                                  .

00000526 <FONT_16>:
     526:	d8 0e b8 0e 98 0e 78 0e 58 0e 38 0e 18 0e f8 0d     ......x.X.8.....
     536:	d8 0d b8 0d 98 0d 78 0d 58 0d 38 0d 18 0d f8 0c     ......x.X.8.....
     546:	d8 0c b8 0c 98 0c 78 0c 58 0c 38 0c 18 0c f8 0b     ......x.X.8.....
     556:	d8 0b b8 0b 98 0b 78 0b 58 0b 38 0b 18 0b 08 0b     ......x.X.8.....
     566:	e8 0a c8 0a b8 0a a8 0a 88 0a 78 0a 58 0a 38 0a     ..........x.X.8.
     576:	18 0a f8 09 d8 09 c8 09 a8 09 98 09 78 09 58 09     ............x.X.
     586:	38 09 18 09 f8 08 e8 08 c8 08 a8 08 88 08 68 08     8.............h.
     596:	48 08 28 08 08 08 e8 07 c8 07 a8 07 98 07 88 07     H.(.............
     5a6:	68 07 48 07 28 07 18 07 08 07 f8 06 d8 06 c8 06     h.H.(...........
     5b6:	a8 06 98 06 88 06 78 06 68 06 48 06 28 06 f8 05     ......x.h.H.(...
     5c6:	c8 05                                               ..

000005c8 <DEGREES_FAHRENHEIT_16>:
     5c8:	3c fc ff 7e fc ff e7 0c f0 c3 0c f0 c3 0c f0 e7     <..~............
     5d8:	0c f0 7e fc f3 3c fc f3 00 0c f0 00 0c f0 00 0c     ..~..<..........
     5e8:	f0 00 0c f0 00 0c f0 00 0c f0 00 0c f0 00 0c f0     ................

000005f8 <DEGREES_CELSIUS_16>:
     5f8:	3c f0 f3 66 f8 f7 c3 1c fe 81 0c fc 81 0c f0 c3     <..f............
     608:	0c f0 66 0c f0 3c 0c f0 00 0c f0 00 0c f0 00 0c     ..f..<..........
     618:	f0 00 0c f0 00 0c fc 00 1c fe 00 f8 f7 00 f0 f3     ................

00000628 <QUESTION_16>:
     628:	fc fc fe fd 87 ff 03 ff 03 ff 03 ff 80 ff c0 ff     ................
     638:	f0 fc 30 fc 30 fc 00 fc 30 fc 78 fc 78 fc 30 fc     ..0.0...0.x.x.0.

00000648 <EQUALS_16>:
     648:	00 fc 00 fc 00 fc 00 fc ff ff ff ff 00 fc 00 fc     ................
     658:	00 fc 00 fc ff ff ff ff 00 fc 00 fc 00 fc 00 fc     ................

00000668 <SEMI_COLON_16>:
     668:	f0 f0 f6 ff ff f6 f0 f0 f0 f0 f6 ff ff ff ff ff     ................

00000678 <COLON_16>:
     678:	f0 f0 f6 ff ff f6 f0 f0 f0 f0 f6 ff ff f6 f0 f0     ................

00000688 <FORWARD_SLASH_16>:
     688:	c0 c0 c0 e0 60 70 30 38 18 1c 0c 0e 06 07 03 03     ....`p08........

00000698 <FULL_STOP_16>:
     698:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f6 ff ff f6     ................

000006a8 <MINUS_16>:
     6a8:	00 fc 00 fc 00 fc 00 fc 00 fc 00 fc 00 fc 00 fc     ................
     6b8:	ff ff ff ff 00 fc 00 fc 00 fc 00 fc 00 fc 00 fc     ................

000006c8 <COMMA_16>:
     6c8:	fc fc fc fc fc fc fc fc fc fc fc fc ff ff ff ff     ................

000006d8 <PLUS_16>:
     6d8:	00 fc 00 fc 00 fc 00 fc 30 fc 30 fc 30 fc 30 fc     ........0.0.0.0.
     6e8:	ff ff ff ff 30 fc 30 fc 30 fc 30 fc 00 fc 00 fc     ....0.0.0.0.....

000006f8 <CLOSE_BRACKET_16>:
     6f8:	c3 c7 ce dc f8 f0 f0 f0 f0 f0 f0 f8 dc ce c7 c3     ................

00000708 <OPEN_BRACKET_16>:
     708:	f0 f8 dc ce c7 c3 c3 c3 c3 c3 c3 c7 ce dc f8 f0     ................

00000718 <SINGLE_QUOTE_16>:
     718:	ff ff ff ff ff ff fc fc fc fc fc fc fc fc fc fc     ................

00000728 <PERCENT_16>:
     728:	87 fd c7 fd c7 fc e0 fc 60 fc 70 fc 30 fc 38 fc     ........`.p.0.8.
     738:	18 fc 1c fc 0c fc 0e fc 06 fc 87 ff 83 ff 83 ff     ................

00000748 <DOLLAR_16>:
     748:	30 fc 30 fc fc fc fe fd b3 ff 33 ff 3e fc 7c fc     0.0.......3.>.|.
     758:	70 fc f0 fd 33 ff 37 ff fe fd fc fc 30 fc 30 fc     p...3.7.....0.0.

00000768 <HASHTAG_16>:
     768:	00 f0 0c f3 0c f3 0c f3 ff ff ff ff 0c f3 0c f3     ................
     778:	0c f3 0c f3 ff ff ff ff 0c f3 0c f3 0c f3 00 f0     ................

00000788 <DOUBLE_QUOTE_16>:
     788:	f3 f3 f3 f3 f3 f3 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................

00000798 <EXCLAMATION_16>:
     798:	ff ff ff ff ff ff ff ff ff ff ff ff fc fc ff ff     ................

000007a8 <NINE_16>:
     7a8:	fc fc fe fd 07 ff 03 ff 03 ff 07 ff fe ff fc ff     ................
     7b8:	00 ff 00 ff 00 ff 00 ff 03 ff 87 ff fe fd fc fc     ................

000007c8 <EIGHT_16>:
     7c8:	fc fc fe fd 87 ff 03 ff 03 ff 87 ff fe fd fe fd     ................
     7d8:	87 ff 03 ff 03 ff 03 ff 03 ff 87 ff fe fd fc fc     ................

000007e8 <SEVEN_16>:
     7e8:	ff ff ff ff 00 ff 80 ff c0 fd e0 fc 70 fc 38 fc     ............p.8.
     7f8:	1c fc 0c fc 0c fc 0c fc 0c fc 0c fc 0c fc 0c fc     ................

00000808 <SIX_16>:
     808:	fc fc fe fd 87 ff 03 ff 03 fc 03 fc ff fc ff fd     ................
     818:	87 ff 03 ff 03 ff 03 ff 03 ff 87 ff fe fd fc fc     ................

00000828 <FIVE_16>:
     828:	ff ff ff ff 03 fc 03 fc 03 fc 03 fc ff fc ff fd     ................
     838:	80 ff 00 ff 03 ff 03 ff 03 ff 87 ff fe fd fc fc     ................

00000848 <FOUR_16>:
     848:	c0 fc e0 fc f0 fc f8 fc dc fc ce fc c7 fc c3 fc     ................
     858:	ff ff ff ff c0 fc c0 fc c0 fc c0 fc c0 fc c0 fc     ................

00000868 <THREE_16>:
     868:	fc fc fe fd 87 ff 03 ff 00 ff 80 ff f0 fd f0 fd     ................
     878:	80 ff 00 ff 00 ff 00 ff 03 ff 87 ff fe fd fc fc     ................

00000888 <TWO_16>:
     888:	fc fc fe fd 87 ff 03 ff 00 ff 80 ff c0 fd e0 fc     ................
     898:	70 fc 38 fc 1c fc 0e fc 07 fc 03 fc ff ff ff ff     p.8.............

000008a8 <ONE_16>:
     8a8:	30 fc 38 fc 3c fc 3e fc 36 fc 30 fc 30 fc 30 fc     0.8.<.>.6.0.0.0.
     8b8:	30 fc 30 fc 30 fc 30 fc 30 fc 30 fc ff ff ff ff     0.0.0.0.0.0.....

000008c8 <ZERO_16>:
     8c8:	fc fc fe fd 87 ff 83 ff c3 ff e3 ff 73 ff 3b ff     ............s.;.
     8d8:	1f ff 0f ff 07 ff 03 ff 03 ff 87 ff fe fd fc fc     ................

000008e8 <z_16>:
     8e8:	00 00 00 00 ff ff c0 e0 70 38 1c 0e 07 03 ff ff     ........p8......

000008f8 <y_16>:
     8f8:	03 ff 03 ff 03 ff 87 ff ce fd fc fc 78 fc 30 fc     ............x.0.
     908:	30 fc 30 fc 30 fc 30 fc 38 fc 1c fc 0f fc 07 fc     0.0.0.0.8.......

00000918 <x_16>:
     918:	00 fc 00 fc 00 fc 00 fc 03 ff 87 ff ce fd fc fc     ................
     928:	78 fc 30 fc 30 fc 78 fc fc fc ce fd 87 ff 03 ff     x.0.0.x.........

00000938 <w_16>:
     938:	00 c0 00 c0 00 c0 00 c0 c3 f0 c3 f0 c3 f0 e3 f1     ................
     948:	e3 f1 33 f3 33 f3 1f fe 0e dc 0c cc 0c cc 0c cc     ..3.3...........

00000958 <v_16>:
     958:	00 fc 00 fc 00 fc 00 fc 03 ff 03 ff 03 ff 03 ff     ................
     968:	86 fd 86 fd cc fc cc fc cc fc 48 fc 78 fc 30 fc     ..........H.x.0.

00000978 <u_16>:
     978:	00 fc 00 fc 00 fc 00 fc 03 ff 03 ff 03 ff 03 ff     ................
     988:	03 ff 03 ff 03 ff 03 ff 03 ff 87 ff fe ff 7c ff     ..............|.

00000998 <t_16>:
     998:	0c 0c 0c 0c ff ff 0c 0c 0c 0c 0c 0c 0c 1c f8 f0     ................

000009a8 <s_16>:
     9a8:	00 fc 00 fc 00 fc 00 fc fc ff fe ff 07 fc 07 fc     ................
     9b8:	fe fc fc fd 80 ff 00 ff 00 ff 80 ff ff fd ff fc     ................

000009c8 <r_16>:
     9c8:	00 00 00 00 f3 fb 1f 0f 07 03 03 03 03 03 03 03     ................

000009d8 <q_16>:
     9d8:	fc ff fe ff 07 ff 03 ff 03 ff 03 ff 03 ff 03 ff     ................
     9e8:	03 ff 07 ff fe ff fc ff 00 ff 00 ff 00 ff 00 ff     ................

000009f8 <p_16>:
     9f8:	ff fc ff fd 83 ff 03 ff 03 ff 03 ff 03 ff 03 ff     ................
     a08:	03 ff 83 ff ff fd ff fc 03 fc 03 fc 03 fc 03 fc     ................

00000a18 <o_16>:
     a18:	00 fc 00 fc 00 fc 00 fc fc fc fe fd 87 ff 03 ff     ................
     a28:	03 ff 03 ff 03 ff 03 ff 03 ff 87 ff fe fd fc fc     ................

00000a38 <n_16>:
     a38:	00 fc 00 fc 00 fc 00 fc ff fc ff fd 83 ff 03 ff     ................
     a48:	03 ff 03 ff 03 ff 03 ff 03 ff 03 ff 03 ff 03 ff     ................

00000a58 <m_16>:
     a58:	00 c0 00 c0 00 c0 00 c0 3f cf ff df e3 f9 c3 f0     ........?.......
     a68:	c3 f0 c3 f0 c3 f0 c3 f0 c3 f0 c3 f0 c3 f0 c3 f0     ................

00000a78 <l_16>:
     a78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00000a88 <k_16>:
     a88:	03 fc 03 fc 03 fc 03 fc ff fc ff fd 83 ff 03 ff     ................
     a98:	03 ff 83 ff ff fd ff fc e3 fc c3 fd 83 ff 03 ff     ................

00000aa8 <j_16>:
     aa8:	f0 f0 c0 c0 fc fc f0 f0 f0 f0 f0 f0 f3 ff de cc     ................

00000ab8 <i_16>:
     ab8:	fc fc ff ff fc fc ff ff ff ff ff ff ff ff ff ff     ................

00000ac8 <h_16>:
     ac8:	03 fc 03 fc 03 fc 03 fc ff fc ff fd 83 ff 03 ff     ................
     ad8:	03 ff 03 ff 03 ff 03 ff 03 ff 03 ff 03 ff 03 ff     ................

00000ae8 <g_16>:
     ae8:	fc ff fe ff 07 ff 03 ff 03 ff 03 ff 03 ff 07 ff     ................
     af8:	fe ff fc ff 00 ff 00 ff 03 ff 87 ff fe fd fc fc     ................

00000b08 <f_16>:
     b08:	f0 f8 1c 0c 0c 0c ff ff 0c 0c 0c 0c 0c 0c 0c 0c     ................

00000b18 <e_16>:
     b18:	00 fc 00 fc 00 fc 00 fc fc fc fe fd 87 ff 03 ff     ................
     b28:	ff ff ff ff 03 fc 03 fc 03 ff 87 ff fe fd fc fc     ................

00000b38 <d_16>:
     b38:	00 ff 00 ff 00 ff 00 ff fc ff fe ff 07 ff 03 ff     ................
     b48:	03 ff 03 ff 03 ff 03 ff 03 ff 07 ff fe ff fc ff     ................

00000b58 <c_16>:
     b58:	00 fc 00 fc 00 fc 00 fc fc fc fe fd 87 ff 03 ff     ................
     b68:	03 fc 03 fc 03 fc 03 fc 03 ff 87 ff fe fd fc fc     ................

00000b78 <b_16>:
     b78:	03 fc 03 fc 03 fc 03 fc ff fc ff fd 83 ff 03 ff     ................
     b88:	03 ff 03 ff 03 ff 03 ff 03 ff 83 ff ff fd ff fc     ................

00000b98 <a_16>:
     b98:	00 fc 00 fc 00 fc 00 fc fc fc fe fd 87 ff 03 ff     ................
     ba8:	03 ff 03 ff 03 ff 83 ff c3 ff e7 ff 7e ff 3c ff     ............~.<.

00000bb8 <Z_16>:
     bb8:	ff ff ff ff 00 ff 00 ff 80 ff c0 fd e0 fc 70 fc     ..............p.
     bc8:	38 fc 1c fc 0e fc 07 fc 03 fc 03 fc ff ff ff ff     8...............

00000bd8 <Y_16>:
     bd8:	03 ff 03 ff 03 ff 03 ff 86 fd 86 fd cc fc fc fc     ................
     be8:	78 fc 30 fc 30 fc 30 fc 30 fc 30 fc 30 fc 30 fc     x.0.0.0.0.0.0.0.

00000bf8 <X_16>:
     bf8:	03 ff 03 ff 03 ff 87 ff ce fd fc fc 78 fc 30 fc     ............x.0.
     c08:	30 fc 78 fc fc fc ce fd 87 ff 03 ff 03 ff 03 ff     0.x.............

00000c18 <W_16>:
     c18:	03 f0 03 f0 03 f0 03 f0 c3 f0 c3 f0 c3 f0 e3 f1     ................
     c28:	f3 f3 33 f3 33 f3 33 f3 1e de 0c cc 0c cc 0c cc     ..3.3.3.........

00000c38 <V_16>:
     c38:	03 ff 03 ff 03 ff 03 ff 86 fd 86 fd 86 fd 86 fd     ................
     c48:	cc fc cc fc cc fc cc fc 48 fc 78 fc 30 fc 30 fc     ........H.x.0.0.

00000c58 <U_16>:
     c58:	03 ff 03 ff 03 ff 03 ff 03 ff 03 ff 03 ff 03 ff     ................
     c68:	03 ff 03 ff 03 ff 03 ff 03 ff 87 ff fe fd fc fc     ................

00000c78 <T_16>:
     c78:	ff ff ff ff 30 fc 30 fc 30 fc 30 fc 30 fc 30 fc     ....0.0.0.0.0.0.
     c88:	30 fc 30 fc 30 fc 30 fc 30 fc 30 fc 30 fc 30 fc     0.0.0.0.0.0.0.0.

00000c98 <S_16>:
     c98:	fc fc fe fd 87 ff 03 ff 03 fc 07 fc fe fc fc fd     ................
     ca8:	80 ff 00 ff 00 ff 00 ff 03 ff 87 ff fe fd fc fc     ................

00000cb8 <R_16>:
     cb8:	ff fc ff fd 83 ff 03 ff 03 ff 83 ff ff fd ff fd     ................
     cc8:	83 ff 03 ff 03 ff 03 ff 03 ff 03 ff 03 ff 03 ff     ................

00000cd8 <Q_16>:
     cd8:	fc fc fe fd 87 ff 03 ff 03 ff 03 ff 03 ff 03 ff     ................
     ce8:	03 ff 03 ff 63 ff e7 ff fe fd fc fc c0 ff c0 ff     ....c...........

00000cf8 <P_16>:
     cf8:	ff fc ff fd 83 ff 03 ff 03 ff 03 ff 03 ff 03 ff     ................
     d08:	03 ff 83 ff ff fd ff fc 03 fc 03 fc 03 fc 03 fc     ................

00000d18 <O_16>:
     d18:	fc fc fe fd 87 ff 03 ff 03 ff 03 ff 03 ff 03 ff     ................
     d28:	03 ff 03 ff 03 ff 03 ff 03 ff 87 ff fe fd fc fc     ................

00000d38 <N_16>:
     d38:	07 fc 0f fc 0f fc 1b fc 1b fc 33 fc 33 fc 63 fc     ..........3.3.c.
     d48:	63 fc c3 fc c3 fc 83 fd 83 fd 03 ff 03 ff 03 fe     c...............

00000d58 <M_16>:
     d58:	07 f8 0f fc 0f fc 1f fe 1b f6 3b f7 33 f3 f3 f3     ..........;.3...
     d68:	e3 f1 c3 f0 c3 f0 c3 f0 03 f0 03 f0 03 f0 03 f0     ................

00000d78 <L_16>:
     d78:	03 fc 03 fc 03 fc 03 fc 03 fc 03 fc 03 fc 03 fc     ................
     d88:	03 fc 03 fc 03 fc 03 fc 03 fc 03 fc ff ff ff ff     ................

00000d98 <K_16>:
     d98:	03 ff 83 ff c3 fd e3 fc 73 fc 3b fc 1f fc 1f fc     ........s.;.....
     da8:	3b fc 73 fc e3 fc c3 fd 83 ff 03 ff 03 ff 03 ff     ;.s.............

00000db8 <J_16>:
     db8:	f0 ff f0 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff     ................
     dc8:	00 ff 00 ff 00 ff 00 ff 03 ff 87 ff fe fd fc fc     ................

00000dd8 <I_16>:
     dd8:	ff ff ff ff 30 fc 30 fc 30 fc 30 fc 30 fc 30 fc     ....0.0.0.0.0.0.
     de8:	30 fc 30 fc 30 fc 30 fc 30 fc 30 fc ff ff ff ff     0.0.0.0.0.0.....

00000df8 <H_16>:
     df8:	03 ff 03 ff 03 ff 03 ff 03 ff 03 ff ff ff ff ff     ................
     e08:	03 ff 03 ff 03 ff 03 ff 03 ff 03 ff 03 ff 03 ff     ................

00000e18 <G_16>:
     e18:	fc fc fe fd 87 ff 03 ff 03 fc 03 fc 03 fc 03 fc     ................
     e28:	f3 ff f3 ff 03 ff 03 ff 03 ff 87 ff fe fd fc fc     ................

00000e38 <F_16>:
     e38:	ff ff ff ff 03 fc 03 fc 03 fc 03 fc ff fc ff fc     ................
     e48:	03 fc 03 fc 03 fc 03 fc 03 fc 03 fc 03 fc 03 fc     ................

00000e58 <E_16>:
     e58:	ff ff ff ff 03 fc 03 fc 03 fc 03 fc ff fc ff fc     ................
     e68:	03 fc 03 fc 03 fc 03 fc 03 fc 03 fc ff ff ff ff     ................

00000e78 <D_16>:
     e78:	ff fc ff fd 83 ff 03 ff 03 ff 03 ff 03 ff 03 ff     ................
     e88:	03 ff 03 ff 03 ff 03 ff 03 ff 83 ff ff fd ff fc     ................

00000e98 <C_16>:
     e98:	fc fc fe fd 87 ff 03 ff 03 fc 03 fc 03 fc 03 fc     ................
     ea8:	03 fc 03 fc 03 fc 03 fc 03 ff 87 ff fe fd fc fc     ................

00000eb8 <B_16>:
     eb8:	ff fc ff fd 83 ff 03 ff 03 ff 83 ff ff fd ff fd     ................
     ec8:	83 ff 03 ff 03 ff 03 ff 03 ff 83 ff ff fd ff fc     ................

00000ed8 <A_16>:
     ed8:	fc fc fe fd 87 ff 03 ff 03 ff 03 ff ff ff ff ff     ................
     ee8:	03 ff 03 ff 03 ff 03 ff 03 ff 03 ff 03 ff 03 ff     ................

00000ef8 <FONT_8_Y_OFFSET>:
	...
     f18:	02 00 00 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     f28:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000f49 <FONT_8_WIDTHS>:
     f49:	05 05 05 05 05 05 05 05 05 05 05 05 07 06 05 05     ................
     f59:	05 05 05 05 05 05 07 05 05 05 05 05 05 05 05 04     ................
     f69:	05 05 01 03 05 01 07 05 05 05 05 04 05 04 05 05     ................
     f79:	07 05 05 04 05 05 05 05 05 05 05 05 05 05 01 03     ................
     f89:	06 05 05 01 03 03 05 01 05 02 04 02 02 05 05 0a     ................
     f99:	0a                                                  .

00000f9a <FONT_8>:
     f9a:	cc 12 c4 12 bc 12 b4 12 ac 12 a4 12 9c 12 94 12     ................
     faa:	8c 12 84 12 7c 12 74 12 6c 12 64 12 5c 12 54 12     ....|.t.l.d.\.T.
     fba:	4c 12 44 12 3c 12 34 12 2c 12 24 12 1c 12 14 12     L.D.<.4.,.$.....
     fca:	0c 12 04 12 fc 11 f4 11 ec 11 e4 11 dc 11 d4 11     ................
     fda:	cc 11 c4 11 bc 11 b4 11 ac 11 a4 11 9c 11 94 11     ................
     fea:	8c 11 84 11 7c 11 74 11 6c 11 64 11 5c 11 54 11     ....|.t.l.d.\.T.
     ffa:	4c 11 44 11 3c 11 34 11 2c 11 24 11 1c 11 14 11     L.D.<.4.,.$.....
    100a:	0c 11 04 11 fc 10 f4 10 ec 10 e4 10 dc 10 d4 10     ................
    101a:	cc 10 c4 10 bc 10 b4 10 ac 10 a4 10 9c 10 94 10     ................
    102a:	8c 10 84 10 7c 10 74 10 6c 10 64 10 5c 10 4c 10     ....|.t.l.d.\.L.
    103a:	3c 10                                               <.

0000103c <DEGREES_FAHRENHEIT_8>:
    103c:	e6 ff 29 fc 29 fc e6 fd 20 fc 20 fc 20 fc 20 fc     ..).)... . . . .

0000104c <DEGREES_CELSIUS_8>:
    104c:	c6 fd 29 fe 29 fc 26 fc 20 fc 20 fc 20 fe c0 fd     ..).).&. . . ...

0000105c <QUESTION_8>:
    105c:	ee f1 f1 f0 ec e4 e0 e4                             ........

00001064 <EQUALS_8>:
    1064:	e0 e0 ff e0 e0 ff e0 e0                             ........

0000106c <SEMI_COLON_8>:
    106c:	fc ff ff fc fc ff ff ff                             ........

00001074 <COLON_8>:
    1074:	fc ff ff fc fc ff ff fc                             ........

0000107c <FORWARD_SLASH_8>:
    107c:	f8 f8 f4 f4 f2 f2 f1 f1                             ........

00001084 <FULL_STOP_8>:
    1084:	fc fc fc fc fc fc ff ff                             ........

0000108c <MINUS_8>:
    108c:	e0 e0 e0 e0 ff e0 e0 e0                             ........

00001094 <COMMA_8>:
    1094:	fe fe fe fe fe fe ff ff                             ........

0000109c <PLUS_8>:
    109c:	e0 e0 e4 e4 ff e4 e4 e0                             ........

000010a4 <CLOSE_BRACKET_8>:
    10a4:	f9 fa fc fc fc fc fa f9                             ........

000010ac <OPEN_BRACKET_8>:
    10ac:	fc fa f9 f9 f9 f9 fa fc                             ........

000010b4 <SINGLE_QUOTE_8>:
    10b4:	ff ff ff fe fe fe fe fe                             ........

000010bc <PERCENT_8>:
    10bc:	e0 f3 eb e8 e4 e2 fa f9                             ........

000010c4 <DOLLAR_8>:
    10c4:	e4 ee f5 e6 ec f5 ee e4                             ........

000010cc <HASHTAG_8>:
    10cc:	c0 d2 ff d2 d2 ff d2 c0                             ........

000010d4 <DOUBLE_QUOTE_8>:
    10d4:	fd fd fd f8 f8 f8 f8 f8                             ........

000010dc <EXCLAMATION_8>:
    10dc:	ff ff ff ff ff ff fe ff                             ........

000010e4 <NINE_8>:
    10e4:	ee f1 f1 fe f0 f0 f1 ee                             ........

000010ec <EIGHT_8>:
    10ec:	ee f1 f1 ee f1 f1 f1 ee                             ........

000010f4 <SEVEN_8>:
    10f4:	ff f0 e8 e4 e2 e2 e2 e2                             ........

000010fc <SIX_8>:
    10fc:	ee f1 e1 ef f1 f1 f1 ee                             ........

00001104 <FIVE_8>:
    1104:	ff e1 e1 ef f0 f1 f1 ee                             ........

0000110c <FOUR_8>:
    110c:	e8 ec ea e9 ff e8 e8 e8                             ........

00001114 <THREE_8>:
    1114:	ee f1 f0 ec f0 f0 f1 ee                             ........

0000111c <TWO_8>:
    111c:	ee f1 f0 e8 e4 e2 e1 ff                             ........

00001124 <ONE_8>:
    1124:	e4 e6 e5 e4 e4 e4 e4 ff                             ........

0000112c <ZERO_8>:
    112c:	ee f1 f9 f5 f3 f1 f1 ee                             ........

00001134 <z_8>:
    1134:	f0 f0 ff f8 f4 f2 f1 ff                             ........

0000113c <y_8>:
    113c:	f1 f1 ea ea e4 e4 e2 e2                             ........

00001144 <x_8>:
    1144:	e0 e0 f1 ea e4 e4 ea f1                             ........

0000114c <w_8>:
    114c:	80 80 c9 c9 d5 d5 a2 a2                             ........

00001154 <v_8>:
    1154:	e0 e0 f1 f1 ea ea e4 e4                             ........

0000115c <u_8>:
    115c:	e0 e0 f1 f1 f1 f1 f1 fe                             ........

00001164 <t_8>:
    1164:	f2 f2 ff f2 f2 f2 f2 fc                             ........

0000116c <s_8>:
    116c:	e0 e0 fe e1 ee f0 f0 ef                             ........

00001174 <r_8>:
    1174:	f0 f0 fd f3 f1 f1 f1 f1                             ........

0000117c <q_8>:
    117c:	fe f1 f1 f1 f1 fe f0 f0                             ........

00001184 <p_8>:
    1184:	ef f1 f1 f1 f1 ef e1 e1                             ........

0000118c <o_8>:
    118c:	e0 e0 ee f1 f1 f1 f1 ee                             ........

00001194 <n_8>:
    1194:	e0 e0 ef f1 f1 f1 f1 f1                             ........

0000119c <m_8>:
    119c:	80 80 b7 c9 c9 c9 c9 c9                             ........

000011a4 <l_8>:
    11a4:	ff ff ff ff ff ff ff ff                             ........

000011ac <k_8>:
    11ac:	e1 e1 ef f1 f1 ef e9 f1                             ........

000011b4 <j_8>:
    11b4:	fc f8 fe fc fc fc fd fa                             ........

000011bc <i_8>:
    11bc:	fe ff fe ff ff ff ff ff                             ........

000011c4 <h_8>:
    11c4:	e1 e1 ef f1 f1 f1 f1 f1                             ........

000011cc <g_8>:
    11cc:	fe f1 f1 f1 fe f0 f1 ee                             ........

000011d4 <f_8>:
    11d4:	fc f2 f2 ff f2 f2 f2 f2                             ........

000011dc <e_8>:
    11dc:	e0 e0 ee f1 ff e1 f1 ee                             ........

000011e4 <d_8>:
    11e4:	f0 f0 fe f1 f1 f1 f1 fe                             ........

000011ec <c_8>:
    11ec:	e0 e0 ee f1 e1 e1 f1 ee                             ........

000011f4 <b_8>:
    11f4:	e1 e1 ef f1 f1 f1 f1 ef                             ........

000011fc <a_8>:
    11fc:	e0 e0 ee f1 f1 f1 f9 f6                             ........

00001204 <Z_8>:
    1204:	ff f0 e8 e4 e4 e2 e1 ff                             ........

0000120c <Y_8>:
    120c:	f1 f1 ea ea e4 e4 e4 e4                             ........

00001214 <X_8>:
    1214:	f1 f1 ea e4 e4 ea f1 f1                             ........

0000121c <W_8>:
    121c:	c1 c1 c9 c9 d5 d5 a2 a2                             ........

00001224 <V_8>:
    1224:	f1 f1 f1 ea ea ea e4 e4                             ........

0000122c <U_8>:
    122c:	f1 f1 f1 f1 f1 f1 f1 ee                             ........

00001234 <T_8>:
    1234:	ff e4 e4 e4 e4 e4 e4 e4                             ........

0000123c <S_8>:
    123c:	ee f1 e1 ee f0 f0 f1 ee                             ........

00001244 <R_8>:
    1244:	ef f1 f1 ef f1 f1 f1 f1                             ........

0000124c <Q_8>:
    124c:	ee f1 f1 f1 f1 f1 ee f8                             ........

00001254 <P_8>:
    1254:	ef f1 f1 f1 f1 ef e1 e1                             ........

0000125c <O_8>:
    125c:	ee f1 f1 f1 f1 f1 f1 ee                             ........

00001264 <N_8>:
    1264:	e3 e3 e5 e5 e9 e9 f1 f1                             ........

0000126c <M_8>:
    126c:	e3 e3 d5 d5 c9 c9 c1 c1                             ........

00001274 <L_8>:
    1274:	e1 e1 e1 e1 e1 e1 e1 ff                             ........

0000127c <K_8>:
    127c:	f1 e9 e5 e3 e5 e9 f1 f1                             ........

00001284 <J_8>:
    1284:	fc f0 f0 f0 f0 f0 f1 ee                             ........

0000128c <I_8>:
    128c:	ff e4 e4 e4 e4 e4 e4 ff                             ........

00001294 <H_8>:
    1294:	f1 f1 f1 ff f1 f1 f1 f1                             ........

0000129c <G_8>:
    129c:	ee f1 e1 e1 fd f1 f1 ee                             ........

000012a4 <F_8>:
    12a4:	ff e1 e1 ef e1 e1 e1 e1                             ........

000012ac <E_8>:
    12ac:	ff e1 e1 ef e1 e1 e1 ff                             ........

000012b4 <D_8>:
    12b4:	ef f1 f1 f1 f1 f1 f1 ef                             ........

000012bc <C_8>:
    12bc:	ee f1 e1 e1 e1 e1 f1 ee                             ........

000012c4 <B_8>:
    12c4:	ef f1 f1 ef f1 f1 f1 ef                             ........

000012cc <A_8>:
    12cc:	ee f1 f1 ff f1 f1 f1 f1                             ........

000012d4 <__ctors_end>:
    12d4:	11 24       	eor	r1, r1
    12d6:	1f be       	out	0x3f, r1	; 63
    12d8:	cf ef       	ldi	r28, 0xFF	; 255
    12da:	d8 e0       	ldi	r29, 0x08	; 8
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	cd bf       	out	0x3d, r28	; 61

000012e0 <__do_copy_data>:
    12e0:	11 e0       	ldi	r17, 0x01	; 1
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	b1 e0       	ldi	r27, 0x01	; 1
    12e6:	e2 e2       	ldi	r30, 0x22	; 34
    12e8:	ff e2       	ldi	r31, 0x2F	; 47
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <__do_copy_data+0x10>
    12ec:	05 90       	lpm	r0, Z+
    12ee:	0d 92       	st	X+, r0
    12f0:	a4 3c       	cpi	r26, 0xC4	; 196
    12f2:	b1 07       	cpc	r27, r17
    12f4:	d9 f7       	brne	.-10     	; 0x12ec <__do_copy_data+0xc>

000012f6 <__do_clear_bss>:
    12f6:	25 e0       	ldi	r18, 0x05	; 5
    12f8:	a4 ec       	ldi	r26, 0xC4	; 196
    12fa:	b1 e0       	ldi	r27, 0x01	; 1
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <.do_clear_bss_start>

000012fe <.do_clear_bss_loop>:
    12fe:	1d 92       	st	X+, r1

00001300 <.do_clear_bss_start>:
    1300:	a3 3e       	cpi	r26, 0xE3	; 227
    1302:	b2 07       	cpc	r27, r18
    1304:	e1 f7       	brne	.-8      	; 0x12fe <.do_clear_bss_loop>
    1306:	0e 94 9e 0b 	call	0x173c	; 0x173c <main>
    130a:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <_exit>

0000130e <__bad_interrupt>:
    130e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001312 <ADXL343_setup_axis_read>:
 * -------------------------
 * Initialise the ADXL343 sensor to read data from the x, y, z - axis. The specific
 * initialisation steps depend on the communication protocol defined in the header (SPI or I2C).
*/	
void ADXL343_setup_axis_read() {
	adxl_axis_readings[0] = 0;
    1312:	e1 ed       	ldi	r30, 0xD1	; 209
    1314:	f1 e0       	ldi	r31, 0x01	; 1
    1316:	10 82       	st	Z, r1
    1318:	11 82       	std	Z+1, r1	; 0x01
    131a:	12 82       	std	Z+2, r1	; 0x02
    131c:	13 82       	std	Z+3, r1	; 0x03
	adxl_axis_readings[1] = 0;
    131e:	14 82       	std	Z+4, r1	; 0x04
    1320:	15 82       	std	Z+5, r1	; 0x05
    1322:	16 82       	std	Z+6, r1	; 0x06
    1324:	17 82       	std	Z+7, r1	; 0x07
	adxl_axis_readings[2] = 0;
    1326:	10 86       	std	Z+8, r1	; 0x08
    1328:	11 86       	std	Z+9, r1	; 0x09
    132a:	12 86       	std	Z+10, r1	; 0x0a
    132c:	13 86       	std	Z+11, r1	; 0x0b
		A328p_SPI_transfer_data_to_reg(SPI_WRITE | SPI_SINGLEBYTE | DATA_FORMAT, 0x07);
		A328p_SPI_transfer_data_to_reg(SPI_WRITE | SPI_SINGLEBYTE | POWER_CTL,	 0x08);
		return;
	#else
		/* I2C Comms */
		i2c_start_wait(I2C_WRITE_ADDR);
    132e:	86 ea       	ldi	r24, 0xA6	; 166
    1330:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <i2c_start_wait>
		i2c_write(BW_RATE);
    1334:	8c e2       	ldi	r24, 0x2C	; 44
    1336:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
		i2c_write(0x0D);
    133a:	8d e0       	ldi	r24, 0x0D	; 13
    133c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
		i2c_stop();
    1340:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <i2c_stop>
		
		i2c_start_wait(I2C_WRITE_ADDR);
    1344:	86 ea       	ldi	r24, 0xA6	; 166
    1346:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <i2c_start_wait>
		i2c_write(POWER_CTL);
    134a:	8d e2       	ldi	r24, 0x2D	; 45
    134c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
		i2c_write(0x08);
    1350:	88 e0       	ldi	r24, 0x08	; 8
    1352:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
		i2c_stop();
    1356:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <i2c_stop>
		
		i2c_start_wait(I2C_WRITE_ADDR);
    135a:	86 ea       	ldi	r24, 0xA6	; 166
    135c:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <i2c_start_wait>
		i2c_write(DATA_FORMAT);
    1360:	81 e3       	ldi	r24, 0x31	; 49
    1362:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
		i2c_write(0x07);
    1366:	87 e0       	ldi	r24, 0x07	; 7
    1368:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
		i2c_stop();
    136c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <i2c_stop>
		
		i2c_start_wait(I2C_WRITE_ADDR);
    1370:	86 ea       	ldi	r24, 0xA6	; 166
    1372:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <i2c_start_wait>
		i2c_write(FIFO_CTL);
    1376:	88 e3       	ldi	r24, 0x38	; 56
    1378:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
		i2c_write(0x00);
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
		i2c_stop();
    1382:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <i2c_stop>
    1386:	08 95       	ret

00001388 <ADXL343_update_axis_readings>:
 * -----------------------------
 * Reads the x, y, and z axis data from the ADXL343 registers and stores the results
 * in the adxl_axis_readings array. The specific read procedure depends on the
 * communication protocol defined in the header file (SPI or I2C).
 */
void ADXL343_update_axis_readings() {
    1388:	df 92       	push	r13
    138a:	ef 92       	push	r14
    138c:	ff 92       	push	r15
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
		adxl_axis_readings[2] = z;
	
		return;
	#else
		/* I2C Comms */
		i2c_start_wait(0xA6);
    1396:	86 ea       	ldi	r24, 0xA6	; 166
    1398:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <i2c_start_wait>
		i2c_write(X_DATA_0);
    139c:	82 e3       	ldi	r24, 0x32	; 50
    139e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
		i2c_rep_start(0xA7);
    13a2:	87 ea       	ldi	r24, 0xA7	; 167
    13a4:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <i2c_rep_start>
		x0 = i2c_readAck();
    13a8:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <i2c_readAck>
    13ac:	d8 2e       	mov	r13, r24
		x1 = i2c_readAck();
    13ae:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <i2c_readAck>
    13b2:	08 2f       	mov	r16, r24
		y0 = i2c_readAck();
    13b4:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <i2c_readAck>
    13b8:	e8 2e       	mov	r14, r24
		y1 = i2c_readAck();
    13ba:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <i2c_readAck>
    13be:	f8 2e       	mov	r15, r24
		z0 = i2c_readAck();
    13c0:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <i2c_readAck>
    13c4:	d8 2f       	mov	r29, r24
		z1 = i2c_readNak();
    13c6:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <i2c_readNak>
    13ca:	c8 2f       	mov	r28, r24
		i2c_stop();
    13cc:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <i2c_stop>
		
		// Combine all accelerometer data into integers
 		x = (x1 << 8) | x0;
    13d0:	10 e0       	ldi	r17, 0x00	; 0
    13d2:	10 2f       	mov	r17, r16
    13d4:	00 27       	eor	r16, r16
    13d6:	0d 29       	or	r16, r13
    13d8:	01 2e       	mov	r0, r17
    13da:	00 0c       	add	r0, r0
    13dc:	22 0b       	sbc	r18, r18
    13de:	33 0b       	sbc	r19, r19
 		y = (y1 << 8) | y0;
    13e0:	4f 2d       	mov	r20, r15
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	54 2f       	mov	r21, r20
    13e6:	44 27       	eor	r20, r20
    13e8:	4e 29       	or	r20, r14
    13ea:	05 2e       	mov	r0, r21
    13ec:	00 0c       	add	r0, r0
    13ee:	66 0b       	sbc	r22, r22
    13f0:	77 0b       	sbc	r23, r23
 		z = (z1 << 8) | z0;
    13f2:	8c 2f       	mov	r24, r28
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	98 2f       	mov	r25, r24
    13f8:	88 27       	eor	r24, r24
    13fa:	8d 2b       	or	r24, r29
    13fc:	09 2e       	mov	r0, r25
    13fe:	00 0c       	add	r0, r0
    1400:	aa 0b       	sbc	r26, r26
    1402:	bb 0b       	sbc	r27, r27
		
		adxl_axis_readings[0] = x;
    1404:	e1 ed       	ldi	r30, 0xD1	; 209
    1406:	f1 e0       	ldi	r31, 0x01	; 1
    1408:	00 83       	st	Z, r16
    140a:	11 83       	std	Z+1, r17	; 0x01
    140c:	22 83       	std	Z+2, r18	; 0x02
    140e:	33 83       	std	Z+3, r19	; 0x03
 		adxl_axis_readings[1] = y;
    1410:	44 83       	std	Z+4, r20	; 0x04
    1412:	55 83       	std	Z+5, r21	; 0x05
    1414:	66 83       	std	Z+6, r22	; 0x06
    1416:	77 83       	std	Z+7, r23	; 0x07
 		adxl_axis_readings[2] = z;
    1418:	80 87       	std	Z+8, r24	; 0x08
    141a:	91 87       	std	Z+9, r25	; 0x09
    141c:	a2 87       	std	Z+10, r26	; 0x0a
    141e:	b3 87       	std	Z+11, r27	; 0x0b
		return;
	#endif /* ADXL343_SPI_MODE */
}
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	df 90       	pop	r13
    142e:	08 95       	ret

00001430 <ADXL343_get_x_axis_int>:
* ADXL343_get_x_axis_int()
* --------------------------
* Return last recorded value for the x axis as an integer.
*/
int32_t ADXL343_get_x_axis_int() {
	return adxl_axis_readings[0];
    1430:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <adxl_axis_readings>
    1434:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <adxl_axis_readings+0x1>
    1438:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <adxl_axis_readings+0x2>
    143c:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <adxl_axis_readings+0x3>
}
    1440:	08 95       	ret

00001442 <ADXL343_get_y_axis_int>:
* ADXL343_get_y_axis_int()
* --------------------------
* Return last recorded value for the y axis as an integer.
*/
int32_t ADXL343_get_y_axis_int() {
	return adxl_axis_readings[1];
    1442:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <adxl_axis_readings+0x4>
    1446:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <adxl_axis_readings+0x5>
    144a:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <adxl_axis_readings+0x6>
    144e:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <adxl_axis_readings+0x7>
}
    1452:	08 95       	ret

00001454 <ADXL343_get_z_axis_int>:
* ADXL343_get_z_axis_int()
* --------------------------
* Return last recorded value for the z axis as an integer.
*/
int32_t ADXL343_get_z_axis_int() {
	return adxl_axis_readings[2];
    1454:	60 91 d9 01 	lds	r22, 0x01D9	; 0x8001d9 <adxl_axis_readings+0x8>
    1458:	70 91 da 01 	lds	r23, 0x01DA	; 0x8001da <adxl_axis_readings+0x9>
    145c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <adxl_axis_readings+0xa>
    1460:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <adxl_axis_readings+0xb>
}
    1464:	08 95       	ret

00001466 <A328p_set_SS>:
 * A328p_set_SS()
 * ---------------
 * Set the SS pin high or low.
*/
void A328p_set_SS(uint8_t value) {
	switch(value) {
    1466:	88 23       	and	r24, r24
    1468:	19 f0       	breq	.+6      	; 0x1470 <A328p_set_SS+0xa>
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	29 f0       	breq	.+10     	; 0x1478 <A328p_set_SS+0x12>
    146e:	08 95       	ret
		case 0:
			PORTB &= ~(1 << SS);
    1470:	85 b1       	in	r24, 0x05	; 5
    1472:	8b 7f       	andi	r24, 0xFB	; 251
    1474:	85 b9       	out	0x05, r24	; 5
			return;
    1476:	08 95       	ret
		case 1:
			PORTB |= (1 << SS);
    1478:	85 b1       	in	r24, 0x05	; 5
    147a:	84 60       	ori	r24, 0x04	; 4
    147c:	85 b9       	out	0x05, r24	; 5
    147e:	08 95       	ret

00001480 <A328p_SPI_init>:
 * A328p_SPI_init()
 * -----------------
 * Initialise the Atmega328p for SPI communication.
*/
void A328p_SPI_init() {
	DDRB |= (1 << SS) | (1 << MOSI) | (1 << SCK);
    1480:	84 b1       	in	r24, 0x04	; 4
    1482:	8c 62       	ori	r24, 0x2C	; 44
    1484:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << MISO);
    1486:	84 b1       	in	r24, 0x04	; 4
    1488:	8f 7e       	andi	r24, 0xEF	; 239
    148a:	84 b9       	out	0x04, r24	; 4
	
	SS_LOW;
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	0e 94 33 0a 	call	0x1466	; 0x1466 <A328p_set_SS>
	
	// Set as master, SPI enable, CPOL=1, CPHA=1, clock rate F_CPU/16 -> clock rate = 500kHz
	SPCR |= (1<<MSTR) | (1<<SPE) | (1<<CPOL) | (1<<CPHA) | (1<<SPR0);
    1492:	8c b5       	in	r24, 0x2c	; 44
    1494:	8d 65       	ori	r24, 0x5D	; 93
    1496:	8c bd       	out	0x2c, r24	; 44
	
	SPSR &= ~(1<<SPI2X); // double clock rate set to ZERO. (ie do not double clockrate).
    1498:	8d b5       	in	r24, 0x2d	; 45
    149a:	8e 7f       	andi	r24, 0xFE	; 254
    149c:	8d bd       	out	0x2d, r24	; 45
	
	DDRB |= (1<<MOSI) | (1<<SCK); // set MOSI, SCK as outputs
    149e:	84 b1       	in	r24, 0x04	; 4
    14a0:	88 62       	ori	r24, 0x28	; 40
    14a2:	84 b9       	out	0x04, r24	; 4
	
	DDRB &= ~(1<<MISO); // MISO input
    14a4:	84 b1       	in	r24, 0x04	; 4
    14a6:	8f 7e       	andi	r24, 0xEF	; 239
    14a8:	84 b9       	out	0x04, r24	; 4
	
	SS_HIGH;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	0e 94 33 0a 	call	0x1466	; 0x1466 <A328p_set_SS>
    14b0:	08 95       	ret

000014b2 <USART_init>:
*/
void USART_transmit_string(char* string) {
	for (int i = 0; i < strlen(string); i++) {
		USART_transmit_character(string[i]);
	}
}
    14b2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    14b6:	87 e6       	ldi	r24, 0x67	; 103
    14b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    14bc:	86 e0       	ldi	r24, 0x06	; 6
    14be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    14c2:	88 e9       	ldi	r24, 0x98	; 152
    14c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    14c8:	80 e8       	ldi	r24, 0x80	; 128
    14ca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    14ce:	08 95       	ret

000014d0 <__vector_18>:

ISR(USART_RX_vect) {
    14d0:	1f 92       	push	r1
    14d2:	0f 92       	push	r0
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	0f 92       	push	r0
    14d8:	11 24       	eor	r1, r1
	
    14da:	0f 90       	pop	r0
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	0f 90       	pop	r0
    14e0:	1f 90       	pop	r1
    14e2:	18 95       	reti

000014e4 <hardware_init>:
* hardware_init()
* ---------------
* Initialise any hardware for the project here.
*/
void hardware_init() {
	sei();						/* Enable global interrupts */
    14e4:	78 94       	sei
	i2c_init();					/* i2c for MCU */
    14e6:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <i2c_init>
	A328p_SPI_init();			/* SPI for MCU */
    14ea:	0e 94 40 0a 	call	0x1480	; 0x1480 <A328p_SPI_init>
	OLED_init();				/* SH1106 OLED display */
    14ee:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <OLED_init>
	timer0_init();				/* Initialise timer0 to generate interrupts every 1ms */
    14f2:	0e 94 a3 13 	call	0x2746	; 0x2746 <timer0_init>
	RTC_init();					/* Clock IC */
    14f6:	0e 94 0b 0c 	call	0x1816	; 0x1816 <RTC_init>
	USART_init();				/* USART for MCU */
    14fa:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <USART_init>
	ADXL343_setup_axis_read();	/* Using i2c mode */
    14fe:	0e 94 89 09 	call	0x1312	; 0x1312 <ADXL343_setup_axis_read>
    1502:	08 95       	ret

00001504 <current_orientation>:
* 3 = rotated clockwise 90 degrees from normal. Mode D
*
* The return from this function can be used in the 'screenOrientation' input for the
* OLED_draw_string() funciton.
*/
uint8_t current_orientation(uint8_t lastOrientation) {
    1504:	4f 92       	push	r4
    1506:	5f 92       	push	r5
    1508:	6f 92       	push	r6
    150a:	7f 92       	push	r7
    150c:	8f 92       	push	r8
    150e:	9f 92       	push	r9
    1510:	af 92       	push	r10
    1512:	bf 92       	push	r11
    1514:	cf 92       	push	r12
    1516:	df 92       	push	r13
    1518:	ef 92       	push	r14
    151a:	ff 92       	push	r15
    151c:	cf 93       	push	r28
    151e:	c8 2f       	mov	r28, r24
	/* Get the current readings from the accelerometer */
	int32_t x = ADXL343_get_x_axis_int();
    1520:	0e 94 18 0a 	call	0x1430	; 0x1430 <ADXL343_get_x_axis_int>
    1524:	2b 01       	movw	r4, r22
    1526:	3c 01       	movw	r6, r24
	int32_t y = ADXL343_get_y_axis_int();
    1528:	0e 94 21 0a 	call	0x1442	; 0x1442 <ADXL343_get_y_axis_int>
    152c:	4b 01       	movw	r8, r22
    152e:	5c 01       	movw	r10, r24
	int32_t z = ADXL343_get_z_axis_int();
    1530:	0e 94 2a 0a 	call	0x1454	; 0x1454 <ADXL343_get_z_axis_int>
	
	uint8_t currentOrientation = lastOrientation;
	
	/* If the clock is not upright then stay in the previous orientation */
	if ((z > (AXIS_INACTIVE * 1.5)) || (z < -(AXIS_INACTIVE *1.5))) {
    1534:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__floatsisf>
    1538:	6b 01       	movw	r12, r22
    153a:	7c 01       	movw	r14, r24
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e8       	ldi	r19, 0x80	; 128
    1540:	4b e3       	ldi	r20, 0x3B	; 59
    1542:	54 e4       	ldi	r21, 0x44	; 68
    1544:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__gesf2>
    1548:	18 16       	cp	r1, r24
    154a:	84 f1       	brlt	.+96     	; 0x15ac <current_orientation+0xa8>
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e8       	ldi	r19, 0x80	; 128
    1550:	4b e3       	ldi	r20, 0x3B	; 59
    1552:	54 ec       	ldi	r21, 0xC4	; 196
    1554:	c7 01       	movw	r24, r14
    1556:	b6 01       	movw	r22, r12
    1558:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__cmpsf2>
    155c:	88 23       	and	r24, r24
    155e:	34 f1       	brlt	.+76     	; 0x15ac <current_orientation+0xa8>
		/* Do nothing */
	
	/* Mode A */
	} else if ((y < -AXIS_ACTIVE) && ((x > -AXIS_INACTIVE) || (x < AXIS_INACTIVE))) {
    1560:	88 e8       	ldi	r24, 0x88	; 136
    1562:	88 16       	cp	r8, r24
    1564:	8a ef       	ldi	r24, 0xFA	; 250
    1566:	98 06       	cpc	r9, r24
    1568:	8f ef       	ldi	r24, 0xFF	; 255
    156a:	a8 06       	cpc	r10, r24
    156c:	b8 06       	cpc	r11, r24
    156e:	bc f0       	brlt	.+46     	; 0x159e <current_orientation+0x9a>
		currentOrientation = MODE_A;
	
	/* Mode B */
	} else if ((x < -AXIS_ACTIVE) && ((y > -AXIS_INACTIVE) || (y < AXIS_INACTIVE))) {
    1570:	88 e8       	ldi	r24, 0x88	; 136
    1572:	48 16       	cp	r4, r24
    1574:	8a ef       	ldi	r24, 0xFA	; 250
    1576:	58 06       	cpc	r5, r24
    1578:	8f ef       	ldi	r24, 0xFF	; 255
    157a:	68 06       	cpc	r6, r24
    157c:	78 06       	cpc	r7, r24
    157e:	8c f0       	brlt	.+34     	; 0x15a2 <current_orientation+0x9e>
		currentOrientation = MODE_B;
	
	/* Mode C */
	} else if ((y > AXIS_ACTIVE) && ((x > -AXIS_INACTIVE) || (x < AXIS_INACTIVE))) {
    1580:	89 e7       	ldi	r24, 0x79	; 121
    1582:	88 16       	cp	r8, r24
    1584:	85 e0       	ldi	r24, 0x05	; 5
    1586:	98 06       	cpc	r9, r24
    1588:	a1 04       	cpc	r10, r1
    158a:	b1 04       	cpc	r11, r1
    158c:	64 f4       	brge	.+24     	; 0x15a6 <current_orientation+0xa2>
		currentOrientation = MODE_C;
	
	/* Mode D */
	} else if ((x > AXIS_ACTIVE) && ((y > -AXIS_INACTIVE) || (y < AXIS_INACTIVE))) {
    158e:	89 e7       	ldi	r24, 0x79	; 121
    1590:	48 16       	cp	r4, r24
    1592:	85 e0       	ldi	r24, 0x05	; 5
    1594:	58 06       	cpc	r5, r24
    1596:	61 04       	cpc	r6, r1
    1598:	71 04       	cpc	r7, r1
    159a:	3c f4       	brge	.+14     	; 0x15aa <current_orientation+0xa6>
    159c:	07 c0       	rjmp	.+14     	; 0x15ac <current_orientation+0xa8>
	if ((z > (AXIS_INACTIVE * 1.5)) || (z < -(AXIS_INACTIVE *1.5))) {
		/* Do nothing */
	
	/* Mode A */
	} else if ((y < -AXIS_ACTIVE) && ((x > -AXIS_INACTIVE) || (x < AXIS_INACTIVE))) {
		currentOrientation = MODE_A;
    159e:	c0 e0       	ldi	r28, 0x00	; 0
    15a0:	05 c0       	rjmp	.+10     	; 0x15ac <current_orientation+0xa8>
	
	/* Mode B */
	} else if ((x < -AXIS_ACTIVE) && ((y > -AXIS_INACTIVE) || (y < AXIS_INACTIVE))) {
		currentOrientation = MODE_B;
    15a2:	c1 e0       	ldi	r28, 0x01	; 1
    15a4:	03 c0       	rjmp	.+6      	; 0x15ac <current_orientation+0xa8>
	
	/* Mode C */
	} else if ((y > AXIS_ACTIVE) && ((x > -AXIS_INACTIVE) || (x < AXIS_INACTIVE))) {
		currentOrientation = MODE_C;
    15a6:	c2 e0       	ldi	r28, 0x02	; 2
    15a8:	01 c0       	rjmp	.+2      	; 0x15ac <current_orientation+0xa8>
	
	/* Mode D */
	} else if ((x > AXIS_ACTIVE) && ((y > -AXIS_INACTIVE) || (y < AXIS_INACTIVE))) {
		currentOrientation = MODE_D;
    15aa:	c3 e0       	ldi	r28, 0x03	; 3
	}
	
	return currentOrientation;
}
    15ac:	8c 2f       	mov	r24, r28
    15ae:	cf 91       	pop	r28
    15b0:	ff 90       	pop	r15
    15b2:	ef 90       	pop	r14
    15b4:	df 90       	pop	r13
    15b6:	cf 90       	pop	r12
    15b8:	bf 90       	pop	r11
    15ba:	af 90       	pop	r10
    15bc:	9f 90       	pop	r9
    15be:	8f 90       	pop	r8
    15c0:	7f 90       	pop	r7
    15c2:	6f 90       	pop	r6
    15c4:	5f 90       	pop	r5
    15c6:	4f 90       	pop	r4
    15c8:	08 95       	ret

000015ca <display_date_and_time>:
* Display current data and time on the display when the orientation is
* in MODE_A.
*
* DATE NOT CURRENTLY SUPPORTED!!! Just using a fake date string for now.
*/
void display_date_and_time(uint8_t currentOrientation) {
    15ca:	ef 92       	push	r14
    15cc:	0f 93       	push	r16
	
	if (currentOrientation == MODE_A) {
    15ce:	81 11       	cpse	r24, r1
    15d0:	50 c0       	rjmp	.+160    	; 0x1672 <display_date_and_time+0xa8>
		OLED_clear_buffer();
    15d2:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <OLED_clear_buffer>
		
		OLED_draw_string(RTC_get_time_hour_string(), 9, 4, 25, 3, MODE_A); /* Hours */
    15d6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <RTC_get_time_hour_string>
    15da:	e1 2c       	mov	r14, r1
    15dc:	03 e0       	ldi	r16, 0x03	; 3
    15de:	29 e1       	ldi	r18, 0x19	; 25
    15e0:	44 e0       	ldi	r20, 0x04	; 4
    15e2:	69 e0       	ldi	r22, 0x09	; 9
    15e4:	0e 94 21 13 	call	0x2642	; 0x2642 <OLED_draw_string>
		OLED_draw_string(RTC_get_time_min_string(), 50, 4, 25, 3, MODE_A); /* Minutes */
    15e8:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <RTC_get_time_min_string>
    15ec:	29 e1       	ldi	r18, 0x19	; 25
    15ee:	44 e0       	ldi	r20, 0x04	; 4
    15f0:	62 e3       	ldi	r22, 0x32	; 50
    15f2:	0e 94 21 13 	call	0x2642	; 0x2642 <OLED_draw_string>
		OLED_draw_string(RTC_get_time_sec_string(), 91, 4, 25, 3, MODE_A); /* Seconds */
    15f6:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <RTC_get_time_sec_string>
    15fa:	29 e1       	ldi	r18, 0x19	; 25
    15fc:	44 e0       	ldi	r20, 0x04	; 4
    15fe:	6b e5       	ldi	r22, 0x5B	; 91
    1600:	0e 94 21 13 	call	0x2642	; 0x2642 <OLED_draw_string>
		
		/* Colons separating the hour, min, sec values */
		OLED_draw_string(":", 41, 9, 16, 1, MODE_A);
    1604:	01 e0       	ldi	r16, 0x01	; 1
    1606:	20 e1       	ldi	r18, 0x10	; 16
    1608:	49 e0       	ldi	r20, 0x09	; 9
    160a:	69 e2       	ldi	r22, 0x29	; 41
    160c:	82 e1       	ldi	r24, 0x12	; 18
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	0e 94 21 13 	call	0x2642	; 0x2642 <OLED_draw_string>
		OLED_draw_string(":", 82, 9, 16, 1, MODE_A);
    1614:	20 e1       	ldi	r18, 0x10	; 16
    1616:	49 e0       	ldi	r20, 0x09	; 9
    1618:	62 e5       	ldi	r22, 0x52	; 82
    161a:	82 e1       	ldi	r24, 0x12	; 18
    161c:	91 e0       	ldi	r25, 0x01	; 1
    161e:	0e 94 21 13 	call	0x2642	; 0x2642 <OLED_draw_string>
		
		OLED_draw_string("27-07-24", 5, 41, 16, 2, 0); /* Fake placeholder date */
    1622:	02 e0       	ldi	r16, 0x02	; 2
    1624:	20 e1       	ldi	r18, 0x10	; 16
    1626:	49 e2       	ldi	r20, 0x29	; 41
    1628:	65 e0       	ldi	r22, 0x05	; 5
    162a:	84 e1       	ldi	r24, 0x14	; 20
    162c:	91 e0       	ldi	r25, 0x01	; 1
    162e:	0e 94 21 13 	call	0x2642	; 0x2642 <OLED_draw_string>
		
		/* Boxes surrounding the time and date */
		OLED_draw_horizontal_line(0, 127, 33);
    1632:	41 e2       	ldi	r20, 0x21	; 33
    1634:	6f e7       	ldi	r22, 0x7F	; 127
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	0e 94 42 13 	call	0x2684	; 0x2684 <OLED_draw_horizontal_line>
		OLED_draw_horizontal_line(0, 127, 36);
    163c:	44 e2       	ldi	r20, 0x24	; 36
    163e:	6f e7       	ldi	r22, 0x7F	; 127
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	0e 94 42 13 	call	0x2684	; 0x2684 <OLED_draw_horizontal_line>
		OLED_draw_vertical_line(36, 63, 102);
    1646:	46 e6       	ldi	r20, 0x66	; 102
    1648:	6f e3       	ldi	r22, 0x3F	; 63
    164a:	84 e2       	ldi	r24, 0x24	; 36
    164c:	0e 94 54 13 	call	0x26a8	; 0x26a8 <OLED_draw_vertical_line>
		OLED_draw_rectangle(0, 0, 127, 63, 0);
    1650:	00 e0       	ldi	r16, 0x00	; 0
    1652:	2f e3       	ldi	r18, 0x3F	; 63
    1654:	4f e7       	ldi	r20, 0x7F	; 127
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	0e 94 66 13 	call	0x26cc	; 0x26cc <OLED_draw_rectangle>
	
		OLED_draw_xbm(106, 37, alarmBellIconUnarmed, 18, 24, MODE_A);
    165e:	08 e1       	ldi	r16, 0x18	; 24
    1660:	22 e1       	ldi	r18, 0x12	; 18
    1662:	48 e6       	ldi	r20, 0x68	; 104
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	65 e2       	ldi	r22, 0x25	; 37
    1668:	8a e6       	ldi	r24, 0x6A	; 106
    166a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <OLED_draw_xbm>
		
		OLED_display_buffer();
    166e:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <OLED_display_buffer>
	}
}
    1672:	0f 91       	pop	r16
    1674:	ef 90       	pop	r14
    1676:	08 95       	ret

00001678 <update_ADXL_data>:
* update_ADXL_data()
* ----------------
* Update the axis data in the adxl343 and update the variable holding the current orientation of the display
* based on the new axis data.
*/
void update_ADXL_data(uint32_t currentTime, uint32_t* previousTimes, uint8_t* lastOrientation, uint8_t* currentOrientation) {
    1678:	8f 92       	push	r8
    167a:	9f 92       	push	r9
    167c:	af 92       	push	r10
    167e:	bf 92       	push	r11
    1680:	cf 92       	push	r12
    1682:	df 92       	push	r13
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
	if ((currentTime - previousTimes[ADXL_PREV_TIME_INDEX]) > ADXL_AXIS_READ_INTERVAL) {
    1690:	fa 01       	movw	r30, r20
    1692:	80 80       	ld	r8, Z
    1694:	91 80       	ldd	r9, Z+1	; 0x01
    1696:	a2 80       	ldd	r10, Z+2	; 0x02
    1698:	b3 80       	ldd	r11, Z+3	; 0x03
    169a:	6b 01       	movw	r12, r22
    169c:	7c 01       	movw	r14, r24
    169e:	c8 18       	sub	r12, r8
    16a0:	d9 08       	sbc	r13, r9
    16a2:	ea 08       	sbc	r14, r10
    16a4:	fb 08       	sbc	r15, r11
    16a6:	e9 ec       	ldi	r30, 0xC9	; 201
    16a8:	ce 16       	cp	r12, r30
    16aa:	d1 04       	cpc	r13, r1
    16ac:	e1 04       	cpc	r14, r1
    16ae:	f1 04       	cpc	r15, r1
    16b0:	90 f0       	brcs	.+36     	; 0x16d6 <update_ADXL_data+0x5e>
    16b2:	79 01       	movw	r14, r18
    16b4:	ea 01       	movw	r28, r20
    16b6:	4b 01       	movw	r8, r22
    16b8:	5c 01       	movw	r10, r24
		ADXL343_update_axis_readings();
    16ba:	0e 94 c4 09 	call	0x1388	; 0x1388 <ADXL343_update_axis_readings>
		
		*lastOrientation = *currentOrientation;
    16be:	f8 01       	movw	r30, r16
    16c0:	80 81       	ld	r24, Z
    16c2:	f7 01       	movw	r30, r14
    16c4:	80 83       	st	Z, r24
		*currentOrientation = current_orientation(*lastOrientation); /* Update the orientation of the display */
    16c6:	0e 94 82 0a 	call	0x1504	; 0x1504 <current_orientation>
    16ca:	f8 01       	movw	r30, r16
    16cc:	80 83       	st	Z, r24

		previousTimes[ADXL_PREV_TIME_INDEX] = currentTime; /* Update previous time for ADXL to reset delay */
    16ce:	88 82       	st	Y, r8
    16d0:	99 82       	std	Y+1, r9	; 0x01
    16d2:	aa 82       	std	Y+2, r10	; 0x02
    16d4:	bb 82       	std	Y+3, r11	; 0x03
	}
}
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	bf 90       	pop	r11
    16e8:	af 90       	pop	r10
    16ea:	9f 90       	pop	r9
    16ec:	8f 90       	pop	r8
    16ee:	08 95       	ret

000016f0 <initialise_current_and_previous_times>:
/*
* initialise_current_and_previous_times()
* ---------------------------------------
* Initialise the current time and previous times. Just to reduce the amount of code in main function.
*/
void initialise_current_and_previous_times(uint32_t* currentTime, uint32_t* previousTimes) {
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	ec 01       	movw	r28, r24
    16fa:	8b 01       	movw	r16, r22
	*currentTime = timer0_get_current_time();
    16fc:	0e 94 bb 13 	call	0x2776	; 0x2776 <timer0_get_current_time>
    1700:	68 83       	st	Y, r22
    1702:	79 83       	std	Y+1, r23	; 0x01
    1704:	8a 83       	std	Y+2, r24	; 0x02
    1706:	9b 83       	std	Y+3, r25	; 0x03
	for (uint8_t i = 0; i < NUM_PREVIOUS_TIMES; i++) {
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	11 c0       	rjmp	.+34     	; 0x172e <initialise_current_and_previous_times+0x3e>
		previousTimes[i] = *currentTime;
    170c:	e8 2f       	mov	r30, r24
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	ee 0f       	add	r30, r30
    1712:	ff 1f       	adc	r31, r31
    1714:	ee 0f       	add	r30, r30
    1716:	ff 1f       	adc	r31, r31
    1718:	e0 0f       	add	r30, r16
    171a:	f1 1f       	adc	r31, r17
    171c:	48 81       	ld	r20, Y
    171e:	59 81       	ldd	r21, Y+1	; 0x01
    1720:	6a 81       	ldd	r22, Y+2	; 0x02
    1722:	7b 81       	ldd	r23, Y+3	; 0x03
    1724:	40 83       	st	Z, r20
    1726:	51 83       	std	Z+1, r21	; 0x01
    1728:	62 83       	std	Z+2, r22	; 0x02
    172a:	73 83       	std	Z+3, r23	; 0x03
* ---------------------------------------
* Initialise the current time and previous times. Just to reduce the amount of code in main function.
*/
void initialise_current_and_previous_times(uint32_t* currentTime, uint32_t* previousTimes) {
	*currentTime = timer0_get_current_time();
	for (uint8_t i = 0; i < NUM_PREVIOUS_TIMES; i++) {
    172c:	8f 5f       	subi	r24, 0xFF	; 255
    172e:	82 30       	cpi	r24, 0x02	; 2
    1730:	68 f3       	brcs	.-38     	; 0x170c <initialise_current_and_previous_times+0x1c>
		previousTimes[i] = *currentTime;
	}
}
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	1f 91       	pop	r17
    1738:	0f 91       	pop	r16
    173a:	08 95       	ret

0000173c <main>:
uint8_t current_orientation(uint8_t lastOrientation);
void display_date_and_time(uint8_t currentOrientation);
void update_ADXL_data(uint32_t currentTime, uint32_t* previousTimes, uint8_t* lastOrientation, uint8_t* currentOrientation);
void initialise_current_and_previous_times(uint32_t* currentTime, uint32_t* previousTimes);

int main(void) {
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	2e 97       	sbiw	r28, 0x0e	; 14
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
	hardware_init();
    1750:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <hardware_init>
	
	RTC_set_time(0x21, 0x29, 0x10); // user needs to be able to change this
    1754:	40 e1       	ldi	r20, 0x10	; 16
    1756:	69 e2       	ldi	r22, 0x29	; 41
    1758:	81 e2       	ldi	r24, 0x21	; 33
    175a:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <RTC_set_time>
	
	/* Current and previous times used for delays */
	uint32_t currentTime;
	uint32_t previousTimes[NUM_PREVIOUS_TIMES];
	initialise_current_and_previous_times(&currentTime, previousTimes);
    175e:	be 01       	movw	r22, r28
    1760:	6b 5f       	subi	r22, 0xFB	; 251
    1762:	7f 4f       	sbci	r23, 0xFF	; 255
    1764:	ce 01       	movw	r24, r28
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <initialise_current_and_previous_times>
	
	/* Initial orientation of the display */
	uint8_t currentOrientation = MODE_A;
    176c:	1d 86       	std	Y+13, r1	; 0x0d
	uint8_t lastOrientation = currentOrientation;
    176e:	1e 86       	std	Y+14, r1	; 0x0e

    while (1) {
		/* Update current system time */
		currentTime = timer0_get_current_time(); 
    1770:	0e 94 bb 13 	call	0x2776	; 0x2776 <timer0_get_current_time>
    1774:	69 83       	std	Y+1, r22	; 0x01
    1776:	7a 83       	std	Y+2, r23	; 0x02
    1778:	8b 83       	std	Y+3, r24	; 0x03
    177a:	9c 83       	std	Y+4, r25	; 0x04
		
		/* Update the time from the RTC */
		RTC_update_current_time();
    177c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <RTC_update_current_time>
		
		/* Update axis readings from ADXL343 and orientation value */
		update_ADXL_data(currentTime, previousTimes, &lastOrientation, &currentOrientation);
    1780:	69 81       	ldd	r22, Y+1	; 0x01
    1782:	7a 81       	ldd	r23, Y+2	; 0x02
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	8e 01       	movw	r16, r28
    178a:	03 5f       	subi	r16, 0xF3	; 243
    178c:	1f 4f       	sbci	r17, 0xFF	; 255
    178e:	9e 01       	movw	r18, r28
    1790:	22 5f       	subi	r18, 0xF2	; 242
    1792:	3f 4f       	sbci	r19, 0xFF	; 255
    1794:	ae 01       	movw	r20, r28
    1796:	4b 5f       	subi	r20, 0xFB	; 251
    1798:	5f 4f       	sbci	r21, 0xFF	; 255
    179a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <update_ADXL_data>
		
		//AM2320_update_temperature_humidity();
		
		/* Different functionality based on orientation */
		switch(currentOrientation) {
    179e:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	49 f0       	breq	.+18     	; 0x17b6 <main+0x7a>
    17a4:	28 f0       	brcs	.+10     	; 0x17b0 <main+0x74>
    17a6:	82 30       	cpi	r24, 0x02	; 2
    17a8:	a9 f0       	breq	.+42     	; 0x17d4 <main+0x98>
    17aa:	83 30       	cpi	r24, 0x03	; 3
    17ac:	19 f1       	breq	.+70     	; 0x17f4 <main+0xb8>
    17ae:	e0 cf       	rjmp	.-64     	; 0x1770 <main+0x34>
			case MODE_A:
				display_date_and_time(currentOrientation);
    17b0:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <display_date_and_time>
				break;
    17b4:	dd cf       	rjmp	.-70     	; 0x1770 <main+0x34>
			case MODE_B:
				OLED_clear_buffer();
    17b6:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <OLED_clear_buffer>
				OLED_draw_string("Mode B", 0, 0, 8, 2, MODE_B);
    17ba:	ee 24       	eor	r14, r14
    17bc:	e3 94       	inc	r14
    17be:	02 e0       	ldi	r16, 0x02	; 2
    17c0:	28 e0       	ldi	r18, 0x08	; 8
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	8d e1       	ldi	r24, 0x1D	; 29
    17c8:	91 e0       	ldi	r25, 0x01	; 1
    17ca:	0e 94 21 13 	call	0x2642	; 0x2642 <OLED_draw_string>
				OLED_display_buffer();
    17ce:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <OLED_display_buffer>
				break;
    17d2:	ce cf       	rjmp	.-100    	; 0x1770 <main+0x34>
			case MODE_C:
				OLED_clear_buffer();
    17d4:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <OLED_clear_buffer>
				OLED_draw_string("Mode C", 0, 0, 8, 2, MODE_C);
    17d8:	68 94       	set
    17da:	ee 24       	eor	r14, r14
    17dc:	e1 f8       	bld	r14, 1
    17de:	02 e0       	ldi	r16, 0x02	; 2
    17e0:	28 e0       	ldi	r18, 0x08	; 8
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	84 e2       	ldi	r24, 0x24	; 36
    17e8:	91 e0       	ldi	r25, 0x01	; 1
    17ea:	0e 94 21 13 	call	0x2642	; 0x2642 <OLED_draw_string>
				OLED_display_buffer();
    17ee:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <OLED_display_buffer>
				break;
    17f2:	be cf       	rjmp	.-132    	; 0x1770 <main+0x34>
			case MODE_D:
				OLED_clear_buffer();
    17f4:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <OLED_clear_buffer>
				OLED_draw_string("Mode D", 0, 0, 8, 2, MODE_D);
    17f8:	0f 2e       	mov	r0, r31
    17fa:	f3 e0       	ldi	r31, 0x03	; 3
    17fc:	ef 2e       	mov	r14, r31
    17fe:	f0 2d       	mov	r31, r0
    1800:	02 e0       	ldi	r16, 0x02	; 2
    1802:	28 e0       	ldi	r18, 0x08	; 8
    1804:	40 e0       	ldi	r20, 0x00	; 0
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	8b e2       	ldi	r24, 0x2B	; 43
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	0e 94 21 13 	call	0x2642	; 0x2642 <OLED_draw_string>
				OLED_display_buffer();
    1810:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <OLED_display_buffer>
				break;
    1814:	ad cf       	rjmp	.-166    	; 0x1770 <main+0x34>

00001816 <RTC_init>:
* ----------------------------
* Return last recorded value of the ones digit of the second.
*/
uint8_t RTC_get_time_sec_ones_int() {
	return RTC_TIME[1];
}
    1816:	8e ed       	ldi	r24, 0xDE	; 222
    1818:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <i2c_start>
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
    1822:	80 e8       	ldi	r24, 0x80	; 128
    1824:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
    1828:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <i2c_stop>
    182c:	08 95       	ret

0000182e <RTC_read_multiple_register>:
    182e:	ef 92       	push	r14
    1830:	ff 92       	push	r15
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	c8 2f       	mov	r28, r24
    183c:	8b 01       	movw	r16, r22
    183e:	d4 2f       	mov	r29, r20
    1840:	8e ed       	ldi	r24, 0xDE	; 222
    1842:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <i2c_start>
    1846:	8c 2f       	mov	r24, r28
    1848:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
    184c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <i2c_stop>
    1850:	8f ed       	ldi	r24, 0xDF	; 223
    1852:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <i2c_start>
    1856:	c0 e0       	ldi	r28, 0x00	; 0
    1858:	08 c0       	rjmp	.+16     	; 0x186a <RTC_read_multiple_register+0x3c>
    185a:	78 01       	movw	r14, r16
    185c:	ec 0e       	add	r14, r28
    185e:	f1 1c       	adc	r15, r1
    1860:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <i2c_readAck>
    1864:	f7 01       	movw	r30, r14
    1866:	80 83       	st	Z, r24
    1868:	cf 5f       	subi	r28, 0xFF	; 255
    186a:	2c 2f       	mov	r18, r28
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	8d 2f       	mov	r24, r29
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	28 17       	cp	r18, r24
    1876:	39 07       	cpc	r19, r25
    1878:	84 f3       	brlt	.-32     	; 0x185a <RTC_read_multiple_register+0x2c>
    187a:	8d 2f       	mov	r24, r29
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	e8 01       	movw	r28, r16
    1882:	c8 0f       	add	r28, r24
    1884:	d9 1f       	adc	r29, r25
    1886:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <i2c_readNak>
    188a:	88 83       	st	Y, r24
    188c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <i2c_stop>
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	ff 90       	pop	r15
    189a:	ef 90       	pop	r14
    189c:	08 95       	ret

0000189e <RTC_write_register>:
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	d8 2f       	mov	r29, r24
    18a4:	c6 2f       	mov	r28, r22
    18a6:	8e ed       	ldi	r24, 0xDE	; 222
    18a8:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <i2c_start>
    18ac:	8d 2f       	mov	r24, r29
    18ae:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
    18b2:	8c 2f       	mov	r24, r28
    18b4:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
    18b8:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <i2c_stop>
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	08 95       	ret

000018c2 <RTC_set_time>:
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	c8 2f       	mov	r28, r24
    18c8:	d6 2f       	mov	r29, r22
    18ca:	64 2f       	mov	r22, r20
    18cc:	60 68       	ori	r22, 0x80	; 128
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	0e 94 4f 0c 	call	0x189e	; 0x189e <RTC_write_register>
    18d4:	6d 2f       	mov	r22, r29
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	0e 94 4f 0c 	call	0x189e	; 0x189e <RTC_write_register>
    18dc:	6c 2f       	mov	r22, r28
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	0e 94 4f 0c 	call	0x189e	; 0x189e <RTC_write_register>
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	08 95       	ret

000018ea <RTC_update_current_time>:
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <RTC_update_current_time+0x6>
    18f0:	1f 92       	push	r1
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	19 82       	std	Y+1, r1	; 0x01
    18f8:	1a 82       	std	Y+2, r1	; 0x02
    18fa:	1b 82       	std	Y+3, r1	; 0x03
    18fc:	43 e0       	ldi	r20, 0x03	; 3
    18fe:	be 01       	movw	r22, r28
    1900:	6f 5f       	subi	r22, 0xFF	; 255
    1902:	7f 4f       	sbci	r23, 0xFF	; 255
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	0e 94 17 0c 	call	0x182e	; 0x182e <RTC_read_multiple_register>
    190a:	29 81       	ldd	r18, Y+1	; 0x01
    190c:	82 2f       	mov	r24, r18
    190e:	80 77       	andi	r24, 0x70	; 112
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	95 95       	asr	r25
    1914:	87 95       	ror	r24
    1916:	95 95       	asr	r25
    1918:	87 95       	ror	r24
    191a:	95 95       	asr	r25
    191c:	87 95       	ror	r24
    191e:	95 95       	asr	r25
    1920:	87 95       	ror	r24
    1922:	ed ed       	ldi	r30, 0xDD	; 221
    1924:	f5 e0       	ldi	r31, 0x05	; 5
    1926:	80 83       	st	Z, r24
    1928:	2f 70       	andi	r18, 0x0F	; 15
    192a:	21 83       	std	Z+1, r18	; 0x01
    192c:	2a 81       	ldd	r18, Y+2	; 0x02
    192e:	82 2f       	mov	r24, r18
    1930:	80 77       	andi	r24, 0x70	; 112
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	95 95       	asr	r25
    1936:	87 95       	ror	r24
    1938:	95 95       	asr	r25
    193a:	87 95       	ror	r24
    193c:	95 95       	asr	r25
    193e:	87 95       	ror	r24
    1940:	95 95       	asr	r25
    1942:	87 95       	ror	r24
    1944:	82 83       	std	Z+2, r24	; 0x02
    1946:	2f 70       	andi	r18, 0x0F	; 15
    1948:	23 83       	std	Z+3, r18	; 0x03
    194a:	2b 81       	ldd	r18, Y+3	; 0x03
    194c:	82 2f       	mov	r24, r18
    194e:	80 73       	andi	r24, 0x30	; 48
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	95 95       	asr	r25
    1954:	87 95       	ror	r24
    1956:	95 95       	asr	r25
    1958:	87 95       	ror	r24
    195a:	95 95       	asr	r25
    195c:	87 95       	ror	r24
    195e:	95 95       	asr	r25
    1960:	87 95       	ror	r24
    1962:	84 83       	std	Z+4, r24	; 0x04
    1964:	2f 70       	andi	r18, 0x0F	; 15
    1966:	25 83       	std	Z+5, r18	; 0x05
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	08 95       	ret

00001974 <RTC_get_time_hour_string>:
/*
* RTC_get_time_hour_string()
* --------------------------
* Return last recorded value of the hour as a string.
*/
char* RTC_get_time_hour_string() {
    1974:	cf 92       	push	r12
    1976:	df 92       	push	r13
    1978:	ff 92       	push	r15
    197a:	0f 93       	push	r16
    197c:	1f 93       	push	r17
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	00 d0       	rcall	.+0      	; 0x1984 <RTC_get_time_hour_string+0x10>
    1984:	00 d0       	rcall	.+0      	; 0x1986 <RTC_get_time_hour_string+0x12>
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
	char tempTens[2];
	char tempOnes[2];
	static char tempHour[3];
	
	snprintf(tempTens, sizeof(tempTens), "%d", RTC_TIME[4]);
    198a:	0f 2e       	mov	r0, r31
    198c:	fd ed       	ldi	r31, 0xDD	; 221
    198e:	cf 2e       	mov	r12, r31
    1990:	f5 e0       	ldi	r31, 0x05	; 5
    1992:	df 2e       	mov	r13, r31
    1994:	f0 2d       	mov	r31, r0
    1996:	f6 01       	movw	r30, r12
    1998:	84 81       	ldd	r24, Z+4	; 0x04
    199a:	1f 92       	push	r1
    199c:	8f 93       	push	r24
    199e:	02 e3       	ldi	r16, 0x32	; 50
    19a0:	11 e0       	ldi	r17, 0x01	; 1
    19a2:	1f 93       	push	r17
    19a4:	0f 93       	push	r16
    19a6:	1f 92       	push	r1
    19a8:	68 94       	set
    19aa:	ff 24       	eor	r15, r15
    19ac:	f1 f8       	bld	r15, 1
    19ae:	ff 92       	push	r15
    19b0:	ce 01       	movw	r24, r28
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	9f 93       	push	r25
    19b6:	8f 93       	push	r24
    19b8:	0e 94 97 14 	call	0x292e	; 0x292e <snprintf>
	snprintf(tempOnes, sizeof(tempOnes), "%d", RTC_TIME[5]);
    19bc:	f6 01       	movw	r30, r12
    19be:	85 81       	ldd	r24, Z+5	; 0x05
    19c0:	1f 92       	push	r1
    19c2:	8f 93       	push	r24
    19c4:	1f 93       	push	r17
    19c6:	0f 93       	push	r16
    19c8:	1f 92       	push	r1
    19ca:	ff 92       	push	r15
    19cc:	ce 01       	movw	r24, r28
    19ce:	03 96       	adiw	r24, 0x03	; 3
    19d0:	9f 93       	push	r25
    19d2:	8f 93       	push	r24
    19d4:	0e 94 97 14 	call	0x292e	; 0x292e <snprintf>
	
	tempHour[0] = tempTens[0];
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	ea ec       	ldi	r30, 0xCA	; 202
    19dc:	f1 e0       	ldi	r31, 0x01	; 1
    19de:	80 83       	st	Z, r24
	tempHour[1] = tempOnes[0];
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	81 83       	std	Z+1, r24	; 0x01
	tempHour[2] = '\0';
    19e4:	12 82       	std	Z+2, r1	; 0x02
	
	return tempHour;
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
}
    19f0:	cf 01       	movw	r24, r30
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	1f 91       	pop	r17
    1a00:	0f 91       	pop	r16
    1a02:	ff 90       	pop	r15
    1a04:	df 90       	pop	r13
    1a06:	cf 90       	pop	r12
    1a08:	08 95       	ret

00001a0a <RTC_get_time_min_string>:
/*
* RTC_get_time_min_string()
* --------------------------
* Return last recorded value of the minute as a string.
*/
char* RTC_get_time_min_string() {
    1a0a:	cf 92       	push	r12
    1a0c:	df 92       	push	r13
    1a0e:	ff 92       	push	r15
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <RTC_get_time_min_string+0x10>
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <RTC_get_time_min_string+0x12>
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	char tempTens[2];
	char tempOnes[2];
	static char tempMin[3];
	
	snprintf(tempTens, sizeof(tempTens), "%d", RTC_TIME[2]);
    1a20:	0f 2e       	mov	r0, r31
    1a22:	fd ed       	ldi	r31, 0xDD	; 221
    1a24:	cf 2e       	mov	r12, r31
    1a26:	f5 e0       	ldi	r31, 0x05	; 5
    1a28:	df 2e       	mov	r13, r31
    1a2a:	f0 2d       	mov	r31, r0
    1a2c:	f6 01       	movw	r30, r12
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	1f 92       	push	r1
    1a32:	8f 93       	push	r24
    1a34:	02 e3       	ldi	r16, 0x32	; 50
    1a36:	11 e0       	ldi	r17, 0x01	; 1
    1a38:	1f 93       	push	r17
    1a3a:	0f 93       	push	r16
    1a3c:	1f 92       	push	r1
    1a3e:	68 94       	set
    1a40:	ff 24       	eor	r15, r15
    1a42:	f1 f8       	bld	r15, 1
    1a44:	ff 92       	push	r15
    1a46:	ce 01       	movw	r24, r28
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	9f 93       	push	r25
    1a4c:	8f 93       	push	r24
    1a4e:	0e 94 97 14 	call	0x292e	; 0x292e <snprintf>
	snprintf(tempOnes, sizeof(tempOnes), "%d", RTC_TIME[3]);
    1a52:	f6 01       	movw	r30, r12
    1a54:	83 81       	ldd	r24, Z+3	; 0x03
    1a56:	1f 92       	push	r1
    1a58:	8f 93       	push	r24
    1a5a:	1f 93       	push	r17
    1a5c:	0f 93       	push	r16
    1a5e:	1f 92       	push	r1
    1a60:	ff 92       	push	r15
    1a62:	ce 01       	movw	r24, r28
    1a64:	03 96       	adiw	r24, 0x03	; 3
    1a66:	9f 93       	push	r25
    1a68:	8f 93       	push	r24
    1a6a:	0e 94 97 14 	call	0x292e	; 0x292e <snprintf>
	
	tempMin[0] = tempTens[0];
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	e7 ec       	ldi	r30, 0xC7	; 199
    1a72:	f1 e0       	ldi	r31, 0x01	; 1
    1a74:	80 83       	st	Z, r24
	tempMin[1] = tempOnes[0];
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	81 83       	std	Z+1, r24	; 0x01
	tempMin[2] = '\0';
    1a7a:	12 82       	std	Z+2, r1	; 0x02
	
	return tempMin;
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
}
    1a86:	cf 01       	movw	r24, r30
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	ff 90       	pop	r15
    1a9a:	df 90       	pop	r13
    1a9c:	cf 90       	pop	r12
    1a9e:	08 95       	ret

00001aa0 <RTC_get_time_sec_string>:
/*
* RTC_get_time_sec_string()
* --------------------------
* Return last recorded value of the second as a string.
*/
char* RTC_get_time_sec_string() {
    1aa0:	cf 92       	push	r12
    1aa2:	df 92       	push	r13
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <RTC_get_time_sec_string+0x10>
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <RTC_get_time_sec_string+0x12>
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
	char tempTens[2];
	char tempOnes[2];
	static char tempSec[3];
	
	snprintf(tempTens, sizeof(tempTens), "%d", RTC_TIME[0]);
    1ab6:	0f 2e       	mov	r0, r31
    1ab8:	fd ed       	ldi	r31, 0xDD	; 221
    1aba:	cf 2e       	mov	r12, r31
    1abc:	f5 e0       	ldi	r31, 0x05	; 5
    1abe:	df 2e       	mov	r13, r31
    1ac0:	f0 2d       	mov	r31, r0
    1ac2:	f6 01       	movw	r30, r12
    1ac4:	80 81       	ld	r24, Z
    1ac6:	1f 92       	push	r1
    1ac8:	8f 93       	push	r24
    1aca:	02 e3       	ldi	r16, 0x32	; 50
    1acc:	11 e0       	ldi	r17, 0x01	; 1
    1ace:	1f 93       	push	r17
    1ad0:	0f 93       	push	r16
    1ad2:	1f 92       	push	r1
    1ad4:	68 94       	set
    1ad6:	ff 24       	eor	r15, r15
    1ad8:	f1 f8       	bld	r15, 1
    1ada:	ff 92       	push	r15
    1adc:	ce 01       	movw	r24, r28
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	9f 93       	push	r25
    1ae2:	8f 93       	push	r24
    1ae4:	0e 94 97 14 	call	0x292e	; 0x292e <snprintf>
	snprintf(tempOnes, sizeof(tempOnes), "%d", RTC_TIME[1]);
    1ae8:	f6 01       	movw	r30, r12
    1aea:	81 81       	ldd	r24, Z+1	; 0x01
    1aec:	1f 92       	push	r1
    1aee:	8f 93       	push	r24
    1af0:	1f 93       	push	r17
    1af2:	0f 93       	push	r16
    1af4:	1f 92       	push	r1
    1af6:	ff 92       	push	r15
    1af8:	ce 01       	movw	r24, r28
    1afa:	03 96       	adiw	r24, 0x03	; 3
    1afc:	9f 93       	push	r25
    1afe:	8f 93       	push	r24
    1b00:	0e 94 97 14 	call	0x292e	; 0x292e <snprintf>
	
	tempSec[0] = tempTens[0];
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	e4 ec       	ldi	r30, 0xC4	; 196
    1b08:	f1 e0       	ldi	r31, 0x01	; 1
    1b0a:	80 83       	st	Z, r24
	tempSec[1] = tempOnes[0];
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	81 83       	std	Z+1, r24	; 0x01
	tempSec[2] = '\0';
    1b10:	12 82       	std	Z+2, r1	; 0x02
	
	return tempSec;
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
}
    1b1c:	cf 01       	movw	r24, r30
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	ff 90       	pop	r15
    1b30:	df 90       	pop	r13
    1b32:	cf 90       	pop	r12
    1b34:	08 95       	ret

00001b36 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    1b36:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1b3a:	8c e0       	ldi	r24, 0x0C	; 12
    1b3c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    1b40:	08 95       	ret

00001b42 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
    1b42:	0f 93       	push	r16
    1b44:	1f 93       	push	r17
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1b46:	94 ea       	ldi	r25, 0xA4	; 164
    1b48:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    1b4c:	4f ef       	ldi	r20, 0xFF	; 255
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <i2c_start+0x18>
    1b56:	b9 01       	movw	r22, r18
    1b58:	a8 01       	movw	r20, r16
    1b5a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1b5e:	99 23       	and	r25, r25
    1b60:	64 f0       	brlt	.+24     	; 0x1b7a <i2c_start+0x38>
    1b62:	8a 01       	movw	r16, r20
    1b64:	9b 01       	movw	r18, r22
    1b66:	01 50       	subi	r16, 0x01	; 1
    1b68:	11 09       	sbc	r17, r1
    1b6a:	21 09       	sbc	r18, r1
    1b6c:	31 09       	sbc	r19, r1
    1b6e:	45 2b       	or	r20, r21
    1b70:	46 2b       	or	r20, r22
    1b72:	47 2b       	or	r20, r23
    1b74:	81 f7       	brne	.-32     	; 0x1b56 <i2c_start+0x14>
    1b76:	b9 01       	movw	r22, r18
    1b78:	a8 01       	movw	r20, r16
	if(i2c_timer == 0)
    1b7a:	45 2b       	or	r20, r21
    1b7c:	46 2b       	or	r20, r22
    1b7e:	47 2b       	or	r20, r23
    1b80:	81 f1       	breq	.+96     	; 0x1be2 <i2c_start+0xa0>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1b82:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1b86:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1b88:	98 30       	cpi	r25, 0x08	; 8
    1b8a:	11 f0       	breq	.+4      	; 0x1b90 <i2c_start+0x4e>
    1b8c:	90 31       	cpi	r25, 0x10	; 16
    1b8e:	59 f5       	brne	.+86     	; 0x1be6 <i2c_start+0xa4>

	// send device address
	TWDR = address;
    1b90:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1b94:	84 e8       	ldi	r24, 0x84	; 132
    1b96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    1b9a:	8f ef       	ldi	r24, 0xFF	; 255
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <i2c_start+0x66>
    1ba4:	db 01       	movw	r26, r22
    1ba6:	ca 01       	movw	r24, r20
    1ba8:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1bac:	22 23       	and	r18, r18
    1bae:	64 f0       	brlt	.+24     	; 0x1bc8 <i2c_start+0x86>
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	bd 01       	movw	r22, r26
    1bb4:	41 50       	subi	r20, 0x01	; 1
    1bb6:	51 09       	sbc	r21, r1
    1bb8:	61 09       	sbc	r22, r1
    1bba:	71 09       	sbc	r23, r1
    1bbc:	89 2b       	or	r24, r25
    1bbe:	8a 2b       	or	r24, r26
    1bc0:	8b 2b       	or	r24, r27
    1bc2:	81 f7       	brne	.-32     	; 0x1ba4 <i2c_start+0x62>
    1bc4:	db 01       	movw	r26, r22
    1bc6:	ca 01       	movw	r24, r20
	if(i2c_timer == 0)
    1bc8:	89 2b       	or	r24, r25
    1bca:	8a 2b       	or	r24, r26
    1bcc:	8b 2b       	or	r24, r27
    1bce:	69 f0       	breq	.+26     	; 0x1bea <i2c_start+0xa8>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1bd0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1bd4:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1bd6:	88 31       	cpi	r24, 0x18	; 24
    1bd8:	51 f0       	breq	.+20     	; 0x1bee <i2c_start+0xac>
    1bda:	80 34       	cpi	r24, 0x40	; 64
    1bdc:	51 f4       	brne	.+20     	; 0x1bf2 <i2c_start+0xb0>

	return 0;
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	09 c0       	rjmp	.+18     	; 0x1bf4 <i2c_start+0xb2>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	07 c0       	rjmp	.+14     	; 0x1bf4 <i2c_start+0xb2>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	05 c0       	rjmp	.+10     	; 0x1bf4 <i2c_start+0xb2>

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	03 c0       	rjmp	.+6      	; 0x1bf4 <i2c_start+0xb2>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	01 c0       	rjmp	.+2      	; 0x1bf4 <i2c_start+0xb2>
	if(i2c_timer == 0)
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    1bf4:	1f 91       	pop	r17
    1bf6:	0f 91       	pop	r16
    1bf8:	08 95       	ret

00001bfa <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
    1bfa:	0f 93       	push	r16
    1bfc:	1f 93       	push	r17
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1bfe:	94 ea       	ldi	r25, 0xA4	; 164
    1c00:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    1c04:	4f ef       	ldi	r20, 0xFF	; 255
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <i2c_start_wait+0x18>
    1c0e:	b9 01       	movw	r22, r18
    1c10:	a8 01       	movw	r20, r16
    1c12:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1c16:	99 23       	and	r25, r25
    1c18:	54 f0       	brlt	.+20     	; 0x1c2e <i2c_start_wait+0x34>
    1c1a:	8a 01       	movw	r16, r20
    1c1c:	9b 01       	movw	r18, r22
    1c1e:	01 50       	subi	r16, 0x01	; 1
    1c20:	11 09       	sbc	r17, r1
    1c22:	21 09       	sbc	r18, r1
    1c24:	31 09       	sbc	r19, r1
    1c26:	45 2b       	or	r20, r21
    1c28:	46 2b       	or	r20, r22
    1c2a:	47 2b       	or	r20, r23
    1c2c:	81 f7       	brne	.-32     	; 0x1c0e <i2c_start_wait+0x14>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1c2e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1c32:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1c34:	98 30       	cpi	r25, 0x08	; 8
    1c36:	11 f0       	breq	.+4      	; 0x1c3c <i2c_start_wait+0x42>
    1c38:	90 31       	cpi	r25, 0x10	; 16
    1c3a:	09 f7       	brne	.-62     	; 0x1bfe <i2c_start_wait+0x4>
    
    	// send device address
    	TWDR = address;
    1c3c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1c40:	94 e8       	ldi	r25, 0x84	; 132
    1c42:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    1c46:	4f ef       	ldi	r20, 0xFF	; 255
    1c48:	50 e0       	ldi	r21, 0x00	; 0
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <i2c_start_wait+0x5a>
    1c50:	b9 01       	movw	r22, r18
    1c52:	a8 01       	movw	r20, r16
    1c54:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1c58:	99 23       	and	r25, r25
    1c5a:	54 f0       	brlt	.+20     	; 0x1c70 <i2c_start_wait+0x76>
    1c5c:	8a 01       	movw	r16, r20
    1c5e:	9b 01       	movw	r18, r22
    1c60:	01 50       	subi	r16, 0x01	; 1
    1c62:	11 09       	sbc	r17, r1
    1c64:	21 09       	sbc	r18, r1
    1c66:	31 09       	sbc	r19, r1
    1c68:	45 2b       	or	r20, r21
    1c6a:	46 2b       	or	r20, r22
    1c6c:	47 2b       	or	r20, r23
    1c6e:	81 f7       	brne	.-32     	; 0x1c50 <i2c_start_wait+0x56>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1c70:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1c74:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1c76:	90 32       	cpi	r25, 0x20	; 32
    1c78:	11 f0       	breq	.+4      	; 0x1c7e <i2c_start_wait+0x84>
    1c7a:	98 35       	cpi	r25, 0x58	; 88
    1c7c:	c9 f4       	brne	.+50     	; 0x1cb0 <i2c_start_wait+0xb6>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1c7e:	94 e9       	ldi	r25, 0x94	; 148
    1c80:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
    1c84:	4f ef       	ldi	r20, 0xFF	; 255
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <i2c_start_wait+0x98>
    1c8e:	b9 01       	movw	r22, r18
    1c90:	a8 01       	movw	r20, r16
    1c92:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1c96:	94 ff       	sbrs	r25, 4
    1c98:	b2 cf       	rjmp	.-156    	; 0x1bfe <i2c_start_wait+0x4>
    1c9a:	8a 01       	movw	r16, r20
    1c9c:	9b 01       	movw	r18, r22
    1c9e:	01 50       	subi	r16, 0x01	; 1
    1ca0:	11 09       	sbc	r17, r1
    1ca2:	21 09       	sbc	r18, r1
    1ca4:	31 09       	sbc	r19, r1
    1ca6:	45 2b       	or	r20, r21
    1ca8:	46 2b       	or	r20, r22
    1caa:	47 2b       	or	r20, r23
    1cac:	81 f7       	brne	.-32     	; 0x1c8e <i2c_start_wait+0x94>
    1cae:	a7 cf       	rjmp	.-178    	; 0x1bfe <i2c_start_wait+0x4>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	08 95       	ret

00001cb6 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    1cb6:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <i2c_start>

}/* i2c_rep_start */
    1cba:	08 95       	ret

00001cbc <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1cbc:	84 e9       	ldi	r24, 0x94	; 148
    1cbe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
    1cc2:	8f ef       	ldi	r24, 0xFF	; 255
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a0 e0       	ldi	r26, 0x00	; 0
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <i2c_stop+0x14>
    1ccc:	db 01       	movw	r26, r22
    1cce:	ca 01       	movw	r24, r20
    1cd0:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1cd4:	24 ff       	sbrs	r18, 4
    1cd6:	0a c0       	rjmp	.+20     	; 0x1cec <i2c_stop+0x30>
    1cd8:	ac 01       	movw	r20, r24
    1cda:	bd 01       	movw	r22, r26
    1cdc:	41 50       	subi	r20, 0x01	; 1
    1cde:	51 09       	sbc	r21, r1
    1ce0:	61 09       	sbc	r22, r1
    1ce2:	71 09       	sbc	r23, r1
    1ce4:	89 2b       	or	r24, r25
    1ce6:	8a 2b       	or	r24, r26
    1ce8:	8b 2b       	or	r24, r27
    1cea:	81 f7       	brne	.-32     	; 0x1ccc <i2c_stop+0x10>
    1cec:	08 95       	ret

00001cee <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1cee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1cf2:	84 e8       	ldi	r24, 0x84	; 132
    1cf4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    1cf8:	8f ef       	ldi	r24, 0xFF	; 255
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	a0 e0       	ldi	r26, 0x00	; 0
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <i2c_write+0x18>
    1d02:	db 01       	movw	r26, r22
    1d04:	ca 01       	movw	r24, r20
    1d06:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1d0a:	22 23       	and	r18, r18
    1d0c:	64 f0       	brlt	.+24     	; 0x1d26 <i2c_write+0x38>
    1d0e:	ac 01       	movw	r20, r24
    1d10:	bd 01       	movw	r22, r26
    1d12:	41 50       	subi	r20, 0x01	; 1
    1d14:	51 09       	sbc	r21, r1
    1d16:	61 09       	sbc	r22, r1
    1d18:	71 09       	sbc	r23, r1
    1d1a:	89 2b       	or	r24, r25
    1d1c:	8a 2b       	or	r24, r26
    1d1e:	8b 2b       	or	r24, r27
    1d20:	81 f7       	brne	.-32     	; 0x1d02 <i2c_write+0x14>
    1d22:	db 01       	movw	r26, r22
    1d24:	ca 01       	movw	r24, r20
	if(i2c_timer == 0)
    1d26:	89 2b       	or	r24, r25
    1d28:	8a 2b       	or	r24, r26
    1d2a:	8b 2b       	or	r24, r27
    1d2c:	39 f0       	breq	.+14     	; 0x1d3c <i2c_write+0x4e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1d2e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1d32:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    1d34:	88 32       	cpi	r24, 0x28	; 40
    1d36:	21 f0       	breq	.+8      	; 0x1d40 <i2c_write+0x52>
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;
    1d40:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
    1d42:	08 95       	ret

00001d44 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1d44:	84 ec       	ldi	r24, 0xC4	; 196
    1d46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_timer = I2C_TIMER_DELAY;
    1d4a:	8f ef       	ldi	r24, 0xFF	; 255
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	a0 e0       	ldi	r26, 0x00	; 0
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <i2c_readAck+0x14>
    1d54:	db 01       	movw	r26, r22
    1d56:	ca 01       	movw	r24, r20
    1d58:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1d5c:	22 23       	and	r18, r18
    1d5e:	64 f0       	brlt	.+24     	; 0x1d78 <i2c_readAck+0x34>
    1d60:	ac 01       	movw	r20, r24
    1d62:	bd 01       	movw	r22, r26
    1d64:	41 50       	subi	r20, 0x01	; 1
    1d66:	51 09       	sbc	r21, r1
    1d68:	61 09       	sbc	r22, r1
    1d6a:	71 09       	sbc	r23, r1
    1d6c:	89 2b       	or	r24, r25
    1d6e:	8a 2b       	or	r24, r26
    1d70:	8b 2b       	or	r24, r27
    1d72:	81 f7       	brne	.-32     	; 0x1d54 <i2c_readAck+0x10>
    1d74:	db 01       	movw	r26, r22
    1d76:	ca 01       	movw	r24, r20
	if(i2c_timer == 0)
    1d78:	89 2b       	or	r24, r25
    1d7a:	8a 2b       	or	r24, r26
    1d7c:	8b 2b       	or	r24, r27
    1d7e:	19 f0       	breq	.+6      	; 0x1d86 <i2c_readAck+0x42>
		return 0;

    return TWDR;
    1d80:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1d84:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    1d86:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    1d88:	08 95       	ret

00001d8a <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    1d8a:	84 e8       	ldi	r24, 0x84	; 132
    1d8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_timer = I2C_TIMER_DELAY;
    1d90:	8f ef       	ldi	r24, 0xFF	; 255
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	a0 e0       	ldi	r26, 0x00	; 0
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <i2c_readNak+0x14>
    1d9a:	db 01       	movw	r26, r22
    1d9c:	ca 01       	movw	r24, r20
    1d9e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1da2:	22 23       	and	r18, r18
    1da4:	64 f0       	brlt	.+24     	; 0x1dbe <i2c_readNak+0x34>
    1da6:	ac 01       	movw	r20, r24
    1da8:	bd 01       	movw	r22, r26
    1daa:	41 50       	subi	r20, 0x01	; 1
    1dac:	51 09       	sbc	r21, r1
    1dae:	61 09       	sbc	r22, r1
    1db0:	71 09       	sbc	r23, r1
    1db2:	89 2b       	or	r24, r25
    1db4:	8a 2b       	or	r24, r26
    1db6:	8b 2b       	or	r24, r27
    1db8:	81 f7       	brne	.-32     	; 0x1d9a <i2c_readNak+0x10>
    1dba:	db 01       	movw	r26, r22
    1dbc:	ca 01       	movw	r24, r20
	if(i2c_timer == 0)
    1dbe:	89 2b       	or	r24, r25
    1dc0:	8a 2b       	or	r24, r26
    1dc2:	8b 2b       	or	r24, r27
    1dc4:	19 f0       	breq	.+6      	; 0x1dcc <i2c_readNak+0x42>
		return 0;
	
    return TWDR;
    1dc6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1dca:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    1dce:	08 95       	ret

00001dd0 <OLED_single_command>:
					}
				}
			}
		}
	}
}
    1dd0:	cf 93       	push	r28
    1dd2:	c8 2f       	mov	r28, r24
    1dd4:	88 e7       	ldi	r24, 0x78	; 120
    1dd6:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <i2c_start_wait>
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
    1de0:	8c 2f       	mov	r24, r28
    1de2:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
    1de6:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <i2c_stop>
    1dea:	cf 91       	pop	r28
    1dec:	08 95       	ret

00001dee <OLED_multiple_command>:
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	8c 01       	movw	r16, r24
    1df8:	d6 2f       	mov	r29, r22
    1dfa:	88 e7       	ldi	r24, 0x78	; 120
    1dfc:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <i2c_start_wait>
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
    1e06:	c0 e0       	ldi	r28, 0x00	; 0
    1e08:	07 c0       	rjmp	.+14     	; 0x1e18 <OLED_multiple_command+0x2a>
    1e0a:	f8 01       	movw	r30, r16
    1e0c:	ec 0f       	add	r30, r28
    1e0e:	f1 1d       	adc	r31, r1
    1e10:	80 81       	ld	r24, Z
    1e12:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
    1e16:	cf 5f       	subi	r28, 0xFF	; 255
    1e18:	cd 17       	cp	r28, r29
    1e1a:	b8 f3       	brcs	.-18     	; 0x1e0a <OLED_multiple_command+0x1c>
    1e1c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <i2c_stop>
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	08 95       	ret

00001e2a <OLED_init>:
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	62 97       	sbiw	r28, 0x12	; 18
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	82 e1       	ldi	r24, 0x12	; 18
    1e40:	e0 e0       	ldi	r30, 0x00	; 0
    1e42:	f1 e0       	ldi	r31, 0x01	; 1
    1e44:	de 01       	movw	r26, r28
    1e46:	11 96       	adiw	r26, 0x01	; 1
    1e48:	01 90       	ld	r0, Z+
    1e4a:	0d 92       	st	X+, r0
    1e4c:	8a 95       	dec	r24
    1e4e:	e1 f7       	brne	.-8      	; 0x1e48 <OLED_init+0x1e>
    1e50:	62 e1       	ldi	r22, 0x12	; 18
    1e52:	ce 01       	movw	r24, r28
    1e54:	01 96       	adiw	r24, 0x01	; 1
    1e56:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <OLED_multiple_command>
    1e5a:	62 96       	adiw	r28, 0x12	; 18
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	08 95       	ret

00001e6c <OLED_clear_buffer>:
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	0f c0       	rjmp	.+30     	; 0x1e8e <OLED_clear_buffer+0x22>
    1e70:	20 e8       	ldi	r18, 0x80	; 128
    1e72:	92 9f       	mul	r25, r18
    1e74:	f0 01       	movw	r30, r0
    1e76:	11 24       	eor	r1, r1
    1e78:	e3 52       	subi	r30, 0x23	; 35
    1e7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e7c:	e8 0f       	add	r30, r24
    1e7e:	f1 1d       	adc	r31, r1
    1e80:	10 82       	st	Z, r1
    1e82:	8f 5f       	subi	r24, 0xFF	; 255
    1e84:	01 c0       	rjmp	.+2      	; 0x1e88 <OLED_clear_buffer+0x1c>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	88 23       	and	r24, r24
    1e8a:	94 f7       	brge	.-28     	; 0x1e70 <OLED_clear_buffer+0x4>
    1e8c:	9f 5f       	subi	r25, 0xFF	; 255
    1e8e:	98 30       	cpi	r25, 0x08	; 8
    1e90:	d0 f3       	brcs	.-12     	; 0x1e86 <OLED_clear_buffer+0x1a>
    1e92:	08 95       	ret

00001e94 <OLED_send_byte>:
    1e94:	cf 93       	push	r28
    1e96:	c8 2f       	mov	r28, r24
    1e98:	88 e7       	ldi	r24, 0x78	; 120
    1e9a:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <i2c_start_wait>
    1e9e:	80 e4       	ldi	r24, 0x40	; 64
    1ea0:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
    1ea4:	8c 2f       	mov	r24, r28
    1ea6:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_write>
    1eaa:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <i2c_stop>
    1eae:	cf 91       	pop	r28
    1eb0:	08 95       	ret

00001eb2 <OLED_display_buffer>:
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	00 e0       	ldi	r16, 0x00	; 0
    1ebc:	23 c0       	rjmp	.+70     	; 0x1f04 <OLED_display_buffer+0x52>
    1ebe:	80 eb       	ldi	r24, 0xB0	; 176
    1ec0:	80 0f       	add	r24, r16
    1ec2:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <OLED_single_command>
    1ec6:	12 e0       	ldi	r17, 0x02	; 2
    1ec8:	17 c0       	rjmp	.+46     	; 0x1ef8 <OLED_display_buffer+0x46>
    1eca:	81 2f       	mov	r24, r17
    1ecc:	8f 70       	andi	r24, 0x0F	; 15
    1ece:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <OLED_single_command>
    1ed2:	81 2f       	mov	r24, r17
    1ed4:	82 95       	swap	r24
    1ed6:	8f 70       	andi	r24, 0x0F	; 15
    1ed8:	80 5f       	subi	r24, 0xF0	; 240
    1eda:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <OLED_single_command>
    1ede:	22 97       	sbiw	r28, 0x02	; 2
    1ee0:	20 e8       	ldi	r18, 0x80	; 128
    1ee2:	02 9f       	mul	r16, r18
    1ee4:	c0 01       	movw	r24, r0
    1ee6:	11 24       	eor	r1, r1
    1ee8:	83 52       	subi	r24, 0x23	; 35
    1eea:	9e 4f       	sbci	r25, 0xFE	; 254
    1eec:	c8 0f       	add	r28, r24
    1eee:	d9 1f       	adc	r29, r25
    1ef0:	88 81       	ld	r24, Y
    1ef2:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <OLED_send_byte>
    1ef6:	1f 5f       	subi	r17, 0xFF	; 255
    1ef8:	c1 2f       	mov	r28, r17
    1efa:	d0 e0       	ldi	r29, 0x00	; 0
    1efc:	c2 38       	cpi	r28, 0x82	; 130
    1efe:	d1 05       	cpc	r29, r1
    1f00:	24 f3       	brlt	.-56     	; 0x1eca <OLED_display_buffer+0x18>
    1f02:	0f 5f       	subi	r16, 0xFF	; 255
    1f04:	08 30       	cpi	r16, 0x08	; 8
    1f06:	d8 f2       	brcs	.-74     	; 0x1ebe <OLED_display_buffer+0xc>
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	08 95       	ret

00001f12 <OLED_set_pixel>:
    1f12:	26 2f       	mov	r18, r22
    1f14:	26 95       	lsr	r18
    1f16:	26 95       	lsr	r18
    1f18:	26 95       	lsr	r18
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	a9 01       	movw	r20, r18
    1f1e:	44 0f       	add	r20, r20
    1f20:	55 1f       	adc	r21, r21
    1f22:	44 0f       	add	r20, r20
    1f24:	55 1f       	adc	r21, r21
    1f26:	44 0f       	add	r20, r20
    1f28:	55 1f       	adc	r21, r21
    1f2a:	70 e0       	ldi	r23, 0x00	; 0
    1f2c:	64 1b       	sub	r22, r20
    1f2e:	75 0b       	sbc	r23, r21
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <OLED_set_pixel+0x28>
    1f36:	44 0f       	add	r20, r20
    1f38:	55 1f       	adc	r21, r21
    1f3a:	6a 95       	dec	r22
    1f3c:	e2 f7       	brpl	.-8      	; 0x1f36 <OLED_set_pixel+0x24>
    1f3e:	f9 01       	movw	r30, r18
    1f40:	f6 95       	lsr	r31
    1f42:	fe 2f       	mov	r31, r30
    1f44:	ee 27       	eor	r30, r30
    1f46:	f7 95       	ror	r31
    1f48:	e7 95       	ror	r30
    1f4a:	e3 52       	subi	r30, 0x23	; 35
    1f4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f4e:	e8 0f       	add	r30, r24
    1f50:	f1 1d       	adc	r31, r1
    1f52:	80 81       	ld	r24, Z
    1f54:	48 2b       	or	r20, r24
    1f56:	40 83       	st	Z, r20
    1f58:	08 95       	ret

00001f5a <bitread>:
    1f5a:	68 30       	cpi	r22, 0x08	; 8
    1f5c:	88 f4       	brcc	.+34     	; 0x1f80 <bitread+0x26>
    1f5e:	21 e0       	ldi	r18, 0x01	; 1
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	06 2e       	mov	r0, r22
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <bitread+0x10>
    1f66:	22 0f       	add	r18, r18
    1f68:	33 1f       	adc	r19, r19
    1f6a:	0a 94       	dec	r0
    1f6c:	e2 f7       	brpl	.-8      	; 0x1f66 <bitread+0xc>
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	82 23       	and	r24, r18
    1f72:	93 23       	and	r25, r19
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <bitread+0x20>
    1f76:	95 95       	asr	r25
    1f78:	87 95       	ror	r24
    1f7a:	6a 95       	dec	r22
    1f7c:	e2 f7       	brpl	.-8      	; 0x1f76 <bitread+0x1c>
    1f7e:	08 95       	ret
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	08 95       	ret

00001f84 <OLED_draw_xbm>:
    1f84:	5f 92       	push	r5
    1f86:	6f 92       	push	r6
    1f88:	7f 92       	push	r7
    1f8a:	8f 92       	push	r8
    1f8c:	9f 92       	push	r9
    1f8e:	af 92       	push	r10
    1f90:	bf 92       	push	r11
    1f92:	cf 92       	push	r12
    1f94:	df 92       	push	r13
    1f96:	ef 92       	push	r14
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	a8 2e       	mov	r10, r24
    1fa4:	96 2e       	mov	r9, r22
    1fa6:	6a 01       	movw	r12, r20
    1fa8:	62 2e       	mov	r6, r18
    1faa:	50 2e       	mov	r5, r16
    1fac:	0e 2d       	mov	r16, r14
    1fae:	88 e0       	ldi	r24, 0x08	; 8
    1fb0:	28 17       	cp	r18, r24
    1fb2:	29 f0       	breq	.+10     	; 0x1fbe <OLED_draw_xbm+0x3a>
    1fb4:	72 2e       	mov	r7, r18
    1fb6:	76 94       	lsr	r7
    1fb8:	76 94       	lsr	r7
    1fba:	76 94       	lsr	r7
    1fbc:	01 c0       	rjmp	.+2      	; 0x1fc0 <OLED_draw_xbm+0x3c>
    1fbe:	71 2c       	mov	r7, r1
    1fc0:	86 2d       	mov	r24, r6
    1fc2:	87 70       	andi	r24, 0x07	; 7
    1fc4:	59 f0       	breq	.+22     	; 0x1fdc <OLED_draw_xbm+0x58>
    1fc6:	86 2d       	mov	r24, r6
    1fc8:	86 95       	lsr	r24
    1fca:	86 95       	lsr	r24
    1fcc:	86 95       	lsr	r24
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	01 96       	adiw	r24, 0x01	; 1
    1fd2:	b8 2e       	mov	r11, r24
    1fd4:	bb 0c       	add	r11, r11
    1fd6:	bb 0c       	add	r11, r11
    1fd8:	bb 0c       	add	r11, r11
    1fda:	01 c0       	rjmp	.+2      	; 0x1fde <OLED_draw_xbm+0x5a>
    1fdc:	b6 2c       	mov	r11, r6
    1fde:	16 2d       	mov	r17, r6
    1fe0:	e1 2c       	mov	r14, r1
    1fe2:	f1 2c       	mov	r15, r1
    1fe4:	81 2c       	mov	r8, r1
    1fe6:	55 c0       	rjmp	.+170    	; 0x2092 <OLED_draw_xbm+0x10e>
    1fe8:	f6 01       	movw	r30, r12
    1fea:	ee 0d       	add	r30, r14
    1fec:	ff 1d       	adc	r31, r15
    1fee:	d4 91       	lpm	r29, Z
    1ff0:	77 20       	and	r7, r7
    1ff2:	61 f0       	breq	.+24     	; 0x200c <OLED_draw_xbm+0x88>
    1ff4:	78 10       	cpse	r7, r8
    1ff6:	09 c0       	rjmp	.+18     	; 0x200a <OLED_draw_xbm+0x86>
    1ff8:	87 2d       	mov	r24, r7
    1ffa:	88 0f       	add	r24, r24
    1ffc:	88 0f       	add	r24, r24
    1ffe:	88 0f       	add	r24, r24
    2000:	16 2d       	mov	r17, r6
    2002:	18 1b       	sub	r17, r24
    2004:	88 24       	eor	r8, r8
    2006:	8a 94       	dec	r8
    2008:	01 c0       	rjmp	.+2      	; 0x200c <OLED_draw_xbm+0x88>
    200a:	18 e0       	ldi	r17, 0x08	; 8
    200c:	83 94       	inc	r8
    200e:	c0 e0       	ldi	r28, 0x00	; 0
    2010:	3b c0       	rjmp	.+118    	; 0x2088 <OLED_draw_xbm+0x104>
    2012:	6c 2f       	mov	r22, r28
    2014:	8d 2f       	mov	r24, r29
    2016:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <bitread>
    201a:	88 23       	and	r24, r24
    201c:	a1 f1       	breq	.+104    	; 0x2086 <OLED_draw_xbm+0x102>
    201e:	f7 01       	movw	r30, r14
    2020:	ee 0f       	add	r30, r30
    2022:	ff 1f       	adc	r31, r31
    2024:	ee 0f       	add	r30, r30
    2026:	ff 1f       	adc	r31, r31
    2028:	ee 0f       	add	r30, r30
    202a:	ff 1f       	adc	r31, r31
    202c:	cf 01       	movw	r24, r30
    202e:	8c 0f       	add	r24, r28
    2030:	91 1d       	adc	r25, r1
    2032:	2b 2d       	mov	r18, r11
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	b9 01       	movw	r22, r18
    2038:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__udivmodhi4>
    203c:	4a 2d       	mov	r20, r10
    203e:	48 0f       	add	r20, r24
    2040:	cf 01       	movw	r24, r30
    2042:	b9 01       	movw	r22, r18
    2044:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__udivmodhi4>
    2048:	69 0d       	add	r22, r9
    204a:	00 23       	and	r16, r16
    204c:	c9 f0       	breq	.+50     	; 0x2080 <OLED_draw_xbm+0xfc>
    204e:	01 30       	cpi	r16, 0x01	; 1
    2050:	29 f4       	brne	.+10     	; 0x205c <OLED_draw_xbm+0xd8>
    2052:	8f e7       	ldi	r24, 0x7F	; 127
    2054:	86 1b       	sub	r24, r22
    2056:	64 2f       	mov	r22, r20
    2058:	48 2f       	mov	r20, r24
    205a:	12 c0       	rjmp	.+36     	; 0x2080 <OLED_draw_xbm+0xfc>
    205c:	02 30       	cpi	r16, 0x02	; 2
    205e:	39 f4       	brne	.+14     	; 0x206e <OLED_draw_xbm+0xea>
    2060:	8f e7       	ldi	r24, 0x7F	; 127
    2062:	84 1b       	sub	r24, r20
    2064:	48 2f       	mov	r20, r24
    2066:	8f e3       	ldi	r24, 0x3F	; 63
    2068:	86 1b       	sub	r24, r22
    206a:	68 2f       	mov	r22, r24
    206c:	09 c0       	rjmp	.+18     	; 0x2080 <OLED_draw_xbm+0xfc>
    206e:	03 30       	cpi	r16, 0x03	; 3
    2070:	29 f4       	brne	.+10     	; 0x207c <OLED_draw_xbm+0xf8>
    2072:	8f e3       	ldi	r24, 0x3F	; 63
    2074:	84 1b       	sub	r24, r20
    2076:	46 2f       	mov	r20, r22
    2078:	68 2f       	mov	r22, r24
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <OLED_draw_xbm+0xfc>
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	84 2f       	mov	r24, r20
    2082:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <OLED_set_pixel>
    2086:	cf 5f       	subi	r28, 0xFF	; 255
    2088:	c1 17       	cp	r28, r17
    208a:	18 f2       	brcs	.-122    	; 0x2012 <OLED_draw_xbm+0x8e>
    208c:	8f ef       	ldi	r24, 0xFF	; 255
    208e:	e8 1a       	sub	r14, r24
    2090:	f8 0a       	sbc	r15, r24
    2092:	b5 9c       	mul	r11, r5
    2094:	c0 01       	movw	r24, r0
    2096:	11 24       	eor	r1, r1
    2098:	99 23       	and	r25, r25
    209a:	0c f4       	brge	.+2      	; 0x209e <OLED_draw_xbm+0x11a>
    209c:	07 96       	adiw	r24, 0x07	; 7
    209e:	95 95       	asr	r25
    20a0:	87 95       	ror	r24
    20a2:	95 95       	asr	r25
    20a4:	87 95       	ror	r24
    20a6:	95 95       	asr	r25
    20a8:	87 95       	ror	r24
    20aa:	e8 16       	cp	r14, r24
    20ac:	f9 06       	cpc	r15, r25
    20ae:	08 f4       	brcc	.+2      	; 0x20b2 <OLED_draw_xbm+0x12e>
    20b0:	9b cf       	rjmp	.-202    	; 0x1fe8 <OLED_draw_xbm+0x64>
    20b2:	df 91       	pop	r29
    20b4:	cf 91       	pop	r28
    20b6:	1f 91       	pop	r17
    20b8:	0f 91       	pop	r16
    20ba:	ff 90       	pop	r15
    20bc:	ef 90       	pop	r14
    20be:	df 90       	pop	r13
    20c0:	cf 90       	pop	r12
    20c2:	bf 90       	pop	r11
    20c4:	af 90       	pop	r10
    20c6:	9f 90       	pop	r9
    20c8:	8f 90       	pop	r8
    20ca:	7f 90       	pop	r7
    20cc:	6f 90       	pop	r6
    20ce:	5f 90       	pop	r5
    20d0:	08 95       	ret

000020d2 <OLED_xbm_font_8_to_buffer>:
    20d2:	3f 92       	push	r3
    20d4:	4f 92       	push	r4
    20d6:	5f 92       	push	r5
    20d8:	6f 92       	push	r6
    20da:	7f 92       	push	r7
    20dc:	8f 92       	push	r8
    20de:	9f 92       	push	r9
    20e0:	af 92       	push	r10
    20e2:	bf 92       	push	r11
    20e4:	cf 92       	push	r12
    20e6:	df 92       	push	r13
    20e8:	ef 92       	push	r14
    20ea:	ff 92       	push	r15
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	5c 01       	movw	r10, r24
    20fa:	d6 2e       	mov	r13, r22
    20fc:	54 2e       	mov	r5, r20
    20fe:	42 2e       	mov	r4, r18
    2100:	30 2e       	mov	r3, r16
    2102:	6d b6       	in	r6, 0x3d	; 61
    2104:	7e b6       	in	r7, 0x3e	; 62
    2106:	fc 01       	movw	r30, r24
    2108:	01 90       	ld	r0, Z+
    210a:	00 20       	and	r0, r0
    210c:	e9 f7       	brne	.-6      	; 0x2108 <OLED_xbm_font_8_to_buffer+0x36>
    210e:	31 97       	sbiw	r30, 0x01	; 1
    2110:	e8 1b       	sub	r30, r24
    2112:	f9 0b       	sbc	r31, r25
    2114:	ce 2e       	mov	r12, r30
    2116:	8d b7       	in	r24, 0x3d	; 61
    2118:	9e b7       	in	r25, 0x3e	; 62
    211a:	8e 1b       	sub	r24, r30
    211c:	91 09       	sbc	r25, r1
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	9e bf       	out	0x3e, r25	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	8d bf       	out	0x3d, r24	; 61
    2128:	01 96       	adiw	r24, 0x01	; 1
    212a:	4c 01       	movw	r8, r24
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	69 c0       	rjmp	.+210    	; 0x2202 <OLED_xbm_font_8_to_buffer+0x130>
    2130:	f5 01       	movw	r30, r10
    2132:	e8 0f       	add	r30, r24
    2134:	f1 1d       	adc	r31, r1
    2136:	90 81       	ld	r25, Z
    2138:	2f eb       	ldi	r18, 0xBF	; 191
    213a:	29 0f       	add	r18, r25
    213c:	2a 31       	cpi	r18, 0x1A	; 26
    213e:	28 f4       	brcc	.+10     	; 0x214a <OLED_xbm_font_8_to_buffer+0x78>
    2140:	f4 01       	movw	r30, r8
    2142:	e8 0f       	add	r30, r24
    2144:	f1 1d       	adc	r31, r1
    2146:	20 83       	st	Z, r18
    2148:	5b c0       	rjmp	.+182    	; 0x2200 <OLED_xbm_font_8_to_buffer+0x12e>
    214a:	2f e9       	ldi	r18, 0x9F	; 159
    214c:	29 0f       	add	r18, r25
    214e:	2a 31       	cpi	r18, 0x1A	; 26
    2150:	30 f4       	brcc	.+12     	; 0x215e <OLED_xbm_font_8_to_buffer+0x8c>
    2152:	97 54       	subi	r25, 0x47	; 71
    2154:	f4 01       	movw	r30, r8
    2156:	e8 0f       	add	r30, r24
    2158:	f1 1d       	adc	r31, r1
    215a:	90 83       	st	Z, r25
    215c:	51 c0       	rjmp	.+162    	; 0x2200 <OLED_xbm_font_8_to_buffer+0x12e>
    215e:	20 ed       	ldi	r18, 0xD0	; 208
    2160:	29 0f       	add	r18, r25
    2162:	2a 30       	cpi	r18, 0x0A	; 10
    2164:	30 f4       	brcc	.+12     	; 0x2172 <OLED_xbm_font_8_to_buffer+0xa0>
    2166:	9c 5f       	subi	r25, 0xFC	; 252
    2168:	f4 01       	movw	r30, r8
    216a:	e8 0f       	add	r30, r24
    216c:	f1 1d       	adc	r31, r1
    216e:	90 83       	st	Z, r25
    2170:	47 c0       	rjmp	.+142    	; 0x2200 <OLED_xbm_font_8_to_buffer+0x12e>
    2172:	2f ed       	ldi	r18, 0xDF	; 223
    2174:	29 0f       	add	r18, r25
    2176:	25 30       	cpi	r18, 0x05	; 5
    2178:	30 f4       	brcc	.+12     	; 0x2186 <OLED_xbm_font_8_to_buffer+0xb4>
    217a:	93 5e       	subi	r25, 0xE3	; 227
    217c:	f4 01       	movw	r30, r8
    217e:	e8 0f       	add	r30, r24
    2180:	f1 1d       	adc	r31, r1
    2182:	90 83       	st	Z, r25
    2184:	3d c0       	rjmp	.+122    	; 0x2200 <OLED_xbm_font_8_to_buffer+0x12e>
    2186:	29 ed       	ldi	r18, 0xD9	; 217
    2188:	29 0f       	add	r18, r25
    218a:	23 30       	cpi	r18, 0x03	; 3
    218c:	30 f4       	brcc	.+12     	; 0x219a <OLED_xbm_font_8_to_buffer+0xc8>
    218e:	94 5e       	subi	r25, 0xE4	; 228
    2190:	f4 01       	movw	r30, r8
    2192:	e8 0f       	add	r30, r24
    2194:	f1 1d       	adc	r31, r1
    2196:	90 83       	st	Z, r25
    2198:	33 c0       	rjmp	.+102    	; 0x2200 <OLED_xbm_font_8_to_buffer+0x12e>
    219a:	25 ed       	ldi	r18, 0xD5	; 213
    219c:	29 0f       	add	r18, r25
    219e:	25 30       	cpi	r18, 0x05	; 5
    21a0:	30 f4       	brcc	.+12     	; 0x21ae <OLED_xbm_font_8_to_buffer+0xdc>
    21a2:	95 5e       	subi	r25, 0xE5	; 229
    21a4:	f4 01       	movw	r30, r8
    21a6:	e8 0f       	add	r30, r24
    21a8:	f1 1d       	adc	r31, r1
    21aa:	90 83       	st	Z, r25
    21ac:	29 c0       	rjmp	.+82     	; 0x2200 <OLED_xbm_font_8_to_buffer+0x12e>
    21ae:	26 ec       	ldi	r18, 0xC6	; 198
    21b0:	29 0f       	add	r18, r25
    21b2:	22 30       	cpi	r18, 0x02	; 2
    21b4:	30 f4       	brcc	.+12     	; 0x21c2 <OLED_xbm_font_8_to_buffer+0xf0>
    21b6:	9f 5e       	subi	r25, 0xEF	; 239
    21b8:	f4 01       	movw	r30, r8
    21ba:	e8 0f       	add	r30, r24
    21bc:	f1 1d       	adc	r31, r1
    21be:	90 83       	st	Z, r25
    21c0:	1f c0       	rjmp	.+62     	; 0x2200 <OLED_xbm_font_8_to_buffer+0x12e>
    21c2:	9d 33       	cpi	r25, 0x3D	; 61
    21c4:	31 f4       	brne	.+12     	; 0x21d2 <OLED_xbm_font_8_to_buffer+0x100>
    21c6:	9d e4       	ldi	r25, 0x4D	; 77
    21c8:	f4 01       	movw	r30, r8
    21ca:	e8 0f       	add	r30, r24
    21cc:	f1 1d       	adc	r31, r1
    21ce:	90 83       	st	Z, r25
    21d0:	17 c0       	rjmp	.+46     	; 0x2200 <OLED_xbm_font_8_to_buffer+0x12e>
    21d2:	9f 33       	cpi	r25, 0x3F	; 63
    21d4:	31 f4       	brne	.+12     	; 0x21e2 <OLED_xbm_font_8_to_buffer+0x110>
    21d6:	9e e4       	ldi	r25, 0x4E	; 78
    21d8:	f4 01       	movw	r30, r8
    21da:	e8 0f       	add	r30, r24
    21dc:	f1 1d       	adc	r31, r1
    21de:	90 83       	st	Z, r25
    21e0:	0f c0       	rjmp	.+30     	; 0x2200 <OLED_xbm_font_8_to_buffer+0x12e>
    21e2:	9e 3f       	cpi	r25, 0xFE	; 254
    21e4:	31 f4       	brne	.+12     	; 0x21f2 <OLED_xbm_font_8_to_buffer+0x120>
    21e6:	9f e4       	ldi	r25, 0x4F	; 79
    21e8:	f4 01       	movw	r30, r8
    21ea:	e8 0f       	add	r30, r24
    21ec:	f1 1d       	adc	r31, r1
    21ee:	90 83       	st	Z, r25
    21f0:	07 c0       	rjmp	.+14     	; 0x2200 <OLED_xbm_font_8_to_buffer+0x12e>
    21f2:	9f 3f       	cpi	r25, 0xFF	; 255
    21f4:	29 f4       	brne	.+10     	; 0x2200 <OLED_xbm_font_8_to_buffer+0x12e>
    21f6:	90 e5       	ldi	r25, 0x50	; 80
    21f8:	f4 01       	movw	r30, r8
    21fa:	e8 0f       	add	r30, r24
    21fc:	f1 1d       	adc	r31, r1
    21fe:	90 83       	st	Z, r25
    2200:	8f 5f       	subi	r24, 0xFF	; 255
    2202:	8c 15       	cp	r24, r12
    2204:	08 f4       	brcc	.+2      	; 0x2208 <OLED_xbm_font_8_to_buffer+0x136>
    2206:	94 cf       	rjmp	.-216    	; 0x2130 <OLED_xbm_font_8_to_buffer+0x5e>
    2208:	10 e0       	ldi	r17, 0x00	; 0
    220a:	27 c0       	rjmp	.+78     	; 0x225a <OLED_xbm_font_8_to_buffer+0x188>
    220c:	f5 01       	movw	r30, r10
    220e:	e1 0f       	add	r30, r17
    2210:	f1 1d       	adc	r31, r1
    2212:	80 81       	ld	r24, Z
    2214:	80 32       	cpi	r24, 0x20	; 32
    2216:	19 f4       	brne	.+6      	; 0x221e <OLED_xbm_font_8_to_buffer+0x14c>
    2218:	95 e0       	ldi	r25, 0x05	; 5
    221a:	d9 0e       	add	r13, r25
    221c:	1d c0       	rjmp	.+58     	; 0x2258 <OLED_xbm_font_8_to_buffer+0x186>
    221e:	f4 01       	movw	r30, r8
    2220:	e1 0f       	add	r30, r17
    2222:	f1 1d       	adc	r31, r1
    2224:	60 81       	ld	r22, Z
    2226:	70 e0       	ldi	r23, 0x00	; 0
    2228:	fb 01       	movw	r30, r22
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	e6 56       	subi	r30, 0x66	; 102
    2230:	f0 4f       	sbci	r31, 0xF0	; 240
    2232:	45 91       	lpm	r20, Z+
    2234:	54 91       	lpm	r21, Z
    2236:	fb 01       	movw	r30, r22
    2238:	e7 5b       	subi	r30, 0xB7	; 183
    223a:	f0 4f       	sbci	r31, 0xF0	; 240
    223c:	f4 90       	lpm	r15, Z
    223e:	fb 01       	movw	r30, r22
    2240:	e8 50       	subi	r30, 0x08	; 8
    2242:	f1 4f       	sbci	r31, 0xF1	; 241
    2244:	64 91       	lpm	r22, Z
    2246:	65 0d       	add	r22, r5
    2248:	e3 2c       	mov	r14, r3
    224a:	08 e0       	ldi	r16, 0x08	; 8
    224c:	2f 2d       	mov	r18, r15
    224e:	8d 2d       	mov	r24, r13
    2250:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <OLED_draw_xbm>
    2254:	f4 0c       	add	r15, r4
    2256:	df 0c       	add	r13, r15
    2258:	1f 5f       	subi	r17, 0xFF	; 255
    225a:	1c 15       	cp	r17, r12
    225c:	b8 f2       	brcs	.-82     	; 0x220c <OLED_xbm_font_8_to_buffer+0x13a>
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	7e be       	out	0x3e, r7	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	6d be       	out	0x3d, r6	; 61
    2268:	df 91       	pop	r29
    226a:	cf 91       	pop	r28
    226c:	1f 91       	pop	r17
    226e:	0f 91       	pop	r16
    2270:	ff 90       	pop	r15
    2272:	ef 90       	pop	r14
    2274:	df 90       	pop	r13
    2276:	cf 90       	pop	r12
    2278:	bf 90       	pop	r11
    227a:	af 90       	pop	r10
    227c:	9f 90       	pop	r9
    227e:	8f 90       	pop	r8
    2280:	7f 90       	pop	r7
    2282:	6f 90       	pop	r6
    2284:	5f 90       	pop	r5
    2286:	4f 90       	pop	r4
    2288:	3f 90       	pop	r3
    228a:	08 95       	ret

0000228c <OLED_xbm_font_16_to_buffer>:
    228c:	3f 92       	push	r3
    228e:	4f 92       	push	r4
    2290:	5f 92       	push	r5
    2292:	6f 92       	push	r6
    2294:	7f 92       	push	r7
    2296:	8f 92       	push	r8
    2298:	9f 92       	push	r9
    229a:	af 92       	push	r10
    229c:	bf 92       	push	r11
    229e:	cf 92       	push	r12
    22a0:	df 92       	push	r13
    22a2:	ef 92       	push	r14
    22a4:	ff 92       	push	r15
    22a6:	0f 93       	push	r16
    22a8:	1f 93       	push	r17
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	5c 01       	movw	r10, r24
    22b4:	d6 2e       	mov	r13, r22
    22b6:	54 2e       	mov	r5, r20
    22b8:	42 2e       	mov	r4, r18
    22ba:	30 2e       	mov	r3, r16
    22bc:	6d b6       	in	r6, 0x3d	; 61
    22be:	7e b6       	in	r7, 0x3e	; 62
    22c0:	fc 01       	movw	r30, r24
    22c2:	01 90       	ld	r0, Z+
    22c4:	00 20       	and	r0, r0
    22c6:	e9 f7       	brne	.-6      	; 0x22c2 <OLED_xbm_font_16_to_buffer+0x36>
    22c8:	31 97       	sbiw	r30, 0x01	; 1
    22ca:	e8 1b       	sub	r30, r24
    22cc:	f9 0b       	sbc	r31, r25
    22ce:	ce 2e       	mov	r12, r30
    22d0:	8d b7       	in	r24, 0x3d	; 61
    22d2:	9e b7       	in	r25, 0x3e	; 62
    22d4:	8e 1b       	sub	r24, r30
    22d6:	91 09       	sbc	r25, r1
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	9e bf       	out	0x3e, r25	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	8d bf       	out	0x3d, r24	; 61
    22e2:	01 96       	adiw	r24, 0x01	; 1
    22e4:	4c 01       	movw	r8, r24
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	69 c0       	rjmp	.+210    	; 0x23bc <OLED_xbm_font_16_to_buffer+0x130>
    22ea:	f5 01       	movw	r30, r10
    22ec:	e8 0f       	add	r30, r24
    22ee:	f1 1d       	adc	r31, r1
    22f0:	90 81       	ld	r25, Z
    22f2:	2f eb       	ldi	r18, 0xBF	; 191
    22f4:	29 0f       	add	r18, r25
    22f6:	2a 31       	cpi	r18, 0x1A	; 26
    22f8:	28 f4       	brcc	.+10     	; 0x2304 <OLED_xbm_font_16_to_buffer+0x78>
    22fa:	f4 01       	movw	r30, r8
    22fc:	e8 0f       	add	r30, r24
    22fe:	f1 1d       	adc	r31, r1
    2300:	20 83       	st	Z, r18
    2302:	5b c0       	rjmp	.+182    	; 0x23ba <OLED_xbm_font_16_to_buffer+0x12e>
    2304:	2f e9       	ldi	r18, 0x9F	; 159
    2306:	29 0f       	add	r18, r25
    2308:	2a 31       	cpi	r18, 0x1A	; 26
    230a:	30 f4       	brcc	.+12     	; 0x2318 <OLED_xbm_font_16_to_buffer+0x8c>
    230c:	97 54       	subi	r25, 0x47	; 71
    230e:	f4 01       	movw	r30, r8
    2310:	e8 0f       	add	r30, r24
    2312:	f1 1d       	adc	r31, r1
    2314:	90 83       	st	Z, r25
    2316:	51 c0       	rjmp	.+162    	; 0x23ba <OLED_xbm_font_16_to_buffer+0x12e>
    2318:	20 ed       	ldi	r18, 0xD0	; 208
    231a:	29 0f       	add	r18, r25
    231c:	2a 30       	cpi	r18, 0x0A	; 10
    231e:	30 f4       	brcc	.+12     	; 0x232c <OLED_xbm_font_16_to_buffer+0xa0>
    2320:	9c 5f       	subi	r25, 0xFC	; 252
    2322:	f4 01       	movw	r30, r8
    2324:	e8 0f       	add	r30, r24
    2326:	f1 1d       	adc	r31, r1
    2328:	90 83       	st	Z, r25
    232a:	47 c0       	rjmp	.+142    	; 0x23ba <OLED_xbm_font_16_to_buffer+0x12e>
    232c:	2f ed       	ldi	r18, 0xDF	; 223
    232e:	29 0f       	add	r18, r25
    2330:	25 30       	cpi	r18, 0x05	; 5
    2332:	30 f4       	brcc	.+12     	; 0x2340 <OLED_xbm_font_16_to_buffer+0xb4>
    2334:	93 5e       	subi	r25, 0xE3	; 227
    2336:	f4 01       	movw	r30, r8
    2338:	e8 0f       	add	r30, r24
    233a:	f1 1d       	adc	r31, r1
    233c:	90 83       	st	Z, r25
    233e:	3d c0       	rjmp	.+122    	; 0x23ba <OLED_xbm_font_16_to_buffer+0x12e>
    2340:	29 ed       	ldi	r18, 0xD9	; 217
    2342:	29 0f       	add	r18, r25
    2344:	23 30       	cpi	r18, 0x03	; 3
    2346:	30 f4       	brcc	.+12     	; 0x2354 <OLED_xbm_font_16_to_buffer+0xc8>
    2348:	94 5e       	subi	r25, 0xE4	; 228
    234a:	f4 01       	movw	r30, r8
    234c:	e8 0f       	add	r30, r24
    234e:	f1 1d       	adc	r31, r1
    2350:	90 83       	st	Z, r25
    2352:	33 c0       	rjmp	.+102    	; 0x23ba <OLED_xbm_font_16_to_buffer+0x12e>
    2354:	25 ed       	ldi	r18, 0xD5	; 213
    2356:	29 0f       	add	r18, r25
    2358:	25 30       	cpi	r18, 0x05	; 5
    235a:	30 f4       	brcc	.+12     	; 0x2368 <OLED_xbm_font_16_to_buffer+0xdc>
    235c:	95 5e       	subi	r25, 0xE5	; 229
    235e:	f4 01       	movw	r30, r8
    2360:	e8 0f       	add	r30, r24
    2362:	f1 1d       	adc	r31, r1
    2364:	90 83       	st	Z, r25
    2366:	29 c0       	rjmp	.+82     	; 0x23ba <OLED_xbm_font_16_to_buffer+0x12e>
    2368:	26 ec       	ldi	r18, 0xC6	; 198
    236a:	29 0f       	add	r18, r25
    236c:	22 30       	cpi	r18, 0x02	; 2
    236e:	30 f4       	brcc	.+12     	; 0x237c <OLED_xbm_font_16_to_buffer+0xf0>
    2370:	9f 5e       	subi	r25, 0xEF	; 239
    2372:	f4 01       	movw	r30, r8
    2374:	e8 0f       	add	r30, r24
    2376:	f1 1d       	adc	r31, r1
    2378:	90 83       	st	Z, r25
    237a:	1f c0       	rjmp	.+62     	; 0x23ba <OLED_xbm_font_16_to_buffer+0x12e>
    237c:	9d 33       	cpi	r25, 0x3D	; 61
    237e:	31 f4       	brne	.+12     	; 0x238c <OLED_xbm_font_16_to_buffer+0x100>
    2380:	9d e4       	ldi	r25, 0x4D	; 77
    2382:	f4 01       	movw	r30, r8
    2384:	e8 0f       	add	r30, r24
    2386:	f1 1d       	adc	r31, r1
    2388:	90 83       	st	Z, r25
    238a:	17 c0       	rjmp	.+46     	; 0x23ba <OLED_xbm_font_16_to_buffer+0x12e>
    238c:	9f 33       	cpi	r25, 0x3F	; 63
    238e:	31 f4       	brne	.+12     	; 0x239c <OLED_xbm_font_16_to_buffer+0x110>
    2390:	9e e4       	ldi	r25, 0x4E	; 78
    2392:	f4 01       	movw	r30, r8
    2394:	e8 0f       	add	r30, r24
    2396:	f1 1d       	adc	r31, r1
    2398:	90 83       	st	Z, r25
    239a:	0f c0       	rjmp	.+30     	; 0x23ba <OLED_xbm_font_16_to_buffer+0x12e>
    239c:	9e 3f       	cpi	r25, 0xFE	; 254
    239e:	31 f4       	brne	.+12     	; 0x23ac <OLED_xbm_font_16_to_buffer+0x120>
    23a0:	9f e4       	ldi	r25, 0x4F	; 79
    23a2:	f4 01       	movw	r30, r8
    23a4:	e8 0f       	add	r30, r24
    23a6:	f1 1d       	adc	r31, r1
    23a8:	90 83       	st	Z, r25
    23aa:	07 c0       	rjmp	.+14     	; 0x23ba <OLED_xbm_font_16_to_buffer+0x12e>
    23ac:	9f 3f       	cpi	r25, 0xFF	; 255
    23ae:	29 f4       	brne	.+10     	; 0x23ba <OLED_xbm_font_16_to_buffer+0x12e>
    23b0:	90 e5       	ldi	r25, 0x50	; 80
    23b2:	f4 01       	movw	r30, r8
    23b4:	e8 0f       	add	r30, r24
    23b6:	f1 1d       	adc	r31, r1
    23b8:	90 83       	st	Z, r25
    23ba:	8f 5f       	subi	r24, 0xFF	; 255
    23bc:	8c 15       	cp	r24, r12
    23be:	08 f4       	brcc	.+2      	; 0x23c2 <OLED_xbm_font_16_to_buffer+0x136>
    23c0:	94 cf       	rjmp	.-216    	; 0x22ea <OLED_xbm_font_16_to_buffer+0x5e>
    23c2:	10 e0       	ldi	r17, 0x00	; 0
    23c4:	27 c0       	rjmp	.+78     	; 0x2414 <OLED_xbm_font_16_to_buffer+0x188>
    23c6:	f5 01       	movw	r30, r10
    23c8:	e1 0f       	add	r30, r17
    23ca:	f1 1d       	adc	r31, r1
    23cc:	80 81       	ld	r24, Z
    23ce:	80 32       	cpi	r24, 0x20	; 32
    23d0:	19 f4       	brne	.+6      	; 0x23d8 <OLED_xbm_font_16_to_buffer+0x14c>
    23d2:	9a e0       	ldi	r25, 0x0A	; 10
    23d4:	d9 0e       	add	r13, r25
    23d6:	1d c0       	rjmp	.+58     	; 0x2412 <OLED_xbm_font_16_to_buffer+0x186>
    23d8:	f4 01       	movw	r30, r8
    23da:	e1 0f       	add	r30, r17
    23dc:	f1 1d       	adc	r31, r1
    23de:	60 81       	ld	r22, Z
    23e0:	70 e0       	ldi	r23, 0x00	; 0
    23e2:	fb 01       	movw	r30, r22
    23e4:	ee 0f       	add	r30, r30
    23e6:	ff 1f       	adc	r31, r31
    23e8:	ea 5d       	subi	r30, 0xDA	; 218
    23ea:	fa 4f       	sbci	r31, 0xFA	; 250
    23ec:	45 91       	lpm	r20, Z+
    23ee:	54 91       	lpm	r21, Z
    23f0:	fb 01       	movw	r30, r22
    23f2:	eb 52       	subi	r30, 0x2B	; 43
    23f4:	fb 4f       	sbci	r31, 0xFB	; 251
    23f6:	f4 90       	lpm	r15, Z
    23f8:	fb 01       	movw	r30, r22
    23fa:	ec 57       	subi	r30, 0x7C	; 124
    23fc:	fb 4f       	sbci	r31, 0xFB	; 251
    23fe:	64 91       	lpm	r22, Z
    2400:	65 0d       	add	r22, r5
    2402:	e3 2c       	mov	r14, r3
    2404:	00 e1       	ldi	r16, 0x10	; 16
    2406:	2f 2d       	mov	r18, r15
    2408:	8d 2d       	mov	r24, r13
    240a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <OLED_draw_xbm>
    240e:	f4 0c       	add	r15, r4
    2410:	df 0c       	add	r13, r15
    2412:	1f 5f       	subi	r17, 0xFF	; 255
    2414:	1c 15       	cp	r17, r12
    2416:	b8 f2       	brcs	.-82     	; 0x23c6 <OLED_xbm_font_16_to_buffer+0x13a>
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	7e be       	out	0x3e, r7	; 62
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	6d be       	out	0x3d, r6	; 61
    2422:	df 91       	pop	r29
    2424:	cf 91       	pop	r28
    2426:	1f 91       	pop	r17
    2428:	0f 91       	pop	r16
    242a:	ff 90       	pop	r15
    242c:	ef 90       	pop	r14
    242e:	df 90       	pop	r13
    2430:	cf 90       	pop	r12
    2432:	bf 90       	pop	r11
    2434:	af 90       	pop	r10
    2436:	9f 90       	pop	r9
    2438:	8f 90       	pop	r8
    243a:	7f 90       	pop	r7
    243c:	6f 90       	pop	r6
    243e:	5f 90       	pop	r5
    2440:	4f 90       	pop	r4
    2442:	3f 90       	pop	r3
    2444:	08 95       	ret

00002446 <OLED_xbm_font_20_to_buffer>:
    2446:	3f 92       	push	r3
    2448:	4f 92       	push	r4
    244a:	5f 92       	push	r5
    244c:	6f 92       	push	r6
    244e:	7f 92       	push	r7
    2450:	8f 92       	push	r8
    2452:	9f 92       	push	r9
    2454:	af 92       	push	r10
    2456:	bf 92       	push	r11
    2458:	cf 92       	push	r12
    245a:	df 92       	push	r13
    245c:	ef 92       	push	r14
    245e:	ff 92       	push	r15
    2460:	0f 93       	push	r16
    2462:	1f 93       	push	r17
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	5c 01       	movw	r10, r24
    246e:	d6 2e       	mov	r13, r22
    2470:	54 2e       	mov	r5, r20
    2472:	42 2e       	mov	r4, r18
    2474:	30 2e       	mov	r3, r16
    2476:	6d b6       	in	r6, 0x3d	; 61
    2478:	7e b6       	in	r7, 0x3e	; 62
    247a:	fc 01       	movw	r30, r24
    247c:	01 90       	ld	r0, Z+
    247e:	00 20       	and	r0, r0
    2480:	e9 f7       	brne	.-6      	; 0x247c <OLED_xbm_font_20_to_buffer+0x36>
    2482:	31 97       	sbiw	r30, 0x01	; 1
    2484:	e8 1b       	sub	r30, r24
    2486:	f9 0b       	sbc	r31, r25
    2488:	ce 2e       	mov	r12, r30
    248a:	8d b7       	in	r24, 0x3d	; 61
    248c:	9e b7       	in	r25, 0x3e	; 62
    248e:	8e 1b       	sub	r24, r30
    2490:	91 09       	sbc	r25, r1
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	9e bf       	out	0x3e, r25	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	8d bf       	out	0x3d, r24	; 61
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	4c 01       	movw	r8, r24
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	0c c0       	rjmp	.+24     	; 0x24bc <OLED_xbm_font_20_to_buffer+0x76>
    24a4:	f5 01       	movw	r30, r10
    24a6:	e8 0f       	add	r30, r24
    24a8:	f1 1d       	adc	r31, r1
    24aa:	90 81       	ld	r25, Z
    24ac:	90 53       	subi	r25, 0x30	; 48
    24ae:	9a 30       	cpi	r25, 0x0A	; 10
    24b0:	20 f4       	brcc	.+8      	; 0x24ba <OLED_xbm_font_20_to_buffer+0x74>
    24b2:	f4 01       	movw	r30, r8
    24b4:	e8 0f       	add	r30, r24
    24b6:	f1 1d       	adc	r31, r1
    24b8:	90 83       	st	Z, r25
    24ba:	8f 5f       	subi	r24, 0xFF	; 255
    24bc:	8c 15       	cp	r24, r12
    24be:	90 f3       	brcs	.-28     	; 0x24a4 <OLED_xbm_font_20_to_buffer+0x5e>
    24c0:	10 e0       	ldi	r17, 0x00	; 0
    24c2:	27 c0       	rjmp	.+78     	; 0x2512 <OLED_xbm_font_20_to_buffer+0xcc>
    24c4:	f5 01       	movw	r30, r10
    24c6:	e1 0f       	add	r30, r17
    24c8:	f1 1d       	adc	r31, r1
    24ca:	80 81       	ld	r24, Z
    24cc:	80 32       	cpi	r24, 0x20	; 32
    24ce:	19 f4       	brne	.+6      	; 0x24d6 <OLED_xbm_font_20_to_buffer+0x90>
    24d0:	9e e0       	ldi	r25, 0x0E	; 14
    24d2:	d9 0e       	add	r13, r25
    24d4:	1d c0       	rjmp	.+58     	; 0x2510 <OLED_xbm_font_20_to_buffer+0xca>
    24d6:	f4 01       	movw	r30, r8
    24d8:	e1 0f       	add	r30, r17
    24da:	f1 1d       	adc	r31, r1
    24dc:	60 81       	ld	r22, Z
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	fb 01       	movw	r30, r22
    24e2:	ee 0f       	add	r30, r30
    24e4:	ff 1f       	adc	r31, r31
    24e6:	e0 52       	subi	r30, 0x20	; 32
    24e8:	fd 4f       	sbci	r31, 0xFD	; 253
    24ea:	45 91       	lpm	r20, Z+
    24ec:	54 91       	lpm	r21, Z
    24ee:	fb 01       	movw	r30, r22
    24f0:	ea 52       	subi	r30, 0x2A	; 42
    24f2:	fd 4f       	sbci	r31, 0xFD	; 253
    24f4:	f4 90       	lpm	r15, Z
    24f6:	fb 01       	movw	r30, r22
    24f8:	e4 53       	subi	r30, 0x34	; 52
    24fa:	fd 4f       	sbci	r31, 0xFD	; 253
    24fc:	64 91       	lpm	r22, Z
    24fe:	65 0d       	add	r22, r5
    2500:	e3 2c       	mov	r14, r3
    2502:	04 e1       	ldi	r16, 0x14	; 20
    2504:	2f 2d       	mov	r18, r15
    2506:	8d 2d       	mov	r24, r13
    2508:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <OLED_draw_xbm>
    250c:	f4 0c       	add	r15, r4
    250e:	df 0c       	add	r13, r15
    2510:	1f 5f       	subi	r17, 0xFF	; 255
    2512:	1c 15       	cp	r17, r12
    2514:	b8 f2       	brcs	.-82     	; 0x24c4 <OLED_xbm_font_20_to_buffer+0x7e>
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	7e be       	out	0x3e, r7	; 62
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	6d be       	out	0x3d, r6	; 61
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	0f 91       	pop	r16
    2528:	ff 90       	pop	r15
    252a:	ef 90       	pop	r14
    252c:	df 90       	pop	r13
    252e:	cf 90       	pop	r12
    2530:	bf 90       	pop	r11
    2532:	af 90       	pop	r10
    2534:	9f 90       	pop	r9
    2536:	8f 90       	pop	r8
    2538:	7f 90       	pop	r7
    253a:	6f 90       	pop	r6
    253c:	5f 90       	pop	r5
    253e:	4f 90       	pop	r4
    2540:	3f 90       	pop	r3
    2542:	08 95       	ret

00002544 <OLED_xbm_font_25_to_buffer>:
    2544:	3f 92       	push	r3
    2546:	4f 92       	push	r4
    2548:	5f 92       	push	r5
    254a:	6f 92       	push	r6
    254c:	7f 92       	push	r7
    254e:	8f 92       	push	r8
    2550:	9f 92       	push	r9
    2552:	af 92       	push	r10
    2554:	bf 92       	push	r11
    2556:	cf 92       	push	r12
    2558:	df 92       	push	r13
    255a:	ef 92       	push	r14
    255c:	ff 92       	push	r15
    255e:	0f 93       	push	r16
    2560:	1f 93       	push	r17
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	5c 01       	movw	r10, r24
    256c:	d6 2e       	mov	r13, r22
    256e:	54 2e       	mov	r5, r20
    2570:	42 2e       	mov	r4, r18
    2572:	30 2e       	mov	r3, r16
    2574:	6d b6       	in	r6, 0x3d	; 61
    2576:	7e b6       	in	r7, 0x3e	; 62
    2578:	fc 01       	movw	r30, r24
    257a:	01 90       	ld	r0, Z+
    257c:	00 20       	and	r0, r0
    257e:	e9 f7       	brne	.-6      	; 0x257a <OLED_xbm_font_25_to_buffer+0x36>
    2580:	31 97       	sbiw	r30, 0x01	; 1
    2582:	e8 1b       	sub	r30, r24
    2584:	f9 0b       	sbc	r31, r25
    2586:	ce 2e       	mov	r12, r30
    2588:	8d b7       	in	r24, 0x3d	; 61
    258a:	9e b7       	in	r25, 0x3e	; 62
    258c:	8e 1b       	sub	r24, r30
    258e:	91 09       	sbc	r25, r1
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	9e bf       	out	0x3e, r25	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	8d bf       	out	0x3d, r24	; 61
    259a:	01 96       	adiw	r24, 0x01	; 1
    259c:	4c 01       	movw	r8, r24
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	0c c0       	rjmp	.+24     	; 0x25ba <OLED_xbm_font_25_to_buffer+0x76>
    25a2:	f5 01       	movw	r30, r10
    25a4:	e8 0f       	add	r30, r24
    25a6:	f1 1d       	adc	r31, r1
    25a8:	90 81       	ld	r25, Z
    25aa:	90 53       	subi	r25, 0x30	; 48
    25ac:	9a 30       	cpi	r25, 0x0A	; 10
    25ae:	20 f4       	brcc	.+8      	; 0x25b8 <OLED_xbm_font_25_to_buffer+0x74>
    25b0:	f4 01       	movw	r30, r8
    25b2:	e8 0f       	add	r30, r24
    25b4:	f1 1d       	adc	r31, r1
    25b6:	90 83       	st	Z, r25
    25b8:	8f 5f       	subi	r24, 0xFF	; 255
    25ba:	8c 15       	cp	r24, r12
    25bc:	90 f3       	brcs	.-28     	; 0x25a2 <OLED_xbm_font_25_to_buffer+0x5e>
    25be:	10 e0       	ldi	r17, 0x00	; 0
    25c0:	27 c0       	rjmp	.+78     	; 0x2610 <OLED_xbm_font_25_to_buffer+0xcc>
    25c2:	f5 01       	movw	r30, r10
    25c4:	e1 0f       	add	r30, r17
    25c6:	f1 1d       	adc	r31, r1
    25c8:	80 81       	ld	r24, Z
    25ca:	80 32       	cpi	r24, 0x20	; 32
    25cc:	19 f4       	brne	.+6      	; 0x25d4 <OLED_xbm_font_25_to_buffer+0x90>
    25ce:	9e e0       	ldi	r25, 0x0E	; 14
    25d0:	d9 0e       	add	r13, r25
    25d2:	1d c0       	rjmp	.+58     	; 0x260e <OLED_xbm_font_25_to_buffer+0xca>
    25d4:	f4 01       	movw	r30, r8
    25d6:	e1 0f       	add	r30, r17
    25d8:	f1 1d       	adc	r31, r1
    25da:	60 81       	ld	r22, Z
    25dc:	70 e0       	ldi	r23, 0x00	; 0
    25de:	fb 01       	movw	r30, r22
    25e0:	ee 0f       	add	r30, r30
    25e2:	ff 1f       	adc	r31, r31
    25e4:	ec 53       	subi	r30, 0x3C	; 60
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	45 91       	lpm	r20, Z+
    25ea:	54 91       	lpm	r21, Z
    25ec:	fb 01       	movw	r30, r22
    25ee:	e6 54       	subi	r30, 0x46	; 70
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	f4 90       	lpm	r15, Z
    25f4:	fb 01       	movw	r30, r22
    25f6:	e0 55       	subi	r30, 0x50	; 80
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	64 91       	lpm	r22, Z
    25fc:	65 0d       	add	r22, r5
    25fe:	e3 2c       	mov	r14, r3
    2600:	09 e1       	ldi	r16, 0x19	; 25
    2602:	2f 2d       	mov	r18, r15
    2604:	8d 2d       	mov	r24, r13
    2606:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <OLED_draw_xbm>
    260a:	f4 0c       	add	r15, r4
    260c:	df 0c       	add	r13, r15
    260e:	1f 5f       	subi	r17, 0xFF	; 255
    2610:	1c 15       	cp	r17, r12
    2612:	b8 f2       	brcs	.-82     	; 0x25c2 <OLED_xbm_font_25_to_buffer+0x7e>
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	7e be       	out	0x3e, r7	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	6d be       	out	0x3d, r6	; 61
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	1f 91       	pop	r17
    2624:	0f 91       	pop	r16
    2626:	ff 90       	pop	r15
    2628:	ef 90       	pop	r14
    262a:	df 90       	pop	r13
    262c:	cf 90       	pop	r12
    262e:	bf 90       	pop	r11
    2630:	af 90       	pop	r10
    2632:	9f 90       	pop	r9
    2634:	8f 90       	pop	r8
    2636:	7f 90       	pop	r7
    2638:	6f 90       	pop	r6
    263a:	5f 90       	pop	r5
    263c:	4f 90       	pop	r4
    263e:	3f 90       	pop	r3
    2640:	08 95       	ret

00002642 <OLED_draw_string>:
    2642:	ef 92       	push	r14
    2644:	0f 93       	push	r16
    2646:	30 2f       	mov	r19, r16
    2648:	28 30       	cpi	r18, 0x08	; 8
    264a:	29 f4       	brne	.+10     	; 0x2656 <OLED_draw_string+0x14>
    264c:	0e 2d       	mov	r16, r14
    264e:	23 2f       	mov	r18, r19
    2650:	0e 94 69 10 	call	0x20d2	; 0x20d2 <OLED_xbm_font_8_to_buffer>
    2654:	14 c0       	rjmp	.+40     	; 0x267e <OLED_draw_string+0x3c>
    2656:	20 31       	cpi	r18, 0x10	; 16
    2658:	29 f4       	brne	.+10     	; 0x2664 <OLED_draw_string+0x22>
    265a:	0e 2d       	mov	r16, r14
    265c:	23 2f       	mov	r18, r19
    265e:	0e 94 46 11 	call	0x228c	; 0x228c <OLED_xbm_font_16_to_buffer>
    2662:	0d c0       	rjmp	.+26     	; 0x267e <OLED_draw_string+0x3c>
    2664:	24 31       	cpi	r18, 0x14	; 20
    2666:	29 f4       	brne	.+10     	; 0x2672 <OLED_draw_string+0x30>
    2668:	0e 2d       	mov	r16, r14
    266a:	23 2f       	mov	r18, r19
    266c:	0e 94 23 12 	call	0x2446	; 0x2446 <OLED_xbm_font_20_to_buffer>
    2670:	06 c0       	rjmp	.+12     	; 0x267e <OLED_draw_string+0x3c>
    2672:	29 31       	cpi	r18, 0x19	; 25
    2674:	21 f4       	brne	.+8      	; 0x267e <OLED_draw_string+0x3c>
    2676:	0e 2d       	mov	r16, r14
    2678:	23 2f       	mov	r18, r19
    267a:	0e 94 a2 12 	call	0x2544	; 0x2544 <OLED_xbm_font_25_to_buffer>
    267e:	0f 91       	pop	r16
    2680:	ef 90       	pop	r14
    2682:	08 95       	ret

00002684 <OLED_draw_horizontal_line>:
*
*	yPosition:	The y-coordinate at which the horizontal line will be drawn.
*
*	NOTE: No checks for valid positioning of the line.
*/
void OLED_draw_horizontal_line(uint8_t xStart, uint8_t xEnd, uint8_t yPosition) {
    2684:	1f 93       	push	r17
    2686:	cf 93       	push	r28
    2688:	df 93       	push	r29
    268a:	c8 2f       	mov	r28, r24
    268c:	d6 2f       	mov	r29, r22
    268e:	14 2f       	mov	r17, r20
	for (uint8_t i = xStart; i < xEnd; i++) {
    2690:	05 c0       	rjmp	.+10     	; 0x269c <OLED_draw_horizontal_line+0x18>
		OLED_set_pixel(i, yPosition);
    2692:	61 2f       	mov	r22, r17
    2694:	8c 2f       	mov	r24, r28
    2696:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <OLED_set_pixel>
*	yPosition:	The y-coordinate at which the horizontal line will be drawn.
*
*	NOTE: No checks for valid positioning of the line.
*/
void OLED_draw_horizontal_line(uint8_t xStart, uint8_t xEnd, uint8_t yPosition) {
	for (uint8_t i = xStart; i < xEnd; i++) {
    269a:	cf 5f       	subi	r28, 0xFF	; 255
    269c:	cd 17       	cp	r28, r29
    269e:	c8 f3       	brcs	.-14     	; 0x2692 <OLED_draw_horizontal_line+0xe>
		OLED_set_pixel(i, yPosition);
	}
}
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
    26a4:	1f 91       	pop	r17
    26a6:	08 95       	ret

000026a8 <OLED_draw_vertical_line>:
*	xPosition:	The x-coordinate at which the vertical line will be drawn.
*
*
*	NOTE: No checks for valid positioning of the line.
*/
void OLED_draw_vertical_line(uint8_t yStart, uint8_t yEnd, uint8_t xPosition) {
    26a8:	1f 93       	push	r17
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	c8 2f       	mov	r28, r24
    26b0:	d6 2f       	mov	r29, r22
    26b2:	14 2f       	mov	r17, r20
	for (uint8_t i = yStart; i < yEnd; i++) {
    26b4:	05 c0       	rjmp	.+10     	; 0x26c0 <OLED_draw_vertical_line+0x18>
		OLED_set_pixel(xPosition, i);
    26b6:	6c 2f       	mov	r22, r28
    26b8:	81 2f       	mov	r24, r17
    26ba:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <OLED_set_pixel>
*
*
*	NOTE: No checks for valid positioning of the line.
*/
void OLED_draw_vertical_line(uint8_t yStart, uint8_t yEnd, uint8_t xPosition) {
	for (uint8_t i = yStart; i < yEnd; i++) {
    26be:	cf 5f       	subi	r28, 0xFF	; 255
    26c0:	cd 17       	cp	r28, r29
    26c2:	c8 f3       	brcs	.-14     	; 0x26b6 <OLED_draw_vertical_line+0xe>
		OLED_set_pixel(xPosition, i);
	}
}
    26c4:	df 91       	pop	r29
    26c6:	cf 91       	pop	r28
    26c8:	1f 91       	pop	r17
    26ca:	08 95       	ret

000026cc <OLED_draw_rectangle>:
*			-	1 = Filled (solid).
*
*
*	NOTE: No checks for valid positioning of the rectangle.
*/
void OLED_draw_rectangle(uint8_t xPosition, uint8_t yPosition, uint8_t width, uint8_t height, uint8_t filled) {
    26cc:	ef 92       	push	r14
    26ce:	ff 92       	push	r15
    26d0:	0f 93       	push	r16
    26d2:	1f 93       	push	r17
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	f8 2e       	mov	r15, r24
    26da:	d6 2f       	mov	r29, r22
    26dc:	e2 2e       	mov	r14, r18
	OLED_draw_horizontal_line(xPosition, xPosition + width, yPosition);
    26de:	18 2f       	mov	r17, r24
    26e0:	14 0f       	add	r17, r20
    26e2:	46 2f       	mov	r20, r22
    26e4:	61 2f       	mov	r22, r17
    26e6:	0e 94 42 13 	call	0x2684	; 0x2684 <OLED_draw_horizontal_line>
	OLED_draw_horizontal_line(xPosition, xPosition + width, yPosition + height - 1);
    26ea:	cd 2f       	mov	r28, r29
    26ec:	ce 0d       	add	r28, r14
    26ee:	4f ef       	ldi	r20, 0xFF	; 255
    26f0:	4c 0f       	add	r20, r28
    26f2:	61 2f       	mov	r22, r17
    26f4:	8f 2d       	mov	r24, r15
    26f6:	0e 94 42 13 	call	0x2684	; 0x2684 <OLED_draw_horizontal_line>
	
	OLED_draw_vertical_line(yPosition, yPosition + height, xPosition);
    26fa:	4f 2d       	mov	r20, r15
    26fc:	6c 2f       	mov	r22, r28
    26fe:	8d 2f       	mov	r24, r29
    2700:	0e 94 54 13 	call	0x26a8	; 0x26a8 <OLED_draw_vertical_line>
	OLED_draw_vertical_line(yPosition, yPosition + height, xPosition + width);
    2704:	41 2f       	mov	r20, r17
    2706:	6c 2f       	mov	r22, r28
    2708:	8d 2f       	mov	r24, r29
    270a:	0e 94 54 13 	call	0x26a8	; 0x26a8 <OLED_draw_vertical_line>
	
	if (filled) {
    270e:	00 23       	and	r16, r16
    2710:	99 f0       	breq	.+38     	; 0x2738 <OLED_draw_rectangle+0x6c>
		for (uint8_t i = yPosition + 1; i < yPosition + height - 1; i++) {
    2712:	c1 e0       	ldi	r28, 0x01	; 1
    2714:	cd 0f       	add	r28, r29
    2716:	06 c0       	rjmp	.+12     	; 0x2724 <OLED_draw_rectangle+0x58>
			OLED_draw_horizontal_line(xPosition, xPosition + width, i);
    2718:	4c 2f       	mov	r20, r28
    271a:	61 2f       	mov	r22, r17
    271c:	8f 2d       	mov	r24, r15
    271e:	0e 94 42 13 	call	0x2684	; 0x2684 <OLED_draw_horizontal_line>
	
	OLED_draw_vertical_line(yPosition, yPosition + height, xPosition);
	OLED_draw_vertical_line(yPosition, yPosition + height, xPosition + width);
	
	if (filled) {
		for (uint8_t i = yPosition + 1; i < yPosition + height - 1; i++) {
    2722:	cf 5f       	subi	r28, 0xFF	; 255
    2724:	2c 2f       	mov	r18, r28
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	8e 2d       	mov	r24, r14
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	8d 0f       	add	r24, r29
    272e:	91 1d       	adc	r25, r1
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	28 17       	cp	r18, r24
    2734:	39 07       	cpc	r19, r25
    2736:	84 f3       	brlt	.-32     	; 0x2718 <OLED_draw_rectangle+0x4c>
			OLED_draw_horizontal_line(xPosition, xPosition + width, i);
		}
	}
	
}
    2738:	df 91       	pop	r29
    273a:	cf 91       	pop	r28
    273c:	1f 91       	pop	r17
    273e:	0f 91       	pop	r16
    2740:	ff 90       	pop	r15
    2742:	ef 90       	pop	r14
    2744:	08 95       	ret

00002746 <timer0_init>:
*	Output compare value = 62
*
* So, (256/16MHz) * 62 = 0.000992 Seconds = 1ms
*/
void timer0_init() {
	clockTicks = 0L;
    2746:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <clockTicks>
    274a:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <clockTicks+0x1>
    274e:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <clockTicks+0x2>
    2752:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <clockTicks+0x3>
	TCNT0 = 0;				/* Clear the timer */
    2756:	16 bc       	out	0x26, r1	; 38
	OCR0A = 62;				/* Set the output compare value to be 124 */
    2758:	8e e3       	ldi	r24, 0x3E	; 62
    275a:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);	/* Set timer to clear on compare match (CTC mode) */
    275c:	82 e0       	ldi	r24, 0x02	; 2
    275e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02);		/* Divide the clock by 256 */
    2760:	84 e0       	ldi	r24, 0x04	; 4
    2762:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A);	/* Enable interrupts on output compare match */
    2764:	ee e6       	ldi	r30, 0x6E	; 110
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	82 60       	ori	r24, 0x02	; 2
    276c:	80 83       	st	Z, r24
	TIFR0 &= (1<<OCF0A);	/* Clear interrupt flag */
    276e:	85 b3       	in	r24, 0x15	; 21
    2770:	82 70       	andi	r24, 0x02	; 2
    2772:	85 bb       	out	0x15, r24	; 21
    2774:	08 95       	ret

00002776 <timer0_get_current_time>:
* Return the current value of the global clockTicks variable, accounting for 
* possible overflow. To ensure the returned value is consistent, interrupts
* are temporarily disabled during the read operation.
* 
*/
uint32_t timer0_get_current_time() {
    2776:	cf 93       	push	r28
	uint32_t returnValue;
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    2778:	cf b7       	in	r28, 0x3f	; 63
    277a:	c0 78       	andi	r28, 0x80	; 128
	cli();	/* Disable interrupts */
    277c:	f8 94       	cli
	 
	/* Ensure the return value is valid and any overflow is accounted for */
	returnValue = clockTicks % (UINT32_MAX + 1);
    277e:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <clockTicks>
    2782:	70 91 ce 01 	lds	r23, 0x01CE	; 0x8001ce <clockTicks+0x1>
    2786:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <clockTicks+0x2>
    278a:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <clockTicks+0x3>
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	a9 01       	movw	r20, r18
    2794:	0e 94 75 14 	call	0x28ea	; 0x28ea <__udivmodsi4>
	
	if(interruptsOn) {
    2798:	cc 23       	and	r28, r28
    279a:	09 f0       	breq	.+2      	; 0x279e <timer0_get_current_time+0x28>
		sei(); /* Re-enable interrupts */
    279c:	78 94       	sei
	}
	return returnValue;
}
    279e:	cf 91       	pop	r28
    27a0:	08 95       	ret

000027a2 <__vector_14>:

/* Increment our clock tick count every 1ms */
ISR(TIMER0_COMPA_vect) {
    27a2:	1f 92       	push	r1
    27a4:	0f 92       	push	r0
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	0f 92       	push	r0
    27aa:	11 24       	eor	r1, r1
    27ac:	8f 93       	push	r24
    27ae:	9f 93       	push	r25
    27b0:	af 93       	push	r26
    27b2:	bf 93       	push	r27
	clockTicks++;
    27b4:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <clockTicks>
    27b8:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <clockTicks+0x1>
    27bc:	a0 91 cf 01 	lds	r26, 0x01CF	; 0x8001cf <clockTicks+0x2>
    27c0:	b0 91 d0 01 	lds	r27, 0x01D0	; 0x8001d0 <clockTicks+0x3>
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	a1 1d       	adc	r26, r1
    27c8:	b1 1d       	adc	r27, r1
    27ca:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <clockTicks>
    27ce:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <clockTicks+0x1>
    27d2:	a0 93 cf 01 	sts	0x01CF, r26	; 0x8001cf <clockTicks+0x2>
    27d6:	b0 93 d0 01 	sts	0x01D0, r27	; 0x8001d0 <clockTicks+0x3>
    27da:	bf 91       	pop	r27
    27dc:	af 91       	pop	r26
    27de:	9f 91       	pop	r25
    27e0:	8f 91       	pop	r24
    27e2:	0f 90       	pop	r0
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	0f 90       	pop	r0
    27e8:	1f 90       	pop	r1
    27ea:	18 95       	reti

000027ec <__cmpsf2>:
    27ec:	0e 94 38 14 	call	0x2870	; 0x2870 <__fp_cmp>
    27f0:	08 f4       	brcc	.+2      	; 0x27f4 <__cmpsf2+0x8>
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	08 95       	ret

000027f6 <__floatunsisf>:
    27f6:	e8 94       	clt
    27f8:	09 c0       	rjmp	.+18     	; 0x280c <__floatsisf+0x12>

000027fa <__floatsisf>:
    27fa:	97 fb       	bst	r25, 7
    27fc:	3e f4       	brtc	.+14     	; 0x280c <__floatsisf+0x12>
    27fe:	90 95       	com	r25
    2800:	80 95       	com	r24
    2802:	70 95       	com	r23
    2804:	61 95       	neg	r22
    2806:	7f 4f       	sbci	r23, 0xFF	; 255
    2808:	8f 4f       	sbci	r24, 0xFF	; 255
    280a:	9f 4f       	sbci	r25, 0xFF	; 255
    280c:	99 23       	and	r25, r25
    280e:	a9 f0       	breq	.+42     	; 0x283a <__floatsisf+0x40>
    2810:	f9 2f       	mov	r31, r25
    2812:	96 e9       	ldi	r25, 0x96	; 150
    2814:	bb 27       	eor	r27, r27
    2816:	93 95       	inc	r25
    2818:	f6 95       	lsr	r31
    281a:	87 95       	ror	r24
    281c:	77 95       	ror	r23
    281e:	67 95       	ror	r22
    2820:	b7 95       	ror	r27
    2822:	f1 11       	cpse	r31, r1
    2824:	f8 cf       	rjmp	.-16     	; 0x2816 <__floatsisf+0x1c>
    2826:	fa f4       	brpl	.+62     	; 0x2866 <__floatsisf+0x6c>
    2828:	bb 0f       	add	r27, r27
    282a:	11 f4       	brne	.+4      	; 0x2830 <__floatsisf+0x36>
    282c:	60 ff       	sbrs	r22, 0
    282e:	1b c0       	rjmp	.+54     	; 0x2866 <__floatsisf+0x6c>
    2830:	6f 5f       	subi	r22, 0xFF	; 255
    2832:	7f 4f       	sbci	r23, 0xFF	; 255
    2834:	8f 4f       	sbci	r24, 0xFF	; 255
    2836:	9f 4f       	sbci	r25, 0xFF	; 255
    2838:	16 c0       	rjmp	.+44     	; 0x2866 <__floatsisf+0x6c>
    283a:	88 23       	and	r24, r24
    283c:	11 f0       	breq	.+4      	; 0x2842 <__floatsisf+0x48>
    283e:	96 e9       	ldi	r25, 0x96	; 150
    2840:	11 c0       	rjmp	.+34     	; 0x2864 <__floatsisf+0x6a>
    2842:	77 23       	and	r23, r23
    2844:	21 f0       	breq	.+8      	; 0x284e <__floatsisf+0x54>
    2846:	9e e8       	ldi	r25, 0x8E	; 142
    2848:	87 2f       	mov	r24, r23
    284a:	76 2f       	mov	r23, r22
    284c:	05 c0       	rjmp	.+10     	; 0x2858 <__floatsisf+0x5e>
    284e:	66 23       	and	r22, r22
    2850:	71 f0       	breq	.+28     	; 0x286e <__floatsisf+0x74>
    2852:	96 e8       	ldi	r25, 0x86	; 134
    2854:	86 2f       	mov	r24, r22
    2856:	70 e0       	ldi	r23, 0x00	; 0
    2858:	60 e0       	ldi	r22, 0x00	; 0
    285a:	2a f0       	brmi	.+10     	; 0x2866 <__floatsisf+0x6c>
    285c:	9a 95       	dec	r25
    285e:	66 0f       	add	r22, r22
    2860:	77 1f       	adc	r23, r23
    2862:	88 1f       	adc	r24, r24
    2864:	da f7       	brpl	.-10     	; 0x285c <__floatsisf+0x62>
    2866:	88 0f       	add	r24, r24
    2868:	96 95       	lsr	r25
    286a:	87 95       	ror	r24
    286c:	97 f9       	bld	r25, 7
    286e:	08 95       	ret

00002870 <__fp_cmp>:
    2870:	99 0f       	add	r25, r25
    2872:	00 08       	sbc	r0, r0
    2874:	55 0f       	add	r21, r21
    2876:	aa 0b       	sbc	r26, r26
    2878:	e0 e8       	ldi	r30, 0x80	; 128
    287a:	fe ef       	ldi	r31, 0xFE	; 254
    287c:	16 16       	cp	r1, r22
    287e:	17 06       	cpc	r1, r23
    2880:	e8 07       	cpc	r30, r24
    2882:	f9 07       	cpc	r31, r25
    2884:	c0 f0       	brcs	.+48     	; 0x28b6 <__fp_cmp+0x46>
    2886:	12 16       	cp	r1, r18
    2888:	13 06       	cpc	r1, r19
    288a:	e4 07       	cpc	r30, r20
    288c:	f5 07       	cpc	r31, r21
    288e:	98 f0       	brcs	.+38     	; 0x28b6 <__fp_cmp+0x46>
    2890:	62 1b       	sub	r22, r18
    2892:	73 0b       	sbc	r23, r19
    2894:	84 0b       	sbc	r24, r20
    2896:	95 0b       	sbc	r25, r21
    2898:	39 f4       	brne	.+14     	; 0x28a8 <__fp_cmp+0x38>
    289a:	0a 26       	eor	r0, r26
    289c:	61 f0       	breq	.+24     	; 0x28b6 <__fp_cmp+0x46>
    289e:	23 2b       	or	r18, r19
    28a0:	24 2b       	or	r18, r20
    28a2:	25 2b       	or	r18, r21
    28a4:	21 f4       	brne	.+8      	; 0x28ae <__fp_cmp+0x3e>
    28a6:	08 95       	ret
    28a8:	0a 26       	eor	r0, r26
    28aa:	09 f4       	brne	.+2      	; 0x28ae <__fp_cmp+0x3e>
    28ac:	a1 40       	sbci	r26, 0x01	; 1
    28ae:	a6 95       	lsr	r26
    28b0:	8f ef       	ldi	r24, 0xFF	; 255
    28b2:	81 1d       	adc	r24, r1
    28b4:	81 1d       	adc	r24, r1
    28b6:	08 95       	ret

000028b8 <__gesf2>:
    28b8:	0e 94 38 14 	call	0x2870	; 0x2870 <__fp_cmp>
    28bc:	08 f4       	brcc	.+2      	; 0x28c0 <__gesf2+0x8>
    28be:	8f ef       	ldi	r24, 0xFF	; 255
    28c0:	08 95       	ret

000028c2 <__udivmodhi4>:
    28c2:	aa 1b       	sub	r26, r26
    28c4:	bb 1b       	sub	r27, r27
    28c6:	51 e1       	ldi	r21, 0x11	; 17
    28c8:	07 c0       	rjmp	.+14     	; 0x28d8 <__udivmodhi4_ep>

000028ca <__udivmodhi4_loop>:
    28ca:	aa 1f       	adc	r26, r26
    28cc:	bb 1f       	adc	r27, r27
    28ce:	a6 17       	cp	r26, r22
    28d0:	b7 07       	cpc	r27, r23
    28d2:	10 f0       	brcs	.+4      	; 0x28d8 <__udivmodhi4_ep>
    28d4:	a6 1b       	sub	r26, r22
    28d6:	b7 0b       	sbc	r27, r23

000028d8 <__udivmodhi4_ep>:
    28d8:	88 1f       	adc	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	5a 95       	dec	r21
    28de:	a9 f7       	brne	.-22     	; 0x28ca <__udivmodhi4_loop>
    28e0:	80 95       	com	r24
    28e2:	90 95       	com	r25
    28e4:	bc 01       	movw	r22, r24
    28e6:	cd 01       	movw	r24, r26
    28e8:	08 95       	ret

000028ea <__udivmodsi4>:
    28ea:	a1 e2       	ldi	r26, 0x21	; 33
    28ec:	1a 2e       	mov	r1, r26
    28ee:	aa 1b       	sub	r26, r26
    28f0:	bb 1b       	sub	r27, r27
    28f2:	fd 01       	movw	r30, r26
    28f4:	0d c0       	rjmp	.+26     	; 0x2910 <__udivmodsi4_ep>

000028f6 <__udivmodsi4_loop>:
    28f6:	aa 1f       	adc	r26, r26
    28f8:	bb 1f       	adc	r27, r27
    28fa:	ee 1f       	adc	r30, r30
    28fc:	ff 1f       	adc	r31, r31
    28fe:	a2 17       	cp	r26, r18
    2900:	b3 07       	cpc	r27, r19
    2902:	e4 07       	cpc	r30, r20
    2904:	f5 07       	cpc	r31, r21
    2906:	20 f0       	brcs	.+8      	; 0x2910 <__udivmodsi4_ep>
    2908:	a2 1b       	sub	r26, r18
    290a:	b3 0b       	sbc	r27, r19
    290c:	e4 0b       	sbc	r30, r20
    290e:	f5 0b       	sbc	r31, r21

00002910 <__udivmodsi4_ep>:
    2910:	66 1f       	adc	r22, r22
    2912:	77 1f       	adc	r23, r23
    2914:	88 1f       	adc	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	1a 94       	dec	r1
    291a:	69 f7       	brne	.-38     	; 0x28f6 <__udivmodsi4_loop>
    291c:	60 95       	com	r22
    291e:	70 95       	com	r23
    2920:	80 95       	com	r24
    2922:	90 95       	com	r25
    2924:	9b 01       	movw	r18, r22
    2926:	ac 01       	movw	r20, r24
    2928:	bd 01       	movw	r22, r26
    292a:	cf 01       	movw	r24, r30
    292c:	08 95       	ret

0000292e <snprintf>:
    292e:	ae e0       	ldi	r26, 0x0E	; 14
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	ed e9       	ldi	r30, 0x9D	; 157
    2934:	f4 e1       	ldi	r31, 0x14	; 20
    2936:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__prologue_saves__+0x1c>
    293a:	0d 89       	ldd	r16, Y+21	; 0x15
    293c:	1e 89       	ldd	r17, Y+22	; 0x16
    293e:	8f 89       	ldd	r24, Y+23	; 0x17
    2940:	98 8d       	ldd	r25, Y+24	; 0x18
    2942:	26 e0       	ldi	r18, 0x06	; 6
    2944:	2c 83       	std	Y+4, r18	; 0x04
    2946:	1a 83       	std	Y+2, r17	; 0x02
    2948:	09 83       	std	Y+1, r16	; 0x01
    294a:	97 ff       	sbrs	r25, 7
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <snprintf+0x24>
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e8       	ldi	r25, 0x80	; 128
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	9e 83       	std	Y+6, r25	; 0x06
    2956:	8d 83       	std	Y+5, r24	; 0x05
    2958:	ae 01       	movw	r20, r28
    295a:	45 5e       	subi	r20, 0xE5	; 229
    295c:	5f 4f       	sbci	r21, 0xFF	; 255
    295e:	69 8d       	ldd	r22, Y+25	; 0x19
    2960:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2962:	ce 01       	movw	r24, r28
    2964:	01 96       	adiw	r24, 0x01	; 1
    2966:	0e 94 c7 14 	call	0x298e	; 0x298e <vfprintf>
    296a:	4d 81       	ldd	r20, Y+5	; 0x05
    296c:	5e 81       	ldd	r21, Y+6	; 0x06
    296e:	57 fd       	sbrc	r21, 7
    2970:	0a c0       	rjmp	.+20     	; 0x2986 <snprintf+0x58>
    2972:	2f 81       	ldd	r18, Y+7	; 0x07
    2974:	38 85       	ldd	r19, Y+8	; 0x08
    2976:	42 17       	cp	r20, r18
    2978:	53 07       	cpc	r21, r19
    297a:	0c f4       	brge	.+2      	; 0x297e <snprintf+0x50>
    297c:	9a 01       	movw	r18, r20
    297e:	f8 01       	movw	r30, r16
    2980:	e2 0f       	add	r30, r18
    2982:	f3 1f       	adc	r31, r19
    2984:	10 82       	st	Z, r1
    2986:	2e 96       	adiw	r28, 0x0e	; 14
    2988:	e4 e0       	ldi	r30, 0x04	; 4
    298a:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__epilogue_restores__+0x1c>

0000298e <vfprintf>:
    298e:	ab e0       	ldi	r26, 0x0B	; 11
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	ed ec       	ldi	r30, 0xCD	; 205
    2994:	f4 e1       	ldi	r31, 0x14	; 20
    2996:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__prologue_saves__>
    299a:	6c 01       	movw	r12, r24
    299c:	7b 01       	movw	r14, r22
    299e:	8a 01       	movw	r16, r20
    29a0:	fc 01       	movw	r30, r24
    29a2:	17 82       	std	Z+7, r1	; 0x07
    29a4:	16 82       	std	Z+6, r1	; 0x06
    29a6:	83 81       	ldd	r24, Z+3	; 0x03
    29a8:	81 ff       	sbrs	r24, 1
    29aa:	cc c1       	rjmp	.+920    	; 0x2d44 <vfprintf+0x3b6>
    29ac:	ce 01       	movw	r24, r28
    29ae:	01 96       	adiw	r24, 0x01	; 1
    29b0:	3c 01       	movw	r6, r24
    29b2:	f6 01       	movw	r30, r12
    29b4:	93 81       	ldd	r25, Z+3	; 0x03
    29b6:	f7 01       	movw	r30, r14
    29b8:	93 fd       	sbrc	r25, 3
    29ba:	85 91       	lpm	r24, Z+
    29bc:	93 ff       	sbrs	r25, 3
    29be:	81 91       	ld	r24, Z+
    29c0:	7f 01       	movw	r14, r30
    29c2:	88 23       	and	r24, r24
    29c4:	09 f4       	brne	.+2      	; 0x29c8 <vfprintf+0x3a>
    29c6:	ba c1       	rjmp	.+884    	; 0x2d3c <vfprintf+0x3ae>
    29c8:	85 32       	cpi	r24, 0x25	; 37
    29ca:	39 f4       	brne	.+14     	; 0x29da <vfprintf+0x4c>
    29cc:	93 fd       	sbrc	r25, 3
    29ce:	85 91       	lpm	r24, Z+
    29d0:	93 ff       	sbrs	r25, 3
    29d2:	81 91       	ld	r24, Z+
    29d4:	7f 01       	movw	r14, r30
    29d6:	85 32       	cpi	r24, 0x25	; 37
    29d8:	29 f4       	brne	.+10     	; 0x29e4 <vfprintf+0x56>
    29da:	b6 01       	movw	r22, r12
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <fputc>
    29e2:	e7 cf       	rjmp	.-50     	; 0x29b2 <vfprintf+0x24>
    29e4:	91 2c       	mov	r9, r1
    29e6:	21 2c       	mov	r2, r1
    29e8:	31 2c       	mov	r3, r1
    29ea:	ff e1       	ldi	r31, 0x1F	; 31
    29ec:	f3 15       	cp	r31, r3
    29ee:	d8 f0       	brcs	.+54     	; 0x2a26 <vfprintf+0x98>
    29f0:	8b 32       	cpi	r24, 0x2B	; 43
    29f2:	79 f0       	breq	.+30     	; 0x2a12 <vfprintf+0x84>
    29f4:	38 f4       	brcc	.+14     	; 0x2a04 <vfprintf+0x76>
    29f6:	80 32       	cpi	r24, 0x20	; 32
    29f8:	79 f0       	breq	.+30     	; 0x2a18 <vfprintf+0x8a>
    29fa:	83 32       	cpi	r24, 0x23	; 35
    29fc:	a1 f4       	brne	.+40     	; 0x2a26 <vfprintf+0x98>
    29fe:	23 2d       	mov	r18, r3
    2a00:	20 61       	ori	r18, 0x10	; 16
    2a02:	1d c0       	rjmp	.+58     	; 0x2a3e <vfprintf+0xb0>
    2a04:	8d 32       	cpi	r24, 0x2D	; 45
    2a06:	61 f0       	breq	.+24     	; 0x2a20 <vfprintf+0x92>
    2a08:	80 33       	cpi	r24, 0x30	; 48
    2a0a:	69 f4       	brne	.+26     	; 0x2a26 <vfprintf+0x98>
    2a0c:	23 2d       	mov	r18, r3
    2a0e:	21 60       	ori	r18, 0x01	; 1
    2a10:	16 c0       	rjmp	.+44     	; 0x2a3e <vfprintf+0xb0>
    2a12:	83 2d       	mov	r24, r3
    2a14:	82 60       	ori	r24, 0x02	; 2
    2a16:	38 2e       	mov	r3, r24
    2a18:	e3 2d       	mov	r30, r3
    2a1a:	e4 60       	ori	r30, 0x04	; 4
    2a1c:	3e 2e       	mov	r3, r30
    2a1e:	2a c0       	rjmp	.+84     	; 0x2a74 <vfprintf+0xe6>
    2a20:	f3 2d       	mov	r31, r3
    2a22:	f8 60       	ori	r31, 0x08	; 8
    2a24:	1d c0       	rjmp	.+58     	; 0x2a60 <vfprintf+0xd2>
    2a26:	37 fc       	sbrc	r3, 7
    2a28:	2d c0       	rjmp	.+90     	; 0x2a84 <vfprintf+0xf6>
    2a2a:	20 ed       	ldi	r18, 0xD0	; 208
    2a2c:	28 0f       	add	r18, r24
    2a2e:	2a 30       	cpi	r18, 0x0A	; 10
    2a30:	40 f0       	brcs	.+16     	; 0x2a42 <vfprintf+0xb4>
    2a32:	8e 32       	cpi	r24, 0x2E	; 46
    2a34:	b9 f4       	brne	.+46     	; 0x2a64 <vfprintf+0xd6>
    2a36:	36 fc       	sbrc	r3, 6
    2a38:	81 c1       	rjmp	.+770    	; 0x2d3c <vfprintf+0x3ae>
    2a3a:	23 2d       	mov	r18, r3
    2a3c:	20 64       	ori	r18, 0x40	; 64
    2a3e:	32 2e       	mov	r3, r18
    2a40:	19 c0       	rjmp	.+50     	; 0x2a74 <vfprintf+0xe6>
    2a42:	36 fe       	sbrs	r3, 6
    2a44:	06 c0       	rjmp	.+12     	; 0x2a52 <vfprintf+0xc4>
    2a46:	8a e0       	ldi	r24, 0x0A	; 10
    2a48:	98 9e       	mul	r9, r24
    2a4a:	20 0d       	add	r18, r0
    2a4c:	11 24       	eor	r1, r1
    2a4e:	92 2e       	mov	r9, r18
    2a50:	11 c0       	rjmp	.+34     	; 0x2a74 <vfprintf+0xe6>
    2a52:	ea e0       	ldi	r30, 0x0A	; 10
    2a54:	2e 9e       	mul	r2, r30
    2a56:	20 0d       	add	r18, r0
    2a58:	11 24       	eor	r1, r1
    2a5a:	22 2e       	mov	r2, r18
    2a5c:	f3 2d       	mov	r31, r3
    2a5e:	f0 62       	ori	r31, 0x20	; 32
    2a60:	3f 2e       	mov	r3, r31
    2a62:	08 c0       	rjmp	.+16     	; 0x2a74 <vfprintf+0xe6>
    2a64:	8c 36       	cpi	r24, 0x6C	; 108
    2a66:	21 f4       	brne	.+8      	; 0x2a70 <vfprintf+0xe2>
    2a68:	83 2d       	mov	r24, r3
    2a6a:	80 68       	ori	r24, 0x80	; 128
    2a6c:	38 2e       	mov	r3, r24
    2a6e:	02 c0       	rjmp	.+4      	; 0x2a74 <vfprintf+0xe6>
    2a70:	88 36       	cpi	r24, 0x68	; 104
    2a72:	41 f4       	brne	.+16     	; 0x2a84 <vfprintf+0xf6>
    2a74:	f7 01       	movw	r30, r14
    2a76:	93 fd       	sbrc	r25, 3
    2a78:	85 91       	lpm	r24, Z+
    2a7a:	93 ff       	sbrs	r25, 3
    2a7c:	81 91       	ld	r24, Z+
    2a7e:	7f 01       	movw	r14, r30
    2a80:	81 11       	cpse	r24, r1
    2a82:	b3 cf       	rjmp	.-154    	; 0x29ea <vfprintf+0x5c>
    2a84:	98 2f       	mov	r25, r24
    2a86:	9f 7d       	andi	r25, 0xDF	; 223
    2a88:	95 54       	subi	r25, 0x45	; 69
    2a8a:	93 30       	cpi	r25, 0x03	; 3
    2a8c:	28 f4       	brcc	.+10     	; 0x2a98 <vfprintf+0x10a>
    2a8e:	0c 5f       	subi	r16, 0xFC	; 252
    2a90:	1f 4f       	sbci	r17, 0xFF	; 255
    2a92:	9f e3       	ldi	r25, 0x3F	; 63
    2a94:	99 83       	std	Y+1, r25	; 0x01
    2a96:	0d c0       	rjmp	.+26     	; 0x2ab2 <vfprintf+0x124>
    2a98:	83 36       	cpi	r24, 0x63	; 99
    2a9a:	31 f0       	breq	.+12     	; 0x2aa8 <vfprintf+0x11a>
    2a9c:	83 37       	cpi	r24, 0x73	; 115
    2a9e:	71 f0       	breq	.+28     	; 0x2abc <vfprintf+0x12e>
    2aa0:	83 35       	cpi	r24, 0x53	; 83
    2aa2:	09 f0       	breq	.+2      	; 0x2aa6 <vfprintf+0x118>
    2aa4:	59 c0       	rjmp	.+178    	; 0x2b58 <vfprintf+0x1ca>
    2aa6:	21 c0       	rjmp	.+66     	; 0x2aea <vfprintf+0x15c>
    2aa8:	f8 01       	movw	r30, r16
    2aaa:	80 81       	ld	r24, Z
    2aac:	89 83       	std	Y+1, r24	; 0x01
    2aae:	0e 5f       	subi	r16, 0xFE	; 254
    2ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab2:	88 24       	eor	r8, r8
    2ab4:	83 94       	inc	r8
    2ab6:	91 2c       	mov	r9, r1
    2ab8:	53 01       	movw	r10, r6
    2aba:	13 c0       	rjmp	.+38     	; 0x2ae2 <vfprintf+0x154>
    2abc:	28 01       	movw	r4, r16
    2abe:	f2 e0       	ldi	r31, 0x02	; 2
    2ac0:	4f 0e       	add	r4, r31
    2ac2:	51 1c       	adc	r5, r1
    2ac4:	f8 01       	movw	r30, r16
    2ac6:	a0 80       	ld	r10, Z
    2ac8:	b1 80       	ldd	r11, Z+1	; 0x01
    2aca:	36 fe       	sbrs	r3, 6
    2acc:	03 c0       	rjmp	.+6      	; 0x2ad4 <vfprintf+0x146>
    2ace:	69 2d       	mov	r22, r9
    2ad0:	70 e0       	ldi	r23, 0x00	; 0
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <vfprintf+0x14a>
    2ad4:	6f ef       	ldi	r22, 0xFF	; 255
    2ad6:	7f ef       	ldi	r23, 0xFF	; 255
    2ad8:	c5 01       	movw	r24, r10
    2ada:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <strnlen>
    2ade:	4c 01       	movw	r8, r24
    2ae0:	82 01       	movw	r16, r4
    2ae2:	f3 2d       	mov	r31, r3
    2ae4:	ff 77       	andi	r31, 0x7F	; 127
    2ae6:	3f 2e       	mov	r3, r31
    2ae8:	16 c0       	rjmp	.+44     	; 0x2b16 <vfprintf+0x188>
    2aea:	28 01       	movw	r4, r16
    2aec:	22 e0       	ldi	r18, 0x02	; 2
    2aee:	42 0e       	add	r4, r18
    2af0:	51 1c       	adc	r5, r1
    2af2:	f8 01       	movw	r30, r16
    2af4:	a0 80       	ld	r10, Z
    2af6:	b1 80       	ldd	r11, Z+1	; 0x01
    2af8:	36 fe       	sbrs	r3, 6
    2afa:	03 c0       	rjmp	.+6      	; 0x2b02 <vfprintf+0x174>
    2afc:	69 2d       	mov	r22, r9
    2afe:	70 e0       	ldi	r23, 0x00	; 0
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <vfprintf+0x178>
    2b02:	6f ef       	ldi	r22, 0xFF	; 255
    2b04:	7f ef       	ldi	r23, 0xFF	; 255
    2b06:	c5 01       	movw	r24, r10
    2b08:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <strnlen_P>
    2b0c:	4c 01       	movw	r8, r24
    2b0e:	f3 2d       	mov	r31, r3
    2b10:	f0 68       	ori	r31, 0x80	; 128
    2b12:	3f 2e       	mov	r3, r31
    2b14:	82 01       	movw	r16, r4
    2b16:	33 fc       	sbrc	r3, 3
    2b18:	1b c0       	rjmp	.+54     	; 0x2b50 <vfprintf+0x1c2>
    2b1a:	82 2d       	mov	r24, r2
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	88 16       	cp	r8, r24
    2b20:	99 06       	cpc	r9, r25
    2b22:	b0 f4       	brcc	.+44     	; 0x2b50 <vfprintf+0x1c2>
    2b24:	b6 01       	movw	r22, r12
    2b26:	80 e2       	ldi	r24, 0x20	; 32
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <fputc>
    2b2e:	2a 94       	dec	r2
    2b30:	f4 cf       	rjmp	.-24     	; 0x2b1a <vfprintf+0x18c>
    2b32:	f5 01       	movw	r30, r10
    2b34:	37 fc       	sbrc	r3, 7
    2b36:	85 91       	lpm	r24, Z+
    2b38:	37 fe       	sbrs	r3, 7
    2b3a:	81 91       	ld	r24, Z+
    2b3c:	5f 01       	movw	r10, r30
    2b3e:	b6 01       	movw	r22, r12
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <fputc>
    2b46:	21 10       	cpse	r2, r1
    2b48:	2a 94       	dec	r2
    2b4a:	21 e0       	ldi	r18, 0x01	; 1
    2b4c:	82 1a       	sub	r8, r18
    2b4e:	91 08       	sbc	r9, r1
    2b50:	81 14       	cp	r8, r1
    2b52:	91 04       	cpc	r9, r1
    2b54:	71 f7       	brne	.-36     	; 0x2b32 <vfprintf+0x1a4>
    2b56:	e8 c0       	rjmp	.+464    	; 0x2d28 <vfprintf+0x39a>
    2b58:	84 36       	cpi	r24, 0x64	; 100
    2b5a:	11 f0       	breq	.+4      	; 0x2b60 <vfprintf+0x1d2>
    2b5c:	89 36       	cpi	r24, 0x69	; 105
    2b5e:	41 f5       	brne	.+80     	; 0x2bb0 <vfprintf+0x222>
    2b60:	f8 01       	movw	r30, r16
    2b62:	37 fe       	sbrs	r3, 7
    2b64:	07 c0       	rjmp	.+14     	; 0x2b74 <vfprintf+0x1e6>
    2b66:	60 81       	ld	r22, Z
    2b68:	71 81       	ldd	r23, Z+1	; 0x01
    2b6a:	82 81       	ldd	r24, Z+2	; 0x02
    2b6c:	93 81       	ldd	r25, Z+3	; 0x03
    2b6e:	0c 5f       	subi	r16, 0xFC	; 252
    2b70:	1f 4f       	sbci	r17, 0xFF	; 255
    2b72:	08 c0       	rjmp	.+16     	; 0x2b84 <vfprintf+0x1f6>
    2b74:	60 81       	ld	r22, Z
    2b76:	71 81       	ldd	r23, Z+1	; 0x01
    2b78:	07 2e       	mov	r0, r23
    2b7a:	00 0c       	add	r0, r0
    2b7c:	88 0b       	sbc	r24, r24
    2b7e:	99 0b       	sbc	r25, r25
    2b80:	0e 5f       	subi	r16, 0xFE	; 254
    2b82:	1f 4f       	sbci	r17, 0xFF	; 255
    2b84:	f3 2d       	mov	r31, r3
    2b86:	ff 76       	andi	r31, 0x6F	; 111
    2b88:	3f 2e       	mov	r3, r31
    2b8a:	97 ff       	sbrs	r25, 7
    2b8c:	09 c0       	rjmp	.+18     	; 0x2ba0 <vfprintf+0x212>
    2b8e:	90 95       	com	r25
    2b90:	80 95       	com	r24
    2b92:	70 95       	com	r23
    2b94:	61 95       	neg	r22
    2b96:	7f 4f       	sbci	r23, 0xFF	; 255
    2b98:	8f 4f       	sbci	r24, 0xFF	; 255
    2b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9c:	f0 68       	ori	r31, 0x80	; 128
    2b9e:	3f 2e       	mov	r3, r31
    2ba0:	2a e0       	ldi	r18, 0x0A	; 10
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	a3 01       	movw	r20, r6
    2ba6:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <__ultoa_invert>
    2baa:	88 2e       	mov	r8, r24
    2bac:	86 18       	sub	r8, r6
    2bae:	45 c0       	rjmp	.+138    	; 0x2c3a <vfprintf+0x2ac>
    2bb0:	85 37       	cpi	r24, 0x75	; 117
    2bb2:	31 f4       	brne	.+12     	; 0x2bc0 <vfprintf+0x232>
    2bb4:	23 2d       	mov	r18, r3
    2bb6:	2f 7e       	andi	r18, 0xEF	; 239
    2bb8:	b2 2e       	mov	r11, r18
    2bba:	2a e0       	ldi	r18, 0x0A	; 10
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	25 c0       	rjmp	.+74     	; 0x2c0a <vfprintf+0x27c>
    2bc0:	93 2d       	mov	r25, r3
    2bc2:	99 7f       	andi	r25, 0xF9	; 249
    2bc4:	b9 2e       	mov	r11, r25
    2bc6:	8f 36       	cpi	r24, 0x6F	; 111
    2bc8:	c1 f0       	breq	.+48     	; 0x2bfa <vfprintf+0x26c>
    2bca:	18 f4       	brcc	.+6      	; 0x2bd2 <vfprintf+0x244>
    2bcc:	88 35       	cpi	r24, 0x58	; 88
    2bce:	79 f0       	breq	.+30     	; 0x2bee <vfprintf+0x260>
    2bd0:	b5 c0       	rjmp	.+362    	; 0x2d3c <vfprintf+0x3ae>
    2bd2:	80 37       	cpi	r24, 0x70	; 112
    2bd4:	19 f0       	breq	.+6      	; 0x2bdc <vfprintf+0x24e>
    2bd6:	88 37       	cpi	r24, 0x78	; 120
    2bd8:	21 f0       	breq	.+8      	; 0x2be2 <vfprintf+0x254>
    2bda:	b0 c0       	rjmp	.+352    	; 0x2d3c <vfprintf+0x3ae>
    2bdc:	e9 2f       	mov	r30, r25
    2bde:	e0 61       	ori	r30, 0x10	; 16
    2be0:	be 2e       	mov	r11, r30
    2be2:	b4 fe       	sbrs	r11, 4
    2be4:	0d c0       	rjmp	.+26     	; 0x2c00 <vfprintf+0x272>
    2be6:	fb 2d       	mov	r31, r11
    2be8:	f4 60       	ori	r31, 0x04	; 4
    2bea:	bf 2e       	mov	r11, r31
    2bec:	09 c0       	rjmp	.+18     	; 0x2c00 <vfprintf+0x272>
    2bee:	34 fe       	sbrs	r3, 4
    2bf0:	0a c0       	rjmp	.+20     	; 0x2c06 <vfprintf+0x278>
    2bf2:	29 2f       	mov	r18, r25
    2bf4:	26 60       	ori	r18, 0x06	; 6
    2bf6:	b2 2e       	mov	r11, r18
    2bf8:	06 c0       	rjmp	.+12     	; 0x2c06 <vfprintf+0x278>
    2bfa:	28 e0       	ldi	r18, 0x08	; 8
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	05 c0       	rjmp	.+10     	; 0x2c0a <vfprintf+0x27c>
    2c00:	20 e1       	ldi	r18, 0x10	; 16
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <vfprintf+0x27c>
    2c06:	20 e1       	ldi	r18, 0x10	; 16
    2c08:	32 e0       	ldi	r19, 0x02	; 2
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	b7 fe       	sbrs	r11, 7
    2c0e:	07 c0       	rjmp	.+14     	; 0x2c1e <vfprintf+0x290>
    2c10:	60 81       	ld	r22, Z
    2c12:	71 81       	ldd	r23, Z+1	; 0x01
    2c14:	82 81       	ldd	r24, Z+2	; 0x02
    2c16:	93 81       	ldd	r25, Z+3	; 0x03
    2c18:	0c 5f       	subi	r16, 0xFC	; 252
    2c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c1c:	06 c0       	rjmp	.+12     	; 0x2c2a <vfprintf+0x29c>
    2c1e:	60 81       	ld	r22, Z
    2c20:	71 81       	ldd	r23, Z+1	; 0x01
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	0e 5f       	subi	r16, 0xFE	; 254
    2c28:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2a:	a3 01       	movw	r20, r6
    2c2c:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <__ultoa_invert>
    2c30:	88 2e       	mov	r8, r24
    2c32:	86 18       	sub	r8, r6
    2c34:	fb 2d       	mov	r31, r11
    2c36:	ff 77       	andi	r31, 0x7F	; 127
    2c38:	3f 2e       	mov	r3, r31
    2c3a:	36 fe       	sbrs	r3, 6
    2c3c:	0d c0       	rjmp	.+26     	; 0x2c58 <vfprintf+0x2ca>
    2c3e:	23 2d       	mov	r18, r3
    2c40:	2e 7f       	andi	r18, 0xFE	; 254
    2c42:	a2 2e       	mov	r10, r18
    2c44:	89 14       	cp	r8, r9
    2c46:	58 f4       	brcc	.+22     	; 0x2c5e <vfprintf+0x2d0>
    2c48:	34 fe       	sbrs	r3, 4
    2c4a:	0b c0       	rjmp	.+22     	; 0x2c62 <vfprintf+0x2d4>
    2c4c:	32 fc       	sbrc	r3, 2
    2c4e:	09 c0       	rjmp	.+18     	; 0x2c62 <vfprintf+0x2d4>
    2c50:	83 2d       	mov	r24, r3
    2c52:	8e 7e       	andi	r24, 0xEE	; 238
    2c54:	a8 2e       	mov	r10, r24
    2c56:	05 c0       	rjmp	.+10     	; 0x2c62 <vfprintf+0x2d4>
    2c58:	b8 2c       	mov	r11, r8
    2c5a:	a3 2c       	mov	r10, r3
    2c5c:	03 c0       	rjmp	.+6      	; 0x2c64 <vfprintf+0x2d6>
    2c5e:	b8 2c       	mov	r11, r8
    2c60:	01 c0       	rjmp	.+2      	; 0x2c64 <vfprintf+0x2d6>
    2c62:	b9 2c       	mov	r11, r9
    2c64:	a4 fe       	sbrs	r10, 4
    2c66:	0f c0       	rjmp	.+30     	; 0x2c86 <vfprintf+0x2f8>
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e8 0d       	add	r30, r8
    2c6c:	f1 1d       	adc	r31, r1
    2c6e:	80 81       	ld	r24, Z
    2c70:	80 33       	cpi	r24, 0x30	; 48
    2c72:	21 f4       	brne	.+8      	; 0x2c7c <vfprintf+0x2ee>
    2c74:	9a 2d       	mov	r25, r10
    2c76:	99 7e       	andi	r25, 0xE9	; 233
    2c78:	a9 2e       	mov	r10, r25
    2c7a:	09 c0       	rjmp	.+18     	; 0x2c8e <vfprintf+0x300>
    2c7c:	a2 fe       	sbrs	r10, 2
    2c7e:	06 c0       	rjmp	.+12     	; 0x2c8c <vfprintf+0x2fe>
    2c80:	b3 94       	inc	r11
    2c82:	b3 94       	inc	r11
    2c84:	04 c0       	rjmp	.+8      	; 0x2c8e <vfprintf+0x300>
    2c86:	8a 2d       	mov	r24, r10
    2c88:	86 78       	andi	r24, 0x86	; 134
    2c8a:	09 f0       	breq	.+2      	; 0x2c8e <vfprintf+0x300>
    2c8c:	b3 94       	inc	r11
    2c8e:	a3 fc       	sbrc	r10, 3
    2c90:	11 c0       	rjmp	.+34     	; 0x2cb4 <vfprintf+0x326>
    2c92:	a0 fe       	sbrs	r10, 0
    2c94:	06 c0       	rjmp	.+12     	; 0x2ca2 <vfprintf+0x314>
    2c96:	b2 14       	cp	r11, r2
    2c98:	88 f4       	brcc	.+34     	; 0x2cbc <vfprintf+0x32e>
    2c9a:	28 0c       	add	r2, r8
    2c9c:	92 2c       	mov	r9, r2
    2c9e:	9b 18       	sub	r9, r11
    2ca0:	0e c0       	rjmp	.+28     	; 0x2cbe <vfprintf+0x330>
    2ca2:	b2 14       	cp	r11, r2
    2ca4:	60 f4       	brcc	.+24     	; 0x2cbe <vfprintf+0x330>
    2ca6:	b6 01       	movw	r22, r12
    2ca8:	80 e2       	ldi	r24, 0x20	; 32
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <fputc>
    2cb0:	b3 94       	inc	r11
    2cb2:	f7 cf       	rjmp	.-18     	; 0x2ca2 <vfprintf+0x314>
    2cb4:	b2 14       	cp	r11, r2
    2cb6:	18 f4       	brcc	.+6      	; 0x2cbe <vfprintf+0x330>
    2cb8:	2b 18       	sub	r2, r11
    2cba:	02 c0       	rjmp	.+4      	; 0x2cc0 <vfprintf+0x332>
    2cbc:	98 2c       	mov	r9, r8
    2cbe:	21 2c       	mov	r2, r1
    2cc0:	a4 fe       	sbrs	r10, 4
    2cc2:	10 c0       	rjmp	.+32     	; 0x2ce4 <vfprintf+0x356>
    2cc4:	b6 01       	movw	r22, r12
    2cc6:	80 e3       	ldi	r24, 0x30	; 48
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <fputc>
    2cce:	a2 fe       	sbrs	r10, 2
    2cd0:	17 c0       	rjmp	.+46     	; 0x2d00 <vfprintf+0x372>
    2cd2:	a1 fc       	sbrc	r10, 1
    2cd4:	03 c0       	rjmp	.+6      	; 0x2cdc <vfprintf+0x34e>
    2cd6:	88 e7       	ldi	r24, 0x78	; 120
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	02 c0       	rjmp	.+4      	; 0x2ce0 <vfprintf+0x352>
    2cdc:	88 e5       	ldi	r24, 0x58	; 88
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	b6 01       	movw	r22, r12
    2ce2:	0c c0       	rjmp	.+24     	; 0x2cfc <vfprintf+0x36e>
    2ce4:	8a 2d       	mov	r24, r10
    2ce6:	86 78       	andi	r24, 0x86	; 134
    2ce8:	59 f0       	breq	.+22     	; 0x2d00 <vfprintf+0x372>
    2cea:	a1 fe       	sbrs	r10, 1
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <vfprintf+0x364>
    2cee:	8b e2       	ldi	r24, 0x2B	; 43
    2cf0:	01 c0       	rjmp	.+2      	; 0x2cf4 <vfprintf+0x366>
    2cf2:	80 e2       	ldi	r24, 0x20	; 32
    2cf4:	a7 fc       	sbrc	r10, 7
    2cf6:	8d e2       	ldi	r24, 0x2D	; 45
    2cf8:	b6 01       	movw	r22, r12
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <fputc>
    2d00:	89 14       	cp	r8, r9
    2d02:	38 f4       	brcc	.+14     	; 0x2d12 <vfprintf+0x384>
    2d04:	b6 01       	movw	r22, r12
    2d06:	80 e3       	ldi	r24, 0x30	; 48
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <fputc>
    2d0e:	9a 94       	dec	r9
    2d10:	f7 cf       	rjmp	.-18     	; 0x2d00 <vfprintf+0x372>
    2d12:	8a 94       	dec	r8
    2d14:	f3 01       	movw	r30, r6
    2d16:	e8 0d       	add	r30, r8
    2d18:	f1 1d       	adc	r31, r1
    2d1a:	80 81       	ld	r24, Z
    2d1c:	b6 01       	movw	r22, r12
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <fputc>
    2d24:	81 10       	cpse	r8, r1
    2d26:	f5 cf       	rjmp	.-22     	; 0x2d12 <vfprintf+0x384>
    2d28:	22 20       	and	r2, r2
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <vfprintf+0x3a0>
    2d2c:	42 ce       	rjmp	.-892    	; 0x29b2 <vfprintf+0x24>
    2d2e:	b6 01       	movw	r22, r12
    2d30:	80 e2       	ldi	r24, 0x20	; 32
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <fputc>
    2d38:	2a 94       	dec	r2
    2d3a:	f6 cf       	rjmp	.-20     	; 0x2d28 <vfprintf+0x39a>
    2d3c:	f6 01       	movw	r30, r12
    2d3e:	86 81       	ldd	r24, Z+6	; 0x06
    2d40:	97 81       	ldd	r25, Z+7	; 0x07
    2d42:	02 c0       	rjmp	.+4      	; 0x2d48 <vfprintf+0x3ba>
    2d44:	8f ef       	ldi	r24, 0xFF	; 255
    2d46:	9f ef       	ldi	r25, 0xFF	; 255
    2d48:	2b 96       	adiw	r28, 0x0b	; 11
    2d4a:	e2 e1       	ldi	r30, 0x12	; 18
    2d4c:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__epilogue_restores__>

00002d50 <strnlen_P>:
    2d50:	fc 01       	movw	r30, r24
    2d52:	05 90       	lpm	r0, Z+
    2d54:	61 50       	subi	r22, 0x01	; 1
    2d56:	70 40       	sbci	r23, 0x00	; 0
    2d58:	01 10       	cpse	r0, r1
    2d5a:	d8 f7       	brcc	.-10     	; 0x2d52 <strnlen_P+0x2>
    2d5c:	80 95       	com	r24
    2d5e:	90 95       	com	r25
    2d60:	8e 0f       	add	r24, r30
    2d62:	9f 1f       	adc	r25, r31
    2d64:	08 95       	ret

00002d66 <strnlen>:
    2d66:	fc 01       	movw	r30, r24
    2d68:	61 50       	subi	r22, 0x01	; 1
    2d6a:	70 40       	sbci	r23, 0x00	; 0
    2d6c:	01 90       	ld	r0, Z+
    2d6e:	01 10       	cpse	r0, r1
    2d70:	d8 f7       	brcc	.-10     	; 0x2d68 <strnlen+0x2>
    2d72:	80 95       	com	r24
    2d74:	90 95       	com	r25
    2d76:	8e 0f       	add	r24, r30
    2d78:	9f 1f       	adc	r25, r31
    2d7a:	08 95       	ret

00002d7c <fputc>:
    2d7c:	0f 93       	push	r16
    2d7e:	1f 93       	push	r17
    2d80:	cf 93       	push	r28
    2d82:	df 93       	push	r29
    2d84:	fb 01       	movw	r30, r22
    2d86:	23 81       	ldd	r18, Z+3	; 0x03
    2d88:	21 fd       	sbrc	r18, 1
    2d8a:	03 c0       	rjmp	.+6      	; 0x2d92 <fputc+0x16>
    2d8c:	8f ef       	ldi	r24, 0xFF	; 255
    2d8e:	9f ef       	ldi	r25, 0xFF	; 255
    2d90:	2c c0       	rjmp	.+88     	; 0x2dea <fputc+0x6e>
    2d92:	22 ff       	sbrs	r18, 2
    2d94:	16 c0       	rjmp	.+44     	; 0x2dc2 <fputc+0x46>
    2d96:	46 81       	ldd	r20, Z+6	; 0x06
    2d98:	57 81       	ldd	r21, Z+7	; 0x07
    2d9a:	24 81       	ldd	r18, Z+4	; 0x04
    2d9c:	35 81       	ldd	r19, Z+5	; 0x05
    2d9e:	42 17       	cp	r20, r18
    2da0:	53 07       	cpc	r21, r19
    2da2:	44 f4       	brge	.+16     	; 0x2db4 <fputc+0x38>
    2da4:	a0 81       	ld	r26, Z
    2da6:	b1 81       	ldd	r27, Z+1	; 0x01
    2da8:	9d 01       	movw	r18, r26
    2daa:	2f 5f       	subi	r18, 0xFF	; 255
    2dac:	3f 4f       	sbci	r19, 0xFF	; 255
    2dae:	31 83       	std	Z+1, r19	; 0x01
    2db0:	20 83       	st	Z, r18
    2db2:	8c 93       	st	X, r24
    2db4:	26 81       	ldd	r18, Z+6	; 0x06
    2db6:	37 81       	ldd	r19, Z+7	; 0x07
    2db8:	2f 5f       	subi	r18, 0xFF	; 255
    2dba:	3f 4f       	sbci	r19, 0xFF	; 255
    2dbc:	37 83       	std	Z+7, r19	; 0x07
    2dbe:	26 83       	std	Z+6, r18	; 0x06
    2dc0:	14 c0       	rjmp	.+40     	; 0x2dea <fputc+0x6e>
    2dc2:	8b 01       	movw	r16, r22
    2dc4:	ec 01       	movw	r28, r24
    2dc6:	fb 01       	movw	r30, r22
    2dc8:	00 84       	ldd	r0, Z+8	; 0x08
    2dca:	f1 85       	ldd	r31, Z+9	; 0x09
    2dcc:	e0 2d       	mov	r30, r0
    2dce:	09 95       	icall
    2dd0:	89 2b       	or	r24, r25
    2dd2:	e1 f6       	brne	.-72     	; 0x2d8c <fputc+0x10>
    2dd4:	d8 01       	movw	r26, r16
    2dd6:	16 96       	adiw	r26, 0x06	; 6
    2dd8:	8d 91       	ld	r24, X+
    2dda:	9c 91       	ld	r25, X
    2ddc:	17 97       	sbiw	r26, 0x07	; 7
    2dde:	01 96       	adiw	r24, 0x01	; 1
    2de0:	17 96       	adiw	r26, 0x07	; 7
    2de2:	9c 93       	st	X, r25
    2de4:	8e 93       	st	-X, r24
    2de6:	16 97       	sbiw	r26, 0x06	; 6
    2de8:	ce 01       	movw	r24, r28
    2dea:	df 91       	pop	r29
    2dec:	cf 91       	pop	r28
    2dee:	1f 91       	pop	r17
    2df0:	0f 91       	pop	r16
    2df2:	08 95       	ret

00002df4 <__ultoa_invert>:
    2df4:	fa 01       	movw	r30, r20
    2df6:	aa 27       	eor	r26, r26
    2df8:	28 30       	cpi	r18, 0x08	; 8
    2dfa:	51 f1       	breq	.+84     	; 0x2e50 <__ultoa_invert+0x5c>
    2dfc:	20 31       	cpi	r18, 0x10	; 16
    2dfe:	81 f1       	breq	.+96     	; 0x2e60 <__ultoa_invert+0x6c>
    2e00:	e8 94       	clt
    2e02:	6f 93       	push	r22
    2e04:	6e 7f       	andi	r22, 0xFE	; 254
    2e06:	6e 5f       	subi	r22, 0xFE	; 254
    2e08:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0e:	af 4f       	sbci	r26, 0xFF	; 255
    2e10:	b1 e0       	ldi	r27, 0x01	; 1
    2e12:	3e d0       	rcall	.+124    	; 0x2e90 <__ultoa_invert+0x9c>
    2e14:	b4 e0       	ldi	r27, 0x04	; 4
    2e16:	3c d0       	rcall	.+120    	; 0x2e90 <__ultoa_invert+0x9c>
    2e18:	67 0f       	add	r22, r23
    2e1a:	78 1f       	adc	r23, r24
    2e1c:	89 1f       	adc	r24, r25
    2e1e:	9a 1f       	adc	r25, r26
    2e20:	a1 1d       	adc	r26, r1
    2e22:	68 0f       	add	r22, r24
    2e24:	79 1f       	adc	r23, r25
    2e26:	8a 1f       	adc	r24, r26
    2e28:	91 1d       	adc	r25, r1
    2e2a:	a1 1d       	adc	r26, r1
    2e2c:	6a 0f       	add	r22, r26
    2e2e:	71 1d       	adc	r23, r1
    2e30:	81 1d       	adc	r24, r1
    2e32:	91 1d       	adc	r25, r1
    2e34:	a1 1d       	adc	r26, r1
    2e36:	20 d0       	rcall	.+64     	; 0x2e78 <__ultoa_invert+0x84>
    2e38:	09 f4       	brne	.+2      	; 0x2e3c <__ultoa_invert+0x48>
    2e3a:	68 94       	set
    2e3c:	3f 91       	pop	r19
    2e3e:	2a e0       	ldi	r18, 0x0A	; 10
    2e40:	26 9f       	mul	r18, r22
    2e42:	11 24       	eor	r1, r1
    2e44:	30 19       	sub	r19, r0
    2e46:	30 5d       	subi	r19, 0xD0	; 208
    2e48:	31 93       	st	Z+, r19
    2e4a:	de f6       	brtc	.-74     	; 0x2e02 <__ultoa_invert+0xe>
    2e4c:	cf 01       	movw	r24, r30
    2e4e:	08 95       	ret
    2e50:	46 2f       	mov	r20, r22
    2e52:	47 70       	andi	r20, 0x07	; 7
    2e54:	40 5d       	subi	r20, 0xD0	; 208
    2e56:	41 93       	st	Z+, r20
    2e58:	b3 e0       	ldi	r27, 0x03	; 3
    2e5a:	0f d0       	rcall	.+30     	; 0x2e7a <__ultoa_invert+0x86>
    2e5c:	c9 f7       	brne	.-14     	; 0x2e50 <__ultoa_invert+0x5c>
    2e5e:	f6 cf       	rjmp	.-20     	; 0x2e4c <__ultoa_invert+0x58>
    2e60:	46 2f       	mov	r20, r22
    2e62:	4f 70       	andi	r20, 0x0F	; 15
    2e64:	40 5d       	subi	r20, 0xD0	; 208
    2e66:	4a 33       	cpi	r20, 0x3A	; 58
    2e68:	18 f0       	brcs	.+6      	; 0x2e70 <__ultoa_invert+0x7c>
    2e6a:	49 5d       	subi	r20, 0xD9	; 217
    2e6c:	31 fd       	sbrc	r19, 1
    2e6e:	40 52       	subi	r20, 0x20	; 32
    2e70:	41 93       	st	Z+, r20
    2e72:	02 d0       	rcall	.+4      	; 0x2e78 <__ultoa_invert+0x84>
    2e74:	a9 f7       	brne	.-22     	; 0x2e60 <__ultoa_invert+0x6c>
    2e76:	ea cf       	rjmp	.-44     	; 0x2e4c <__ultoa_invert+0x58>
    2e78:	b4 e0       	ldi	r27, 0x04	; 4
    2e7a:	a6 95       	lsr	r26
    2e7c:	97 95       	ror	r25
    2e7e:	87 95       	ror	r24
    2e80:	77 95       	ror	r23
    2e82:	67 95       	ror	r22
    2e84:	ba 95       	dec	r27
    2e86:	c9 f7       	brne	.-14     	; 0x2e7a <__ultoa_invert+0x86>
    2e88:	00 97       	sbiw	r24, 0x00	; 0
    2e8a:	61 05       	cpc	r22, r1
    2e8c:	71 05       	cpc	r23, r1
    2e8e:	08 95       	ret
    2e90:	9b 01       	movw	r18, r22
    2e92:	ac 01       	movw	r20, r24
    2e94:	0a 2e       	mov	r0, r26
    2e96:	06 94       	lsr	r0
    2e98:	57 95       	ror	r21
    2e9a:	47 95       	ror	r20
    2e9c:	37 95       	ror	r19
    2e9e:	27 95       	ror	r18
    2ea0:	ba 95       	dec	r27
    2ea2:	c9 f7       	brne	.-14     	; 0x2e96 <__ultoa_invert+0xa2>
    2ea4:	62 0f       	add	r22, r18
    2ea6:	73 1f       	adc	r23, r19
    2ea8:	84 1f       	adc	r24, r20
    2eaa:	95 1f       	adc	r25, r21
    2eac:	a0 1d       	adc	r26, r0
    2eae:	08 95       	ret

00002eb0 <__prologue_saves__>:
    2eb0:	2f 92       	push	r2
    2eb2:	3f 92       	push	r3
    2eb4:	4f 92       	push	r4
    2eb6:	5f 92       	push	r5
    2eb8:	6f 92       	push	r6
    2eba:	7f 92       	push	r7
    2ebc:	8f 92       	push	r8
    2ebe:	9f 92       	push	r9
    2ec0:	af 92       	push	r10
    2ec2:	bf 92       	push	r11
    2ec4:	cf 92       	push	r12
    2ec6:	df 92       	push	r13
    2ec8:	ef 92       	push	r14
    2eca:	ff 92       	push	r15
    2ecc:	0f 93       	push	r16
    2ece:	1f 93       	push	r17
    2ed0:	cf 93       	push	r28
    2ed2:	df 93       	push	r29
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
    2ed8:	ca 1b       	sub	r28, r26
    2eda:	db 0b       	sbc	r29, r27
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	de bf       	out	0x3e, r29	; 62
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	cd bf       	out	0x3d, r28	; 61
    2ee6:	09 94       	ijmp

00002ee8 <__epilogue_restores__>:
    2ee8:	2a 88       	ldd	r2, Y+18	; 0x12
    2eea:	39 88       	ldd	r3, Y+17	; 0x11
    2eec:	48 88       	ldd	r4, Y+16	; 0x10
    2eee:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ef0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ef2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ef4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ef6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ef8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2efa:	b9 84       	ldd	r11, Y+9	; 0x09
    2efc:	c8 84       	ldd	r12, Y+8	; 0x08
    2efe:	df 80       	ldd	r13, Y+7	; 0x07
    2f00:	ee 80       	ldd	r14, Y+6	; 0x06
    2f02:	fd 80       	ldd	r15, Y+5	; 0x05
    2f04:	0c 81       	ldd	r16, Y+4	; 0x04
    2f06:	1b 81       	ldd	r17, Y+3	; 0x03
    2f08:	aa 81       	ldd	r26, Y+2	; 0x02
    2f0a:	b9 81       	ldd	r27, Y+1	; 0x01
    2f0c:	ce 0f       	add	r28, r30
    2f0e:	d1 1d       	adc	r29, r1
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	de bf       	out	0x3e, r29	; 62
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	cd bf       	out	0x3d, r28	; 61
    2f1a:	ed 01       	movw	r28, r26
    2f1c:	08 95       	ret

00002f1e <_exit>:
    2f1e:	f8 94       	cli

00002f20 <__stop_program>:
    2f20:	ff cf       	rjmp	.-2      	; 0x2f20 <__stop_program>
